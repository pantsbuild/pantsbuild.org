{
  "name_to_goal_info": {
    "check": {
      "consumed_scopes": [
        "",
        "check"
      ],
      "description": "Run type checking or the lightest variant of compilation available for a language.",
      "is_implemented": true,
      "name": "check",
      "provider": "pants.core"
    },
    "count-loc": {
      "consumed_scopes": [
        "",
        "python-bootstrap",
        "scc"
      ],
      "description": "Count lines of code.",
      "is_implemented": true,
      "name": "count-loc",
      "provider": "pants.backend.project_info"
    },
    "dependees": {
      "consumed_scopes": [
        "",
        "dependees"
      ],
      "description": "List all targets that depend on any of the input files/targets.",
      "is_implemented": true,
      "name": "dependees",
      "provider": "pants.backend.project_info"
    },
    "dependencies": {
      "consumed_scopes": [
        "",
        "dependencies"
      ],
      "description": "List the dependencies of the input files/targets.",
      "is_implemented": true,
      "name": "dependencies",
      "provider": "pants.backend.project_info"
    },
    "experimental-bsp": {
      "consumed_scopes": [],
      "description": "Setup repository for Build Server Protocol (https://build-server-protocol.github.io/).",
      "is_implemented": true,
      "name": "experimental-bsp",
      "provider": "pants.core"
    },
    "export": {
      "consumed_scopes": [
        ""
      ],
      "description": "Export Pants data for use in other tools, such as IDEs.",
      "is_implemented": true,
      "name": "export",
      "provider": "pants.core"
    },
    "export-codegen": {
      "consumed_scopes": [
        ""
      ],
      "description": "Write generated files to `dist/codegen` for use outside of Pants.",
      "is_implemented": true,
      "name": "export-codegen",
      "provider": "pants.backend.docker"
    },
    "filedeps": {
      "consumed_scopes": [
        "",
        "filedeps"
      ],
      "description": "List all source and BUILD files a target depends on.",
      "is_implemented": true,
      "name": "filedeps",
      "provider": "pants.backend.project_info"
    },
    "filter": {
      "consumed_scopes": [
        "",
        "filter"
      ],
      "description": "Filter the input targets based on various criteria.\n\nMost of the filtering options below are comma-separated lists of filtering criteria, with an implied logical OR between them, so that a target passes the filter if it matches any of the criteria in the list. A '-' prefix inverts the sense of the entire comma-separated list, so that a target passes the filter only if it matches none of the criteria in the list.\n\nEach of the filtering options may be specified multiple times, with an implied logical AND between them.",
      "is_implemented": true,
      "name": "filter",
      "provider": "pants.backend.project_info"
    },
    "fmt": {
      "consumed_scopes": [
        "",
        "fmt"
      ],
      "description": "Autoformat source code.",
      "is_implemented": true,
      "name": "fmt",
      "provider": "pants.core"
    },
    "generate-lockfiles": {
      "consumed_scopes": [
        "generate-lockfiles"
      ],
      "description": "Generate lockfiles for Python third-party dependencies.",
      "is_implemented": true,
      "name": "generate-lockfiles",
      "provider": "pants.core"
    },
    "help": {
      "consumed_scopes": [],
      "description": "Display usage message.",
      "is_implemented": true,
      "name": "help",
      "provider": "pants.goal"
    },
    "help-advanced": {
      "consumed_scopes": [],
      "description": "Help for advanced options.",
      "is_implemented": true,
      "name": "help-advanced",
      "provider": "pants.goal"
    },
    "help-all": {
      "consumed_scopes": [],
      "description": "Print a JSON object containing all help info.",
      "is_implemented": true,
      "name": "help-all",
      "provider": "pants.goal"
    },
    "lint": {
      "consumed_scopes": [
        "",
        "lint"
      ],
      "description": "Run all linters and/or formatters in check mode.",
      "is_implemented": true,
      "name": "lint",
      "provider": "pants.core"
    },
    "list": {
      "consumed_scopes": [
        "",
        "list"
      ],
      "description": "Lists all targets matching the file or target arguments.",
      "is_implemented": true,
      "name": "list",
      "provider": "pants.backend.project_info"
    },
    "package": {
      "consumed_scopes": [
        ""
      ],
      "description": "Create a distributable package.",
      "is_implemented": true,
      "name": "package",
      "provider": "pants.core"
    },
    "paths": {
      "consumed_scopes": [
        "",
        "paths"
      ],
      "description": "List the paths between two addresses.",
      "is_implemented": true,
      "name": "paths",
      "provider": "pants.backend.project_info"
    },
    "peek": {
      "consumed_scopes": [
        "",
        "peek"
      ],
      "description": "Display BUILD target info",
      "is_implemented": true,
      "name": "peek",
      "provider": "pants.backend.project_info"
    },
    "publish": {
      "consumed_scopes": [
        "",
        "publish"
      ],
      "description": "Publish deliverables (assets, distributions, images, etc).",
      "is_implemented": true,
      "name": "publish",
      "provider": "pants.core"
    },
    "py-constraints": {
      "consumed_scopes": [
        "",
        "py-constraints",
        "python"
      ],
      "description": "Determine what Python interpreter constraints are used by files/targets.",
      "is_implemented": true,
      "name": "py-constraints",
      "provider": "pants.backend.python.mixed_interpreter_constraints"
    },
    "repl": {
      "consumed_scopes": [
        "",
        "repl"
      ],
      "description": "Open a REPL with the specified code loadable.",
      "is_implemented": true,
      "name": "repl",
      "provider": "pants.core"
    },
    "roots": {
      "consumed_scopes": [
        "roots",
        "source"
      ],
      "description": "List the repo's registered source roots.",
      "is_implemented": true,
      "name": "roots",
      "provider": "pants.backend.project_info"
    },
    "run": {
      "consumed_scopes": [
        "",
        "run"
      ],
      "description": "Runs a binary target.\n\nThis goal propagates the return code of the underlying executable.\n\nIf your application can safely be restarted while it is running, you can pass `restartable=True` on your binary target (for supported types), and the `run` goal will automatically restart them as all relevant files change. This can be particularly useful for server applications.",
      "is_implemented": true,
      "name": "run",
      "provider": "pants.core"
    },
    "tailor": {
      "consumed_scopes": [
        "",
        "tailor"
      ],
      "description": "Auto-generate BUILD file targets for new source files.",
      "is_implemented": true,
      "name": "tailor",
      "provider": "pants.core"
    },
    "test": {
      "consumed_scopes": [
        "",
        "test"
      ],
      "description": "Run tests.",
      "is_implemented": true,
      "name": "test",
      "provider": "pants.core"
    },
    "update-build-files": {
      "consumed_scopes": [
        "",
        "update-build-files"
      ],
      "description": "Format and fix safe deprecations in BUILD files.\n\nThis does not handle the full Pants upgrade. You must still manually change `pants_version` in `pants.toml` and you may need to manually address some deprecations. See https://www.pantsbuild.org/v2.12/docs/upgrade-tips for upgrade tips.\n\nThis goal is run without arguments. It will run over all BUILD files in your project.",
      "is_implemented": true,
      "name": "update-build-files",
      "provider": "pants.core"
    },
    "version": {
      "consumed_scopes": [],
      "description": "Display Pants version.",
      "is_implemented": true,
      "name": "version",
      "provider": "pants.goal"
    }
  },
  "name_to_target_type_info": {
    "archive": {
      "alias": "archive",
      "description": "A ZIP or TAR file containing loose files and code packages.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "output_path",
          "default": null,
          "description": "Where the built asset should be located.\n\nIf undefined, this will use the path to the BUILD file, followed by the target name. For example, `src/python/project:app` would be `src.python.project/app.ext`.\n\nWhen running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 package`, this path will be prefixed by `--distdir` (e.g. `dist/`).\n\nWarning: setting this value risks naming collisions with other package targets you may have.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "packages",
          "default": null,
          "description": "Addresses to any targets that can be built with `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 package`, e.g. `[\"project:app\"]`.\n\nPants will build the assets as if you had run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 package`. It will include the results in your archive using the same name they would normally have, but without the `--distdir` prefix (e.g. `dist/`).\n\nYou can include anything that can be built by `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 package`, e.g. a `pex_binary`, `python_awslambda`, or even another `archive`.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "files",
          "default": null,
          "description": "Addresses to any `file`, `files`, or `relocated_files` targets to include in the archive, e.g. `[\"resources:logo\"]`.\n\nThis is useful to include any loose files, like data files, image assets, or config files.\n\nThis will ignore any targets that are not `file`, `files`, or `relocated_files` targets.\n\nIf you instead want those files included in any packages specified in the `packages` field for this target, then use a `resource` or `resources` target and have the original package depend on the resources.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "format",
          "default": null,
          "description": "The type of archive file to be generated.",
          "provider": "",
          "required": true,
          "type_hint": "'tar' | 'tar.bz2' | 'tar.gz' | 'tar.xz' | 'zip'"
        }
      ],
      "provider": "pants.core",
      "summary": "A ZIP or TAR file containing loose files and code packages."
    },
    "deploy_jar": {
      "alias": "deploy_jar",
      "description": "A `jar` file with first and third-party code bundled for deploys.\n\nThe JAR will contain class files for both first-party code and third-party dependencies, all in a common directory structure.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib', 'helloworld/main.py:lib', '3rdparty:reqs#django'].\n\nThis augments any dependencies inferred by Pants, such as by analyzing your imports. Use `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies` or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 peek` on this target to get the final result.\n\nSee https://www.pantsbuild.org/v2.12/docs/targets#target-addresses and https://www.pantsbuild.org/v2.12/docs/targets#target-generation for more about how addresses are formed, including for generated targets. You can also run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list ::` to find all addresses in your project, or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list dir:` to find all addresses defined in that directory.\n\nIf the target is in the same BUILD file, you can leave off the BUILD file path, e.g. `:tgt` instead of `helloworld/subdir:tgt`. For generated first-party addresses, use `./` for the file path, e.g. `./main.py:tgt`; for all other generated targets, use `:tgt#generated_name`.\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "output_path",
          "default": null,
          "description": "Where the built asset should be located.\n\nIf undefined, this will use the path to the BUILD file, followed by the target name. For example, `src/python/project:app` would be `src.python.project/app.ext`.\n\nWhen running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 package`, this path will be prefixed by `--distdir` (e.g. `dist/`).\n\nWarning: setting this value risks naming collisions with other package targets you may have.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "main",
          "default": null,
          "description": "`.`-separated name of the JVM class containing the `main()` method to be called when executing this JAR.",
          "provider": "",
          "required": true,
          "type_hint": "str"
        },
        {
          "alias": "jdk",
          "default": null,
          "description": "The major version of the JDK that this target should be built with. If not defined, will default to `[jvm].default_source_jdk`.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "resolve",
          "default": null,
          "description": "The resolve from `[jvm].resolves` to use when compiling this target.\n\nIf not defined, will default to `[jvm].default_resolve`.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "restartable",
          "default": "False",
          "description": "If true, runs of this target with the `run` goal may be interrupted and restarted when its input files change.",
          "provider": "",
          "required": false,
          "type_hint": "bool"
        }
      ],
      "provider": "pants.backend.experimental.java",
      "summary": "A `jar` file with first and third-party code bundled for deploys."
    },
    "docker_image": {
      "alias": "docker_image",
      "description": "The `docker_image` target describes how to build and tag a Docker image.\n\nAny dependencies, as inferred or explicitly specified, will be included in the Docker build context, after being packaged if applicable.\n\nBy default, will use a Dockerfile from the same directory as the BUILD file this target is defined in. Point at another file with the `source` field, or use the `instructions` field to have the Dockerfile contents verbatim directly in the BUILD file.\n\nDependencies on upstream/base images defined by another `docker_image` are inferred if referenced by a build argument with a default value of the target address.\n\nExample:\n\n    # src/docker/downstream/Dockerfile\n    ARG BASE=src/docker/upstream:image\n    FROM $BASE\n    ...",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "extra_build_args",
          "default": "()",
          "description": "Build arguments (`--build-arg`) to use when building this image. Entries are either strings in the form `ARG_NAME=value` to set an explicit value; or just `ARG_NAME` to copy the value from Pants's own environment.\n\nUse `[docker].build_args` to set default build args for all images.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib', 'helloworld/main.py:lib', '3rdparty:reqs#django'].\n\nThis augments any dependencies inferred by Pants, such as by analyzing your imports. Use `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies` or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 peek` on this target to get the final result.\n\nSee https://www.pantsbuild.org/v2.12/docs/targets#target-addresses and https://www.pantsbuild.org/v2.12/docs/targets#target-generation for more about how addresses are formed, including for generated targets. You can also run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list ::` to find all addresses in your project, or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list dir:` to find all addresses defined in that directory.\n\nIf the target is in the same BUILD file, you can leave off the BUILD file path, e.g. `:tgt` instead of `helloworld/subdir:tgt`. For generated first-party addresses, use `./` for the file path, e.g. `./main.py:tgt`; for all other generated targets, use `:tgt#generated_name`.\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "source",
          "default": "'Dockerfile'",
          "description": "The Dockerfile to use when building the Docker image.\n\nUse the `instructions` field instead if you prefer not having the Dockerfile in your source tree.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "instructions",
          "default": null,
          "description": "The `Dockerfile` content, typically one instruction per list item.\n\nUse the `source` field instead if you prefer having the Dockerfile in your source tree.\n\nExample:\n\n    # example/BUILD\n    docker_image(\n      instructions=[\n        \"FROM base/image:1.0\",\n        \"RUN echo example\",\n      ],\n    )",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "context_root",
          "default": null,
          "description": "Specify which directory to use as the Docker build context root. This affects the file paths to use for the `COPY` and `ADD` instructions. For example, whether `COPY files/f.txt` should look for the file relative to the build root: `<build root>/files/f.txt` vs relative to the BUILD file: `<build root>/path_to_build_file/files/f.txt`.\n\nSpecify the `context_root` path as `files` for relative to build root, or as `./files` for relative to the BUILD file.\n\nIf `context_root` is not specified, it defaults to `[docker].default_context_root`.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "image_tags",
          "default": "('latest',)",
          "description": "\nAny tags to apply to the Docker image name (the version is usually applied as a tag).\n\ntag may use placeholders in curly braces to be interpolated. The placeholders are derived from various sources, such as the Dockerfile instructions and build args.\n\nSee https://www.pantsbuild.org/v2.12/docs/tagging-docker-images.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "registries",
          "default": "('<all default registries>',)",
          "description": "List of addresses or configured aliases to any Docker registries to use for the built image.\n\nThe address is a domain name with optional port for your registry, and any registry aliases are prefixed with `@` for addresses in the [docker].registries configuration section.\n\nBy default, all configured registries with `default = true` are used.\n\nExample:\n\n    # pants.toml\n    [docker.registries.my-registry-alias]\n    address = \"myregistrydomain:port\"\n    default = false # optional\n\n    # example/BUILD\n    docker_image(\n        registries = [\n            \"@my-registry-alias\",\n            \"myregistrydomain:port\",\n        ],\n    )\n\nThe above example shows two valid `registry` options: using an alias to a configured registry and the address to a registry verbatim in the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "repository",
          "default": null,
          "description": "The repository name for the Docker image. e.g. \"<repository>/<name>\".\n\nIt uses the `[docker].default_repository` by default.\n\nrepository may use placeholders in curly braces to be interpolated. The placeholders are derived from various sources, such as the Dockerfile instructions and build args.\n\nAdditional placeholders for the repository field are: `name`, `directory` and `parent_directory`.\n\nSee the documentation for `[docker].default_repository` for more information.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "image_labels",
          "default": null,
          "description": "Provide image metadata.\n\nlabel value may use placeholders in curly braces to be interpolated. The placeholders are derived from various sources, such as the Dockerfile instructions and build args.\n\nSee [Docker labels](https://docs.docker.com/config/labels-custom-metadata/#manage-labels-on-objects) for more information.",
          "provider": "",
          "required": false,
          "type_hint": "Dict[str, str] | None"
        },
        {
          "alias": "secrets",
          "default": null,
          "description": "Secret files to expose to the build (only if BuildKit enabled).\n\nSecrets may use absolute paths, or paths relative to your build root, or the BUILD file if prefixed with `./`. The id should be valid as used by the Docker build `--secret` option. See [Docker secrets](https://docs.docker.com/engine/swarm/secrets/) for more information.\n\nExample:\n\n    docker_image(\n        secrets={\n            \"mysecret\": \"/var/secrets/some-secret\",\n            \"repo-secret\": \"src/proj/secrets/some-secret\",\n            \"target-secret\": \"./secrets/some-secret\",\n        }\n    )",
          "provider": "",
          "required": false,
          "type_hint": "Dict[str, str] | None"
        },
        {
          "alias": "ssh",
          "default": "()",
          "description": "SSH agent socket or keys to expose to the build (only if BuildKit enabled) (format: default|<id>[=<socket>|<key>[,<key>]])\n\nThe exposed agent and/or keys can then be used in your `Dockerfile` by mounting them in your `RUN` instructions:\n\n    RUN --mount=type=ssh ...\n\nSee [Docker documentation](https://docs.docker.com/develop/develop-images/build_enhancements/#using-ssh-to-access-private-data-in-builds) for more information.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "skip_push",
          "default": "False",
          "description": "If set to true, do not push this image to registries when running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 publish`.",
          "provider": "",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "target_stage",
          "default": null,
          "description": "Specify target build stage, rather than building the entire `Dockerfile`.\n\nWhen using multi-stage build, you may name your stages, and can target them when building to only selectively build a certain stage. See also the `--docker-build-target-stage` option.\n\nRead more about [multi-stage Docker builds](https://docs.docker.com/develop/develop-images/multistage-build/#stop-at-a-specific-build-stage)",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "restartable",
          "default": "False",
          "description": "If true, runs of this target with the `run` goal may be interrupted and restarted when its input files change.",
          "provider": "",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_hadolint",
          "default": "False",
          "description": "If true, don't run hadolint on this target's Dockerfile.",
          "provider": "pants.backend.docker.lint.hadolint",
          "required": false,
          "type_hint": "bool"
        }
      ],
      "provider": "pants.backend.docker",
      "summary": "The `docker_image` target describes how to build and tag a Docker image."
    },
    "experimental_run_shell_command": {
      "alias": "experimental_run_shell_command",
      "description": "Run a script in the workspace, with all dependencies packaged/copied into a chroot.\n\nExample BUILD file:\n\n    experimental_run_shell_command(\n        command=\"./scripts/my-script.sh --data-files-dir={chroot}\",\n        dependencies=[\"src/project/files:data\"],\n    )\n\nThe `command` may use either `{chroot}` on the command line, or the `$CHROOT` environment variable to get the root directory for where any dependencies are located.\n\nIn contrast to the `experimental_shell_command`, in addition to `workdir` you only have the `command` and `dependencies` fields as the `tools` you are going to use are already on the PATH which is inherited from the Pants environment. Also, the `outputs` does not apply, as any output files produced will end up directly in your project tree.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib', 'helloworld/main.py:lib', '3rdparty:reqs#django'].\n\nThis augments any dependencies inferred by Pants, such as by analyzing your imports. Use `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies` or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 peek` on this target to get the final result.\n\nSee https://www.pantsbuild.org/v2.12/docs/targets#target-addresses and https://www.pantsbuild.org/v2.12/docs/targets#target-generation for more about how addresses are formed, including for generated targets. You can also run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list ::` to find all addresses in your project, or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list dir:` to find all addresses defined in that directory.\n\nIf the target is in the same BUILD file, you can leave off the BUILD file path, e.g. `:tgt` instead of `helloworld/subdir:tgt`. For generated first-party addresses, use `./` for the file path, e.g. `./main.py:tgt`; for all other generated targets, use `:tgt#generated_name`.\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "command",
          "default": null,
          "description": "Shell command to execute.\n\nThe command is executed as 'bash -c <command>' by default.",
          "provider": "",
          "required": true,
          "type_hint": "str"
        },
        {
          "alias": "workdir",
          "default": "'.'",
          "description": "Sets the current working directory of the command, relative to the project root.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        }
      ],
      "provider": "pants.backend.shell",
      "summary": "Run a script in the workspace, with all dependencies packaged/copied into a chroot."
    },
    "experimental_shell_command": {
      "alias": "experimental_shell_command",
      "description": "Execute any external tool for its side effects.\n\nExample BUILD file:\n\n    experimental_shell_command(\n        command=\"./my-script.sh --flag\",\n        tools=[\"tar\", \"curl\", \"cat\", \"bash\", \"env\"],\n        dependencies=[\":scripts\"],\n        outputs=[\"results/\", \"logs/my-script.log\"],\n    )\n\n    shell_sources(name=\"scripts\")\n\nRemember to add this target to the dependencies of each consumer, such as your `python_tests` or `docker_image`. When relevant, Pants will run your `command` and insert the `outputs` into that consumer's context.\n\nThe command may be retried and/or cancelled, so ensure that it is idempotent.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib', 'helloworld/main.py:lib', '3rdparty:reqs#django'].\n\nThis augments any dependencies inferred by Pants, such as by analyzing your imports. Use `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies` or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 peek` on this target to get the final result.\n\nSee https://www.pantsbuild.org/v2.12/docs/targets#target-addresses and https://www.pantsbuild.org/v2.12/docs/targets#target-generation for more about how addresses are formed, including for generated targets. You can also run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list ::` to find all addresses in your project, or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list dir:` to find all addresses defined in that directory.\n\nIf the target is in the same BUILD file, you can leave off the BUILD file path, e.g. `:tgt` instead of `helloworld/subdir:tgt`. For generated first-party addresses, use `./` for the file path, e.g. `./main.py:tgt`; for all other generated targets, use `:tgt#generated_name`.\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "command",
          "default": null,
          "description": "Shell command to execute.\n\nThe command is executed as 'bash -c <command>' by default.",
          "provider": "",
          "required": true,
          "type_hint": "str"
        },
        {
          "alias": "log_output",
          "default": "False",
          "description": "Set to true if you want the output from the command logged to the console.",
          "provider": "",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "outputs",
          "default": null,
          "description": "Specify the shell command output files and directories.\n\nUse a trailing slash on directory names, i.e. `my_dir/`.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "timeout",
          "default": "30",
          "description": "Command execution timeout (in seconds).",
          "provider": "",
          "required": false,
          "type_hint": "int | None"
        },
        {
          "alias": "tools",
          "default": null,
          "description": "Specify required executable tools that might be used.\n\nOnly the tools explicitly provided will be available on the search PATH, and these tools must be found on the paths provided by [shell-setup].executable_search_paths (which defaults to the system PATH).",
          "provider": "",
          "required": true,
          "type_hint": "Iterable[str]"
        }
      ],
      "provider": "pants.backend.shell",
      "summary": "Execute any external tool for its side effects."
    },
    "file": {
      "alias": "file",
      "description": "A single loose file that lives outside of code packages.\n\nFiles are placed directly in archives, outside of code artifacts such as Python wheels or JVM JARs. The sources of a `file` target are accessed via filesystem APIs, such as Python's `open()`, via paths relative to the repository root.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib', 'helloworld/main.py:lib', '3rdparty:reqs#django'].\n\nThis augments any dependencies inferred by Pants, such as by analyzing your imports. Use `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies` or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 peek` on this target to get the final result.\n\nSee https://www.pantsbuild.org/v2.12/docs/targets#target-addresses and https://www.pantsbuild.org/v2.12/docs/targets#target-generation for more about how addresses are formed, including for generated targets. You can also run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list ::` to find all addresses in your project, or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list dir:` to find all addresses defined in that directory.\n\nIf the target is in the same BUILD file, you can leave off the BUILD file path, e.g. `:tgt` instead of `helloworld/subdir:tgt`. For generated first-party addresses, use `./` for the file path, e.g. `./main.py:tgt`; for all other generated targets, use `:tgt#generated_name`.\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "source",
          "default": null,
          "description": "A single file that belongs to this target.\n\nPath is relative to the BUILD file's directory, e.g. `source='example.ext'`.",
          "provider": "",
          "required": true,
          "type_hint": "str"
        }
      ],
      "provider": "pants.core",
      "summary": "A single loose file that lives outside of code packages."
    },
    "files": {
      "alias": "files",
      "description": "Generate a `file` target for each file in the `sources` field.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "sources",
          "default": null,
          "description": "A list of files and globs that belong to this target.\n\nPaths are relative to the BUILD file's directory. You can ignore files/globs by prefixing them with `!`.\n\nExample: `sources=['example.ext', 'test_*.ext', '!test_ignore.ext']`.",
          "provider": "",
          "required": true,
          "type_hint": "Iterable[str]"
        },
        {
          "alias": "overrides",
          "default": null,
          "description": "Override the field values for generated `file` targets.\n\nExpects a dictionary of relative file paths and globs to a dictionary for the overrides. You may either use a string for a single path / glob, or a string tuple for multiple paths / globs. Each override is a dictionary of field names to the overridden value.\n\nFor example:\n\n```\noverrides={\n  \"foo.json\": {\"description\": \"our customer model\"]},\n  \"bar.json\": {\"description\": \"our product model\"]},\n  (\"foo.json\", \"bar.json\"): {\"tags\": [\"overridden\"]},\n}\n```\n\nFile paths and globs are relative to the BUILD file's directory. Every overridden file is validated to belong to this target's `sources` field.\n\nIf you'd like to override a field's value for every `file` target generated by this target, change the field directly on this target rather than using the `overrides` field.\n\nYou can specify the same file name in multiple keys, so long as you don't override the same field more than one time for the file.",
          "provider": "",
          "required": false,
          "type_hint": "Dict[Union[str, Tuple[str, ...]], Dict[str, Any]] | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib', 'helloworld/main.py:lib', '3rdparty:reqs#django'].\n\nThis augments any dependencies inferred by Pants, such as by analyzing your imports. Use `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies` or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 peek` on this target to get the final result.\n\nSee https://www.pantsbuild.org/v2.12/docs/targets#target-addresses and https://www.pantsbuild.org/v2.12/docs/targets#target-generation for more about how addresses are formed, including for generated targets. You can also run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list ::` to find all addresses in your project, or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list dir:` to find all addresses defined in that directory.\n\nIf the target is in the same BUILD file, you can leave off the BUILD file path, e.g. `:tgt` instead of `helloworld/subdir:tgt`. For generated first-party addresses, use `./` for the file path, e.g. `./main.py:tgt`; for all other generated targets, use `:tgt#generated_name`.\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        }
      ],
      "provider": "pants.core",
      "summary": "Generate a `file` target for each file in the `sources` field."
    },
    "go_binary": {
      "alias": "go_binary",
      "description": "A Go binary.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "output_path",
          "default": null,
          "description": "Where the built asset should be located.\n\nIf undefined, this will use the path to the BUILD file, followed by the target name. For example, `src/python/project:app` would be `src.python.project/app.ext`.\n\nWhen running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 package`, this path will be prefixed by `--distdir` (e.g. `dist/`).\n\nWarning: setting this value risks naming collisions with other package targets you may have.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "main",
          "default": null,
          "description": "Address of the `go_package` with the `main` for this binary.\n\nIf not specified, will default to the `go_package` for the same directory as this target's BUILD file. You should usually rely on this default.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "restartable",
          "default": "False",
          "description": "If true, runs of this target with the `run` goal may be interrupted and restarted when its input files change.",
          "provider": "",
          "required": false,
          "type_hint": "bool"
        }
      ],
      "provider": "pants.backend.experimental.go",
      "summary": "A Go binary."
    },
    "go_mod": {
      "alias": "go_mod",
      "description": "A first-party Go module (corresponding to a `go.mod` file).\n\nGenerates `go_third_party_package` targets based on the `require` directives in your `go.mod`.\n\nIf you have third-party packages, make sure you have an up-to-date `go.sum`. Run `go mod tidy` directly to update your `go.mod` and `go.sum`.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        }
      ],
      "provider": "pants.backend.experimental.go",
      "summary": "A first-party Go module (corresponding to a `go.mod` file)."
    },
    "go_package": {
      "alias": "go_package",
      "description": "A first-party Go package (corresponding to a directory with `.go` files).\n\nExpects that there is a `go_mod` target in its directory or in an ancestor directory.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib', 'helloworld/main.py:lib', '3rdparty:reqs#django'].\n\nThis augments any dependencies inferred by Pants, such as by analyzing your imports. Use `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies` or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 peek` on this target to get the final result.\n\nSee https://www.pantsbuild.org/v2.12/docs/targets#target-addresses and https://www.pantsbuild.org/v2.12/docs/targets#target-generation for more about how addresses are formed, including for generated targets. You can also run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list ::` to find all addresses in your project, or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list dir:` to find all addresses defined in that directory.\n\nIf the target is in the same BUILD file, you can leave off the BUILD file path, e.g. `:tgt` instead of `helloworld/subdir:tgt`. For generated first-party addresses, use `./` for the file path, e.g. `./main.py:tgt`; for all other generated targets, use `:tgt#generated_name`.\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "sources",
          "default": "('*.go', '*.s')",
          "description": "A list of files and globs that belong to this target.\n\nPaths are relative to the BUILD file's directory. You can ignore files/globs by prefixing them with `!`.\n\nExample: `sources=['example.ext', 'test_*.ext', '!test_ignore.ext']`.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "test_timeout",
          "default": null,
          "description": "A timeout (in seconds) when running this package's tests.\n\nIf this field is not set, the test will never time out.",
          "provider": "",
          "required": false,
          "type_hint": "int | None"
        },
        {
          "alias": "skip_tests",
          "default": "False",
          "description": "If true, don't run this package's tests.",
          "provider": "",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_gofmt",
          "default": "False",
          "description": "If true, don't run gofmt on this package.",
          "provider": "pants.backend.experimental.go",
          "required": false,
          "type_hint": "bool"
        }
      ],
      "provider": "pants.backend.experimental.go",
      "summary": "A first-party Go package (corresponding to a directory with `.go` files)."
    },
    "go_third_party_package": {
      "alias": "go_third_party_package",
      "description": "A package from a third-party Go module.\n\nYou should not explicitly create this target in BUILD files. Instead, add a `go_mod` target where you have your `go.mod` file, which will generate `go_third_party_package` targets for you.\n\nMake sure that your `go.mod` and `go.sum` files include this package's module.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib', 'helloworld/main.py:lib', '3rdparty:reqs#django'].\n\nThis augments any dependencies inferred by Pants, such as by analyzing your imports. Use `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies` or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 peek` on this target to get the final result.\n\nSee https://www.pantsbuild.org/v2.12/docs/targets#target-addresses and https://www.pantsbuild.org/v2.12/docs/targets#target-generation for more about how addresses are formed, including for generated targets. You can also run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list ::` to find all addresses in your project, or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list dir:` to find all addresses defined in that directory.\n\nIf the target is in the same BUILD file, you can leave off the BUILD file path, e.g. `:tgt` instead of `helloworld/subdir:tgt`. For generated first-party addresses, use `./` for the file path, e.g. `./main.py:tgt`; for all other generated targets, use `:tgt#generated_name`.\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "import_path",
          "default": null,
          "description": "Import path in Go code to import this package.\n\nThis field should not be overridden; use the value from target generation.",
          "provider": "",
          "required": true,
          "type_hint": "str"
        }
      ],
      "provider": "pants.backend.experimental.go",
      "summary": "A package from a third-party Go module."
    },
    "helm_artifact": {
      "alias": "helm_artifact",
      "description": "A third party Helm artifact.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "registry",
          "default": null,
          "description": "Either registry alias (prefixed by `@`) configured in `[helm.registries]` for the Helm artifact or the full OCI registry URL.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "repository",
          "default": null,
          "description": "Either a HTTP(S) URL to a classic repository, or a path inside an OCI registry (when `registry` is provided).",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "artifact",
          "default": null,
          "description": "Artifact name of the chart, without version number.",
          "provider": "",
          "required": true,
          "type_hint": "str"
        },
        {
          "alias": "version",
          "default": null,
          "description": "The `version` part of a third party Helm chart.",
          "provider": "",
          "required": true,
          "type_hint": "str"
        }
      ],
      "provider": "pants.backend.experimental.helm",
      "summary": "A third party Helm artifact."
    },
    "helm_chart": {
      "alias": "helm_chart",
      "description": "A Helm chart.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "chart",
          "default": "'Chart.yaml'",
          "description": "The chart definition file.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "sources",
          "default": "('values.yaml', 'templates/*.yaml', 'templates/*.tpl')",
          "description": "A list of files and globs that belong to this target.\n\nPaths are relative to the BUILD file's directory. You can ignore files/globs by prefixing them with `!`.\n\nExample: `sources=['example.ext', 'test_*.ext', '!test_ignore.ext']`.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib', 'helloworld/main.py:lib', '3rdparty:reqs#django'].\n\nThis augments any dependencies inferred by Pants, such as by analyzing your imports. Use `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies` or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 peek` on this target to get the final result.\n\nSee https://www.pantsbuild.org/v2.12/docs/targets#target-addresses and https://www.pantsbuild.org/v2.12/docs/targets#target-generation for more about how addresses are formed, including for generated targets. You can also run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list ::` to find all addresses in your project, or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list dir:` to find all addresses defined in that directory.\n\nIf the target is in the same BUILD file, you can leave off the BUILD file path, e.g. `:tgt` instead of `helloworld/subdir:tgt`. For generated first-party addresses, use `./` for the file path, e.g. `./main.py:tgt`; for all other generated targets, use `:tgt#generated_name`.\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "output_path",
          "default": null,
          "description": "Where the built directory tree should be located.\n\nIf undefined, this will use the path to the BUILD file, For example, `src/charts/mychart:tgt_name` would be `src.charts.mychart/tgt_name/`.\n\nRegardless of whether you use the default or set this field, the path will end with Helms's file format of `<chart_name>-<chart_version>.tgz`, where `chart_name` and `chart_version` are the values extracted from the Chart.yaml file. So, using the default for this field, the target `src/charts/mychart:tgt_name` might have a final path like `src.charts.mychart/tgt_name/mychart-0.1.0.tgz`.\n\nWhen running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 package`, this path will be prefixed by `--distdir` (e.g. `dist/`).\n\nWarning: setting this value risks naming collisions with other package targets you may have.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "lint_strict",
          "default": null,
          "description": "If set to true, enables strict linting of this Helm chart.",
          "provider": "",
          "required": false,
          "type_hint": "bool | None"
        },
        {
          "alias": "repository",
          "default": null,
          "description": "Repository to use in the Helm registry where this chart is going to be published.\n\nIf no value is given and `[helm].default-registry-repository` is undefined too, then the chart will be pushed to the root of the OCI registry.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "registries",
          "default": "('<ALL DEFAULT HELM REGISTRIES>',)",
          "description": "List of addresses or configured aliases to any OCI registries to use for the built chart.\n\nThe address is an `oci://` prefixed domain name with optional port for your registry, and any registry aliases are prefixed with `@` for addresses in the [helm].registries configuration section.\n\nBy default, all configured registries with `default = true` are used.\n\nExample:\n\n    # pants.toml\n    [helm.registries.my-registry-alias]\n    address = \"oci://myregistrydomain:port\"\n    default = false # optional\n\n    # example/BUILD\n    helm_chart(\n        registries = [\n            \"@my-registry-alias\",\n            \"oci://myregistrydomain:port\",\n        ],\n    )\n\nThe above example shows two valid `registry` options: using an alias to a configured registry and the address to a registry verbatim in the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "skip_push",
          "default": "False",
          "description": "If set to true, do not push this helm chart to registries when running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 publish`.",
          "provider": "",
          "required": false,
          "type_hint": "bool"
        }
      ],
      "provider": "pants.backend.experimental.helm",
      "summary": "A Helm chart."
    },
    "helm_unittest_test": {
      "alias": "helm_unittest_test",
      "description": "A single helm-unittest suite file.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "source",
          "default": null,
          "description": "A single file that belongs to this target.\n\nPath is relative to the BUILD file's directory, e.g. `source='example.ext'`.",
          "provider": "",
          "required": true,
          "type_hint": "str"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib', 'helloworld/main.py:lib', '3rdparty:reqs#django'].\n\nThis augments any dependencies inferred by Pants, such as by analyzing your imports. Use `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies` or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 peek` on this target to get the final result.\n\nSee https://www.pantsbuild.org/v2.12/docs/targets#target-addresses and https://www.pantsbuild.org/v2.12/docs/targets#target-generation for more about how addresses are formed, including for generated targets. You can also run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list ::` to find all addresses in your project, or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list dir:` to find all addresses defined in that directory.\n\nIf the target is in the same BUILD file, you can leave off the BUILD file path, e.g. `:tgt` instead of `helloworld/subdir:tgt`. For generated first-party addresses, use `./` for the file path, e.g. `./main.py:tgt`; for all other generated targets, use `:tgt#generated_name`.\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        }
      ],
      "provider": "pants.backend.experimental.helm",
      "summary": "A single helm-unittest suite file."
    },
    "helm_unittest_tests": {
      "alias": "helm_unittest_tests",
      "description": "Generates a `helm_unittest_test` target per each file in the `sources` field.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "sources",
          "default": "('*_test.yaml',)",
          "description": "A list of files and globs that belong to this target.\n\nPaths are relative to the BUILD file's directory. You can ignore files/globs by prefixing them with `!`.\n\nExample: `sources=['example.ext', 'test_*.ext', '!test_ignore.ext']`.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib', 'helloworld/main.py:lib', '3rdparty:reqs#django'].\n\nThis augments any dependencies inferred by Pants, such as by analyzing your imports. Use `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies` or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 peek` on this target to get the final result.\n\nSee https://www.pantsbuild.org/v2.12/docs/targets#target-addresses and https://www.pantsbuild.org/v2.12/docs/targets#target-generation for more about how addresses are formed, including for generated targets. You can also run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list ::` to find all addresses in your project, or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list dir:` to find all addresses defined in that directory.\n\nIf the target is in the same BUILD file, you can leave off the BUILD file path, e.g. `:tgt` instead of `helloworld/subdir:tgt`. For generated first-party addresses, use `./` for the file path, e.g. `./main.py:tgt`; for all other generated targets, use `:tgt#generated_name`.\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib', 'helloworld/main.py:lib', '3rdparty:reqs#django'].\n\nThis augments any dependencies inferred by Pants, such as by analyzing your imports. Use `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies` or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 peek` on this target to get the final result.\n\nSee https://www.pantsbuild.org/v2.12/docs/targets#target-addresses and https://www.pantsbuild.org/v2.12/docs/targets#target-generation for more about how addresses are formed, including for generated targets. You can also run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list ::` to find all addresses in your project, or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list dir:` to find all addresses defined in that directory.\n\nIf the target is in the same BUILD file, you can leave off the BUILD file path, e.g. `:tgt` instead of `helloworld/subdir:tgt`. For generated first-party addresses, use `./` for the file path, e.g. `./main.py:tgt`; for all other generated targets, use `:tgt#generated_name`.\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        }
      ],
      "provider": "pants.backend.experimental.helm",
      "summary": "Generates a `helm_unittest_test` target per each file in the `sources` field."
    },
    "java_source": {
      "alias": "java_source",
      "description": "A single Java source file containing application or library code.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib', 'helloworld/main.py:lib', '3rdparty:reqs#django'].\n\nThis augments any dependencies inferred by Pants, such as by analyzing your imports. Use `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies` or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 peek` on this target to get the final result.\n\nSee https://www.pantsbuild.org/v2.12/docs/targets#target-addresses and https://www.pantsbuild.org/v2.12/docs/targets#target-generation for more about how addresses are formed, including for generated targets. You can also run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list ::` to find all addresses in your project, or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list dir:` to find all addresses defined in that directory.\n\nIf the target is in the same BUILD file, you can leave off the BUILD file path, e.g. `:tgt` instead of `helloworld/subdir:tgt`. For generated first-party addresses, use `./` for the file path, e.g. `./main.py:tgt`; for all other generated targets, use `:tgt#generated_name`.\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "source",
          "default": null,
          "description": "A single file that belongs to this target.\n\nPath is relative to the BUILD file's directory, e.g. `source='example.ext'`.",
          "provider": "",
          "required": true,
          "type_hint": "str"
        },
        {
          "alias": "resolve",
          "default": null,
          "description": "The resolve from `[jvm].resolves` to use when compiling this target.\n\nIf not defined, will default to `[jvm].default_resolve`.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "experimental_provides_types",
          "default": null,
          "description": "Signals that the specified types should be fulfilled by these source files during dependency inference.\n\nThis allows for specific types within packages that are otherwise inferred as belonging to `jvm_artifact` targets to be unambiguously inferred as belonging to this first-party source.\n\nIf a given type is defined, at least one source file captured by this target must actually provide that symbol.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "jdk",
          "default": null,
          "description": "The major version of the JDK that this target should be built with. If not defined, will default to `[jvm].default_source_jdk`.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "skip_google_java_format",
          "default": "False",
          "description": "If true, don't run Google Java Format on this target's code.",
          "provider": "pants.backend.experimental.java.lint.google_java_format",
          "required": false,
          "type_hint": "bool"
        }
      ],
      "provider": "pants.backend.experimental.java",
      "summary": "A single Java source file containing application or library code."
    },
    "java_sources": {
      "alias": "java_sources",
      "description": "Generate a `java_source` target for each file in the `sources` field.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "sources",
          "default": "('*.java', '!*Test.java')",
          "description": "A list of files and globs that belong to this target.\n\nPaths are relative to the BUILD file's directory. You can ignore files/globs by prefixing them with `!`.\n\nExample: `sources=['example.ext', 'test_*.ext', '!test_ignore.ext']`.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "skip_google_java_format",
          "default": "False",
          "description": "If true, don't run Google Java Format on this target's code.",
          "provider": "pants.backend.experimental.java.lint.google_java_format",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib', 'helloworld/main.py:lib', '3rdparty:reqs#django'].\n\nThis augments any dependencies inferred by Pants, such as by analyzing your imports. Use `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies` or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 peek` on this target to get the final result.\n\nSee https://www.pantsbuild.org/v2.12/docs/targets#target-addresses and https://www.pantsbuild.org/v2.12/docs/targets#target-generation for more about how addresses are formed, including for generated targets. You can also run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list ::` to find all addresses in your project, or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list dir:` to find all addresses defined in that directory.\n\nIf the target is in the same BUILD file, you can leave off the BUILD file path, e.g. `:tgt` instead of `helloworld/subdir:tgt`. For generated first-party addresses, use `./` for the file path, e.g. `./main.py:tgt`; for all other generated targets, use `:tgt#generated_name`.\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "resolve",
          "default": null,
          "description": "The resolve from `[jvm].resolves` to use when compiling this target.\n\nIf not defined, will default to `[jvm].default_resolve`.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "jdk",
          "default": null,
          "description": "The major version of the JDK that this target should be built with. If not defined, will default to `[jvm].default_source_jdk`.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "experimental_provides_types",
          "default": null,
          "description": "Signals that the specified types should be fulfilled by these source files during dependency inference.\n\nThis allows for specific types within packages that are otherwise inferred as belonging to `jvm_artifact` targets to be unambiguously inferred as belonging to this first-party source.\n\nIf a given type is defined, at least one source file captured by this target must actually provide that symbol.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        }
      ],
      "provider": "pants.backend.experimental.java",
      "summary": "Generate a `java_source` target for each file in the `sources` field."
    },
    "junit_test": {
      "alias": "junit_test",
      "description": "A single Java test, run with JUnit.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "source",
          "default": null,
          "description": "A single file that belongs to this target.\n\nPath is relative to the BUILD file's directory, e.g. `source='example.ext'`.",
          "provider": "",
          "required": true,
          "type_hint": "str"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib', 'helloworld/main.py:lib', '3rdparty:reqs#django'].\n\nThis augments any dependencies inferred by Pants, such as by analyzing your imports. Use `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies` or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 peek` on this target to get the final result.\n\nSee https://www.pantsbuild.org/v2.12/docs/targets#target-addresses and https://www.pantsbuild.org/v2.12/docs/targets#target-generation for more about how addresses are formed, including for generated targets. You can also run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list ::` to find all addresses in your project, or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list dir:` to find all addresses defined in that directory.\n\nIf the target is in the same BUILD file, you can leave off the BUILD file path, e.g. `:tgt` instead of `helloworld/subdir:tgt`. For generated first-party addresses, use `./` for the file path, e.g. `./main.py:tgt`; for all other generated targets, use `:tgt#generated_name`.\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "resolve",
          "default": null,
          "description": "The resolve from `[jvm].resolves` to use when compiling this target.\n\nIf not defined, will default to `[jvm].default_resolve`.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "experimental_provides_types",
          "default": null,
          "description": "Signals that the specified types should be fulfilled by these source files during dependency inference.\n\nThis allows for specific types within packages that are otherwise inferred as belonging to `jvm_artifact` targets to be unambiguously inferred as belonging to this first-party source.\n\nIf a given type is defined, at least one source file captured by this target must actually provide that symbol.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "jdk",
          "default": null,
          "description": "The major version of the JDK that this target should be built with. If not defined, will default to `[jvm].default_source_jdk`.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        }
      ],
      "provider": "pants.backend.experimental.java",
      "summary": "A single Java test, run with JUnit."
    },
    "junit_tests": {
      "alias": "junit_tests",
      "description": "Generate a `junit_test` target for each file in the `sources` field.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "sources",
          "default": "('*Test.java',)",
          "description": "A list of files and globs that belong to this target.\n\nPaths are relative to the BUILD file's directory. You can ignore files/globs by prefixing them with `!`.\n\nExample: `sources=['example.ext', 'test_*.ext', '!test_ignore.ext']`.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib', 'helloworld/main.py:lib', '3rdparty:reqs#django'].\n\nThis augments any dependencies inferred by Pants, such as by analyzing your imports. Use `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies` or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 peek` on this target to get the final result.\n\nSee https://www.pantsbuild.org/v2.12/docs/targets#target-addresses and https://www.pantsbuild.org/v2.12/docs/targets#target-generation for more about how addresses are formed, including for generated targets. You can also run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list ::` to find all addresses in your project, or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list dir:` to find all addresses defined in that directory.\n\nIf the target is in the same BUILD file, you can leave off the BUILD file path, e.g. `:tgt` instead of `helloworld/subdir:tgt`. For generated first-party addresses, use `./` for the file path, e.g. `./main.py:tgt`; for all other generated targets, use `:tgt#generated_name`.\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "jdk",
          "default": null,
          "description": "The major version of the JDK that this target should be built with. If not defined, will default to `[jvm].default_source_jdk`.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "experimental_provides_types",
          "default": null,
          "description": "Signals that the specified types should be fulfilled by these source files during dependency inference.\n\nThis allows for specific types within packages that are otherwise inferred as belonging to `jvm_artifact` targets to be unambiguously inferred as belonging to this first-party source.\n\nIf a given type is defined, at least one source file captured by this target must actually provide that symbol.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "resolve",
          "default": null,
          "description": "The resolve from `[jvm].resolves` to use when compiling this target.\n\nIf not defined, will default to `[jvm].default_resolve`.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        }
      ],
      "provider": "pants.backend.experimental.java",
      "summary": "Generate a `junit_test` target for each file in the `sources` field."
    },
    "jvm_artifact": {
      "alias": "jvm_artifact",
      "description": "A third-party JVM artifact, as identified by its Maven-compatible coordinate.\n\nThat is, an artifact identified by its `group`, `artifact`, and `version` components.\n\nEach artifact is associated with one or more resolves (a logical name you give to a lockfile). For this artifact to be used by your first-party code, it must be associated with the resolve(s) used by that code. See the `resolve` field.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "group",
          "default": null,
          "description": "The 'group' part of a Maven-compatible coordinate to a third-party JAR artifact.\n\nFor the JAR coordinate `com.google.guava:guava:30.1.1-jre`, the group is `com.google.guava`.",
          "provider": "",
          "required": true,
          "type_hint": "str"
        },
        {
          "alias": "artifact",
          "default": null,
          "description": "The 'artifact' part of a Maven-compatible coordinate to a third-party JAR artifact.\n\nFor the JAR coordinate `com.google.guava:guava:30.1.1-jre`, the artifact is `guava`.",
          "provider": "",
          "required": true,
          "type_hint": "str"
        },
        {
          "alias": "version",
          "default": null,
          "description": "The 'version' part of a Maven-compatible coordinate to a third-party JAR artifact.\n\nFor the JAR coordinate `com.google.guava:guava:30.1.1-jre`, the version is `30.1.1-jre`.",
          "provider": "",
          "required": true,
          "type_hint": "str"
        },
        {
          "alias": "packages",
          "default": null,
          "description": "The JVM packages this artifact provides for the purposes of dependency inference.\n\nFor example, the JVM artifact `junit:junit` might provide `[\"org.junit.**\"]`.\n\nUsually you can leave this field off. If unspecified, Pants will fall back to the `[java-infer].third_party_import_mapping`, then to a built in mapping (https://github.com/pantsbuild/pants/blob/release_2.12.1/src/python/pants/jvm/dependency_inference/jvm_artifact_mappings.py), and then finally it will default to the normalized `group` of the artifact. For example, in the absence of any other mapping the artifact `io.confluent:common-config` would default to providing `[\"io.confluent.**\"]`.\n\nThe package path may be made recursive to match symbols in subpackages by adding `.**` to the end of the package path. For example, specify `[\"org.junit.**\"]` to infer a dependency on the artifact for any file importing a symbol from `org.junit` or its subpackages.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "url",
          "default": null,
          "description": "A URL that points to the location of this artifact.\n\nIf specified, Pants will not fetch this artifact from default Maven repositories, and will instead fetch the artifact from this URL. To use default maven repositories, do not set this value.\n\nNote that `file:` URLs are not supported. Instead, use the `jar` field for local artifacts.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "jar",
          "default": null,
          "description": "A local JAR file that provides this artifact to the lockfile resolver, instead of a Maven repository.\n\nPath is relative to the BUILD file.\n\nUse the `url` field for remote artifacts.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "resolve",
          "default": null,
          "description": "The resolve from `[jvm].resolves` that this artifact should be included in.\n\nIf not defined, will default to `[jvm].default_resolve`.\n\nWhen generating a lockfile for a particular resolve via the `coursier-resolve` goal, it will include all artifacts that are declared compatible with that resolve. First-party targets like `java_source` and `scala_source` also declare which resolve they use via the `resolve` field; so, for your first-party code to use a particular `jvm_artifact` target, that artifact must be included in the resolve used by that code.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "excludes",
          "default": null,
          "description": "A list of unversioned coordinates (i.e. `group:artifact`) that should be excluded as dependencies when this artifact is resolved.\n\nThis does not prevent this artifact from being included in the resolve as a dependency of other artifacts that depend on it, and is currently intended as a way to resolve version conflicts in complex resolves.\n\nThese values are passed directly to Coursier, and if specified incorrectly will show a parse error from Coursier.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        }
      ],
      "provider": "pants.backend.experimental.java",
      "summary": "A third-party JVM artifact, as identified by its Maven-compatible coordinate."
    },
    "jvm_war": {
      "alias": "jvm_war",
      "description": "A JSR 154 \"web application archive\" (or \"war\") with first-party and third-party code bundled for deploys in Java Servlet containers.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "resolve",
          "default": null,
          "description": "The resolve from `[jvm].resolves` to use when compiling this target.\n\nIf not defined, will default to `[jvm].default_resolve`.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "content",
          "default": null,
          "description": "A list of addresses to `resources` and `files` targets with content to place in the document root of this WAR file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib', 'helloworld/main.py:lib', '3rdparty:reqs#django'].\n\nThis augments any dependencies inferred by Pants, such as by analyzing your imports. Use `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies` or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 peek` on this target to get the final result.\n\nSee https://www.pantsbuild.org/v2.12/docs/targets#target-addresses and https://www.pantsbuild.org/v2.12/docs/targets#target-generation for more about how addresses are formed, including for generated targets. You can also run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list ::` to find all addresses in your project, or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list dir:` to find all addresses defined in that directory.\n\nIf the target is in the same BUILD file, you can leave off the BUILD file path, e.g. `:tgt` instead of `helloworld/subdir:tgt`. For generated first-party addresses, use `./` for the file path, e.g. `./main.py:tgt`; for all other generated targets, use `:tgt#generated_name`.\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "descriptor",
          "default": null,
          "description": "Path to a file containing the descriptor (i.e., web.xml) for this WAR file. Defaults to `web.xml`.",
          "provider": "",
          "required": true,
          "type_hint": "str"
        },
        {
          "alias": "output_path",
          "default": null,
          "description": "Where the built asset should be located.\n\nIf undefined, this will use the path to the BUILD file, followed by the target name. For example, `src/python/project:app` would be `src.python.project/app.ext`.\n\nWhen running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 package`, this path will be prefixed by `--distdir` (e.g. `dist/`).\n\nWarning: setting this value risks naming collisions with other package targets you may have.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        }
      ],
      "provider": "pants.backend.experimental.java",
      "summary": "A JSR 154 \"web application archive\" (or \"war\") with first-party and third-party code bundled for deploys in Java Servlet containers."
    },
    "kotlin_source": {
      "alias": "kotlin_source",
      "description": "A single Kotlin source file containing application or library code.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib', 'helloworld/main.py:lib', '3rdparty:reqs#django'].\n\nThis augments any dependencies inferred by Pants, such as by analyzing your imports. Use `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies` or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 peek` on this target to get the final result.\n\nSee https://www.pantsbuild.org/v2.12/docs/targets#target-addresses and https://www.pantsbuild.org/v2.12/docs/targets#target-generation for more about how addresses are formed, including for generated targets. You can also run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list ::` to find all addresses in your project, or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list dir:` to find all addresses defined in that directory.\n\nIf the target is in the same BUILD file, you can leave off the BUILD file path, e.g. `:tgt` instead of `helloworld/subdir:tgt`. For generated first-party addresses, use `./` for the file path, e.g. `./main.py:tgt`; for all other generated targets, use `:tgt#generated_name`.\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "source",
          "default": null,
          "description": "A single file that belongs to this target.\n\nPath is relative to the BUILD file's directory, e.g. `source='example.ext'`.",
          "provider": "",
          "required": true,
          "type_hint": "str"
        },
        {
          "alias": "kotlinc_plugins",
          "default": null,
          "description": "The IDs of Kotlin compiler plugins that this source file requires.\n\nThe plugin must be defined by a corresponding `kotlinc_plugin` AND `jvm_artifact` target, and must be present in this target's resolve's lockfile.\n\nIf not specified, this will default to the plugins specified in `[kotlinc].plugins_for_resolve` for this target's resolve.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "resolve",
          "default": null,
          "description": "The resolve from `[jvm].resolves` to use when compiling this target.\n\nIf not defined, will default to `[jvm].default_resolve`.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "experimental_provides_types",
          "default": null,
          "description": "Signals that the specified types should be fulfilled by these source files during dependency inference.\n\nThis allows for specific types within packages that are otherwise inferred as belonging to `jvm_artifact` targets to be unambiguously inferred as belonging to this first-party source.\n\nIf a given type is defined, at least one source file captured by this target must actually provide that symbol.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "jdk",
          "default": null,
          "description": "The major version of the JDK that this target should be built with. If not defined, will default to `[jvm].default_source_jdk`.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "skip_ktlint",
          "default": "False",
          "description": "If true, don't run Ktlint on this target's code.",
          "provider": "pants.backend.experimental.kotlin.lint.ktlint",
          "required": false,
          "type_hint": "bool"
        }
      ],
      "provider": "pants.backend.experimental.kotlin",
      "summary": "A single Kotlin source file containing application or library code."
    },
    "kotlin_sources": {
      "alias": "kotlin_sources",
      "description": "Generate a `kotlin_source` target for each file in the `sources` field.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "sources",
          "default": "('*.kt',)",
          "description": "A list of files and globs that belong to this target.\n\nPaths are relative to the BUILD file's directory. You can ignore files/globs by prefixing them with `!`.\n\nExample: `sources=['example.ext', 'test_*.ext', '!test_ignore.ext']`.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "skip_ktlint",
          "default": "False",
          "description": "If true, don't run Ktlint on this target's code.",
          "provider": "pants.backend.experimental.kotlin.lint.ktlint",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib', 'helloworld/main.py:lib', '3rdparty:reqs#django'].\n\nThis augments any dependencies inferred by Pants, such as by analyzing your imports. Use `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies` or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 peek` on this target to get the final result.\n\nSee https://www.pantsbuild.org/v2.12/docs/targets#target-addresses and https://www.pantsbuild.org/v2.12/docs/targets#target-generation for more about how addresses are formed, including for generated targets. You can also run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list ::` to find all addresses in your project, or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list dir:` to find all addresses defined in that directory.\n\nIf the target is in the same BUILD file, you can leave off the BUILD file path, e.g. `:tgt` instead of `helloworld/subdir:tgt`. For generated first-party addresses, use `./` for the file path, e.g. `./main.py:tgt`; for all other generated targets, use `:tgt#generated_name`.\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "kotlinc_plugins",
          "default": null,
          "description": "The IDs of Kotlin compiler plugins that this source file requires.\n\nThe plugin must be defined by a corresponding `kotlinc_plugin` AND `jvm_artifact` target, and must be present in this target's resolve's lockfile.\n\nIf not specified, this will default to the plugins specified in `[kotlinc].plugins_for_resolve` for this target's resolve.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "resolve",
          "default": null,
          "description": "The resolve from `[jvm].resolves` to use when compiling this target.\n\nIf not defined, will default to `[jvm].default_resolve`.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "jdk",
          "default": null,
          "description": "The major version of the JDK that this target should be built with. If not defined, will default to `[jvm].default_source_jdk`.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "experimental_provides_types",
          "default": null,
          "description": "Signals that the specified types should be fulfilled by these source files during dependency inference.\n\nThis allows for specific types within packages that are otherwise inferred as belonging to `jvm_artifact` targets to be unambiguously inferred as belonging to this first-party source.\n\nIf a given type is defined, at least one source file captured by this target must actually provide that symbol.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        }
      ],
      "provider": "pants.backend.experimental.kotlin",
      "summary": "Generate a `kotlin_source` target for each file in the `sources` field."
    },
    "kotlinc_plugin": {
      "alias": "kotlinc_plugin",
      "description": "A plugin for `kotlinc`.\n\nTo enable a `kotlinc` plugin, define a target with this target type, and set the `artifact` field to the address of a `jvm_artifact` target that provides the plugin. Set the `plugin_id` field to the ID of the plugin if that name cannot be inferred from the `name` of this target.\n\nThe standard `kotlinc` plugins are available via the following artifact coordinates and IDs: * All-open: `org.jetbrains.kotlin:kotlin-allopen:VERSION` (ID: `all-open`) * No-arg: `org.jetbrains.kotlin:kotlin-noarg:VERSION` (ID: `no-arg`) * SAM with receiver: `org.jetbrains.kotlin:kotlin-sam-with-receiver:VERSION` (ID: `sam-with-receiver`) * kapt (annotation processor): `org.jetbrains.kotlin:org.jetbrains.kotlin:kotlin-annotation-processing-embeddable:VERSION` (ID: `kapt3`) * Seralization: `org.jetbrains.kotlin:kotlin-serialization:VERSION` (ID: `serialization`)",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "artifact",
          "default": null,
          "description": "The address of a `jvm_artifact` that defines a plugin for `kotlinc`.",
          "provider": "",
          "required": true,
          "type_hint": "str"
        },
        {
          "alias": "plugin_id",
          "default": null,
          "description": "The ID for `kotlinc` to use when setting options for the plugin.\n\nIf not set, the plugin ID defaults to the target name.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "plugin_args",
          "default": null,
          "description": "Optional list of argument to pass to the plugin.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        }
      ],
      "provider": "pants.backend.experimental.kotlin",
      "summary": "A plugin for `kotlinc`."
    },
    "pants_requirements": {
      "alias": "pants_requirements",
      "description": "Generate `python_requirement` targets for Pants itself to use with Pants plugins.\n\nThis is useful when writing plugins so that you can build and test your plugin using Pants. The generated targets will have the correct version based on the `version` in your `pants.toml`, and they will work with dependency inference.\n\nBecause the Plugin API is not yet stable, the version is set automatically for you to improve stability. If you're currently using a dev release, the version will be set to that exact dev release. If you're using an alpha release, release candidate (rc), or stable release, the version will allow any non-dev-release release within the release series, e.g. `>=2.12.0rc0,<2.13`.\n\n(If this versioning scheme does not work for you, you can directly create `python_requirement` targets for `pantsbuild.pants` and `pantsbuild.pants.testutil`. We also invite you to share your ideas at https://github.com/pantsbuild/pants/issues/new/choose)",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "testutil",
          "default": "True",
          "description": "If true, include `pantsbuild.pants.testutil` to write tests for your plugin.",
          "provider": "",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "resolve",
          "default": null,
          "description": "The resolve from `[python].resolves` that this requirement is included in.\n\nIf not defined, will default to `[python].default_resolve`.\n\nWhen generating a lockfile for a particular resolve via the `generate-lockfiles` goal, it will include all requirements that are declared with that resolve. First-party targets like `python_source` and `pex_binary` then declare which resolve they use via their `resolve` field; so, for your first-party code to use a particular `python_requirement` target, that requirement must be included in the resolve used by that code.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        }
      ],
      "provider": "pants.backend.plugin_development",
      "summary": "Generate `python_requirement` targets for Pants itself to use with Pants plugins."
    },
    "pex_binaries": {
      "alias": "pex_binaries",
      "description": "Generate a `pex_binary` target for each entry_point in the `entry_points` field.\n\nThis is solely meant to reduce duplication when you have multiple scripts in the same directory; it's valid to use a distinct `pex_binary` target for each script/binary instead.\n\nThis target generator does not work well to generate `pex_binary` targets where the entry point is for a third-party dependency. Dependency inference will not work for those, so you will have to set lots of custom metadata for each binary; prefer an explicit `pex_binary` target in that case. This target generator works best when the entry point is a first-party file, like `app.py` or `app.py:main`.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "entry_points",
          "default": null,
          "description": "The entry points for each binary, i.e. what gets run when when executing `./my_app.pex.`\n\nUse a file name, relative to the BUILD file, like `app.py`. You can also set the function to run, like `app.py:func`. Pants will convert these file names into well-formed entry points, like `app.py:func` into `path.to.app:func.`\n\nIf you want the entry point to be for a third-party dependency or to use a console script, use the `pex_binary` target directly.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "overrides",
          "default": null,
          "description": "Override the field values for generated `pex_binary` targets.\n\nExpects a dictionary mapping values from the `entry_points` field to a dictionary for their overrides. You may either use a single string or a tuple of strings to override multiple targets.\n\nFor example:\n\n    ```\n    overrides={\n      \"foo.py\": {\"execution_mode\": \"venv\"]},\n      \"bar.py:main\": {\"restartable\": True]},\n      (\"foo.py\", \"bar.py:main\"): {\"tags\": [\"legacy\"]},\n    }\n    ```\n\nEvery key is validated to belong to this target's `entry_points` field.\n\nIf you'd like to override a field's value for every `pex_binary` target generated by this target, change the field directly on this target rather than using the `overrides` field.\n\nYou can specify the same entry_point in multiple keys, so long as you don't override the same field more than one time for the entry_point.",
          "provider": "",
          "required": false,
          "type_hint": "Dict[Union[str, Tuple[str, ...]], Dict[str, Any]] | None"
        },
        {
          "alias": "interpreter_constraints",
          "default": null,
          "description": "The Python interpreters this code is compatible with.\n\nEach element should be written in pip-style format, e.g. `CPython==2.7.*` or `CPython>=3.6,<4`. You can leave off `CPython` as a shorthand, e.g. `>=2.7` will be expanded to `CPython>=2.7`.\n\nSpecify more than one element to OR the constraints, e.g. `['PyPy==3.7.*', 'CPython==3.7.*']` means either PyPy 3.7 _or_ CPython 3.7.\n\nIf the field is not set, it will default to the option `[python].interpreter_constraints`.\n\nSee https://www.pantsbuild.org/v2.12/docs/python-interpreter-compatibility for how these interpreter constraints are merged with the constraints of dependencies.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "resolve",
          "default": null,
          "description": "The resolve from `[python].resolves` to use.\n\nIf not defined, will default to `[python].default_resolve`.\n\nAll dependencies must share the same value for their `resolve` field.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib', 'helloworld/main.py:lib', '3rdparty:reqs#django'].\n\nThis augments any dependencies inferred by Pants, such as by analyzing your imports. Use `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies` or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 peek` on this target to get the final result.\n\nSee https://www.pantsbuild.org/v2.12/docs/targets#target-addresses and https://www.pantsbuild.org/v2.12/docs/targets#target-generation for more about how addresses are formed, including for generated targets. You can also run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list ::` to find all addresses in your project, or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list dir:` to find all addresses defined in that directory.\n\nIf the target is in the same BUILD file, you can leave off the BUILD file path, e.g. `:tgt` instead of `helloworld/subdir:tgt`. For generated first-party addresses, use `./` for the file path, e.g. `./main.py:tgt`; for all other generated targets, use `:tgt#generated_name`.\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "platforms",
          "default": null,
          "description": "The abbreviated platforms the built PEX should be compatible with.\n\nThere must be built wheels available for all of the foreign platforms, rather than sdists.\n\nYou can give a list of multiple platforms to create a multiplatform PEX, meaning that the PEX will be executable in all of the supported environments.\n\nPlatforms should be in the format defined by Pex (https://pex.readthedocs.io/en/latest/buildingpex.html#platform), i.e. PLATFORM-IMPL-PYVER-ABI (e.g. \"linux_x86_64-cp-37-cp37m\", \"macosx_10.12_x86_64-cp-310-cp310\"):\n\n  - PLATFORM: the host platform, e.g. \"linux-x86_64\", \"macosx-10.12-x86_64\".\n  - IMPL: the Python implementation abbreviation, e.g. \"cp\" or \"pp\".\n  - PYVER: a two or more digit string representing the python major/minor version (e.g., \"37\" or \"310\") or else a component dotted version string (e.g., \"3.7\" or \"3.10.1\").\n  - ABI: the ABI tag, e.g. \"cp37m\", \"cp310\", \"abi3\", \"none\".\n\nNote that using an abbreviated platform means that certain resolves will fail when they encounter environment markers that cannot be deduced from the abbreviated platform string. A common example of this is 'python_full_version' which requires knowing the patch level version of the foreign Python interpreter. To remedy this you should use a 3-component dotted version for PYVER. If your resolves fail due to more esoteric undefined environment markers, you should switch to specifying `complete_platforms` instead.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "complete_platforms",
          "default": null,
          "description": "The platforms the built PEX should be compatible with.\n\nThere must be built wheels available for all of the foreign platforms, rather than sdists.\n\nYou can give a list of multiple complete platforms to create a multiplatform PEX, meaning that the PEX will be executable in all of the supported environments.\n\nComplete platforms should be addresses of `file` targets that point to files that contain complete platform JSON as described by Pex (https://pex.readthedocs.io/en/latest/buildingpex.html#complete-platform).",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "resolve_local_platforms",
          "default": null,
          "description": "For each of the `platforms` specified, attempt to find a local interpreter that matches.\n\nIf a matching interpreter is found, use the interpreter to resolve distributions and build any that are only available in source distribution form. If no matching interpreter is found (or if this option is `False`), resolve for the platform by accepting only pre-built binary distributions (wheels).",
          "provider": "",
          "required": false,
          "type_hint": "bool | None"
        },
        {
          "alias": "inherit_path",
          "default": null,
          "description": "Whether to inherit the `sys.path` (aka PYTHONPATH) of the environment that the binary runs in.\n\nUse `false` to not inherit `sys.path`; use `fallback` to inherit `sys.path` after packaged dependencies; and use `prefer` to inherit `sys.path` before packaged dependencies.",
          "provider": "",
          "required": false,
          "type_hint": "'fallback' | 'false' | 'prefer' | None"
        },
        {
          "alias": "strip_pex_env",
          "default": "True",
          "description": "Whether or not to strip the PEX runtime environment of `PEX*` environment variables.\n\nMost applications have no need for the `PEX*` environment variables that are used to control PEX startup; so these variables are scrubbed from the environment by Pex before transferring control to the application by default. This prevents any subprocesses that happen to execute other PEX files from inheriting these control knob values since most would be undesired; e.g.: PEX_MODULE or PEX_PATH.",
          "provider": "",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "ignore_errors",
          "default": "False",
          "description": "Should PEX ignore when it cannot resolve dependencies?",
          "provider": "",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "shebang",
          "default": null,
          "description": "Set the generated PEX to use this shebang, rather than the default of PEX choosing a shebang based on the interpreter constraints.\n\nThis influences the behavior of running `./result.pex`. You can ignore the shebang by instead running `/path/to/python_interpreter ./result.pex`.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "emit_warnings",
          "default": null,
          "description": "Whether or not to emit PEX warnings at runtime.\n\nThe default is determined by the option `emit_warnings` in the `[pex-binary-defaults]` scope.",
          "provider": "",
          "required": false,
          "type_hint": "bool | None"
        },
        {
          "alias": "layout",
          "default": "'zipapp'",
          "description": "The layout used for the PEX binary.\n\nBy default, a PEX is created as a single file zipapp, but either a packed or loose directory tree based layout can be chosen instead.\n\nA packed layout PEX is an executable directory structure designed to have cache-friendly characteristics for syncing incremental updates to PEXed applications over a network. At the top level of the packed directory tree there is an executable `__main__.py` script. The directory can also be executed by passing its path to a Python executable; e.g: `python packed-pex-dir/`. The Pex bootstrap code and all dependency code are packed into individual zip files for efficient caching and syncing.\n\nA loose layout PEX is similar to a packed PEX, except that neither the Pex bootstrap code nor the dependency code are packed into zip files, but are instead present as collections of loose files in the directory tree providing different caching and syncing tradeoffs.\n\nBoth zipapp and packed layouts install themselves in the `$PEX_ROOT` as loose apps by default before executing, but these layouts compose with `execution_mode='zipapp'` as well.",
          "provider": "",
          "required": false,
          "type_hint": "'loose' | 'packed' | 'zipapp' | None"
        },
        {
          "alias": "execution_mode",
          "default": "'zipapp'",
          "description": "The mode the generated PEX file will run in.\n\nThe traditional PEX file runs in a modified 'zipapp' mode (See: https://www.python.org/dev/peps/pep-0441/) where zipped internal code and dependencies are first unpacked to disk. This mode achieves the fastest cold start times and may, for example be the best choice for cloud lambda functions.\n\nThe fastest execution mode in the steady state is 'venv', which generates a virtual environment from the PEX file on first run, but then achieves near native virtual environment start times. This mode also benefits from a traditional virtual environment `sys.path`, giving maximum compatibility with stdlib and third party APIs.",
          "provider": "",
          "required": false,
          "type_hint": "'venv' | 'zipapp' | None"
        },
        {
          "alias": "include_requirements",
          "default": "True",
          "description": "Whether to include the third party requirements the binary depends on in the packaged PEX file.",
          "provider": "",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "include_tools",
          "default": "False",
          "description": "Whether to include Pex tools in the PEX bootstrap code.\n\nWith tools included, the generated PEX file can be executed with `PEX_TOOLS=1 <pex file> --help` to gain access to all the available tools.",
          "provider": "",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "restartable",
          "default": "False",
          "description": "If true, runs of this target with the `run` goal may be interrupted and restarted when its input files change.",
          "provider": "",
          "required": false,
          "type_hint": "bool"
        }
      ],
      "provider": "pants.backend.python",
      "summary": "Generate a `pex_binary` target for each entry_point in the `entry_points` field."
    },
    "pex_binary": {
      "alias": "pex_binary",
      "description": "A Python target that can be converted into an executable PEX file.\n\nPEX files are self-contained executable files that contain a complete Python environment capable of running the target. For more information, see https://www.pantsbuild.org/v2.12/docs/pex-files.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "interpreter_constraints",
          "default": null,
          "description": "The Python interpreters this code is compatible with.\n\nEach element should be written in pip-style format, e.g. `CPython==2.7.*` or `CPython>=3.6,<4`. You can leave off `CPython` as a shorthand, e.g. `>=2.7` will be expanded to `CPython>=2.7`.\n\nSpecify more than one element to OR the constraints, e.g. `['PyPy==3.7.*', 'CPython==3.7.*']` means either PyPy 3.7 _or_ CPython 3.7.\n\nIf the field is not set, it will default to the option `[python].interpreter_constraints`.\n\nSee https://www.pantsbuild.org/v2.12/docs/python-interpreter-compatibility for how these interpreter constraints are merged with the constraints of dependencies.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "resolve",
          "default": null,
          "description": "The resolve from `[python].resolves` to use.\n\nIf not defined, will default to `[python].default_resolve`.\n\nAll dependencies must share the same value for their `resolve` field.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib', 'helloworld/main.py:lib', '3rdparty:reqs#django'].\n\nThis augments any dependencies inferred by Pants, such as by analyzing your imports. Use `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies` or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 peek` on this target to get the final result.\n\nSee https://www.pantsbuild.org/v2.12/docs/targets#target-addresses and https://www.pantsbuild.org/v2.12/docs/targets#target-generation for more about how addresses are formed, including for generated targets. You can also run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list ::` to find all addresses in your project, or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list dir:` to find all addresses defined in that directory.\n\nIf the target is in the same BUILD file, you can leave off the BUILD file path, e.g. `:tgt` instead of `helloworld/subdir:tgt`. For generated first-party addresses, use `./` for the file path, e.g. `./main.py:tgt`; for all other generated targets, use `:tgt#generated_name`.\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "platforms",
          "default": null,
          "description": "The abbreviated platforms the built PEX should be compatible with.\n\nThere must be built wheels available for all of the foreign platforms, rather than sdists.\n\nYou can give a list of multiple platforms to create a multiplatform PEX, meaning that the PEX will be executable in all of the supported environments.\n\nPlatforms should be in the format defined by Pex (https://pex.readthedocs.io/en/latest/buildingpex.html#platform), i.e. PLATFORM-IMPL-PYVER-ABI (e.g. \"linux_x86_64-cp-37-cp37m\", \"macosx_10.12_x86_64-cp-310-cp310\"):\n\n  - PLATFORM: the host platform, e.g. \"linux-x86_64\", \"macosx-10.12-x86_64\".\n  - IMPL: the Python implementation abbreviation, e.g. \"cp\" or \"pp\".\n  - PYVER: a two or more digit string representing the python major/minor version (e.g., \"37\" or \"310\") or else a component dotted version string (e.g., \"3.7\" or \"3.10.1\").\n  - ABI: the ABI tag, e.g. \"cp37m\", \"cp310\", \"abi3\", \"none\".\n\nNote that using an abbreviated platform means that certain resolves will fail when they encounter environment markers that cannot be deduced from the abbreviated platform string. A common example of this is 'python_full_version' which requires knowing the patch level version of the foreign Python interpreter. To remedy this you should use a 3-component dotted version for PYVER. If your resolves fail due to more esoteric undefined environment markers, you should switch to specifying `complete_platforms` instead.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "complete_platforms",
          "default": null,
          "description": "The platforms the built PEX should be compatible with.\n\nThere must be built wheels available for all of the foreign platforms, rather than sdists.\n\nYou can give a list of multiple complete platforms to create a multiplatform PEX, meaning that the PEX will be executable in all of the supported environments.\n\nComplete platforms should be addresses of `file` targets that point to files that contain complete platform JSON as described by Pex (https://pex.readthedocs.io/en/latest/buildingpex.html#complete-platform).",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "resolve_local_platforms",
          "default": null,
          "description": "For each of the `platforms` specified, attempt to find a local interpreter that matches.\n\nIf a matching interpreter is found, use the interpreter to resolve distributions and build any that are only available in source distribution form. If no matching interpreter is found (or if this option is `False`), resolve for the platform by accepting only pre-built binary distributions (wheels).",
          "provider": "",
          "required": false,
          "type_hint": "bool | None"
        },
        {
          "alias": "inherit_path",
          "default": null,
          "description": "Whether to inherit the `sys.path` (aka PYTHONPATH) of the environment that the binary runs in.\n\nUse `false` to not inherit `sys.path`; use `fallback` to inherit `sys.path` after packaged dependencies; and use `prefer` to inherit `sys.path` before packaged dependencies.",
          "provider": "",
          "required": false,
          "type_hint": "'fallback' | 'false' | 'prefer' | None"
        },
        {
          "alias": "strip_pex_env",
          "default": "True",
          "description": "Whether or not to strip the PEX runtime environment of `PEX*` environment variables.\n\nMost applications have no need for the `PEX*` environment variables that are used to control PEX startup; so these variables are scrubbed from the environment by Pex before transferring control to the application by default. This prevents any subprocesses that happen to execute other PEX files from inheriting these control knob values since most would be undesired; e.g.: PEX_MODULE or PEX_PATH.",
          "provider": "",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "ignore_errors",
          "default": "False",
          "description": "Should PEX ignore when it cannot resolve dependencies?",
          "provider": "",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "shebang",
          "default": null,
          "description": "Set the generated PEX to use this shebang, rather than the default of PEX choosing a shebang based on the interpreter constraints.\n\nThis influences the behavior of running `./result.pex`. You can ignore the shebang by instead running `/path/to/python_interpreter ./result.pex`.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "emit_warnings",
          "default": null,
          "description": "Whether or not to emit PEX warnings at runtime.\n\nThe default is determined by the option `emit_warnings` in the `[pex-binary-defaults]` scope.",
          "provider": "",
          "required": false,
          "type_hint": "bool | None"
        },
        {
          "alias": "layout",
          "default": "'zipapp'",
          "description": "The layout used for the PEX binary.\n\nBy default, a PEX is created as a single file zipapp, but either a packed or loose directory tree based layout can be chosen instead.\n\nA packed layout PEX is an executable directory structure designed to have cache-friendly characteristics for syncing incremental updates to PEXed applications over a network. At the top level of the packed directory tree there is an executable `__main__.py` script. The directory can also be executed by passing its path to a Python executable; e.g: `python packed-pex-dir/`. The Pex bootstrap code and all dependency code are packed into individual zip files for efficient caching and syncing.\n\nA loose layout PEX is similar to a packed PEX, except that neither the Pex bootstrap code nor the dependency code are packed into zip files, but are instead present as collections of loose files in the directory tree providing different caching and syncing tradeoffs.\n\nBoth zipapp and packed layouts install themselves in the `$PEX_ROOT` as loose apps by default before executing, but these layouts compose with `execution_mode='zipapp'` as well.",
          "provider": "",
          "required": false,
          "type_hint": "'loose' | 'packed' | 'zipapp' | None"
        },
        {
          "alias": "execution_mode",
          "default": "'zipapp'",
          "description": "The mode the generated PEX file will run in.\n\nThe traditional PEX file runs in a modified 'zipapp' mode (See: https://www.python.org/dev/peps/pep-0441/) where zipped internal code and dependencies are first unpacked to disk. This mode achieves the fastest cold start times and may, for example be the best choice for cloud lambda functions.\n\nThe fastest execution mode in the steady state is 'venv', which generates a virtual environment from the PEX file on first run, but then achieves near native virtual environment start times. This mode also benefits from a traditional virtual environment `sys.path`, giving maximum compatibility with stdlib and third party APIs.",
          "provider": "",
          "required": false,
          "type_hint": "'venv' | 'zipapp' | None"
        },
        {
          "alias": "include_requirements",
          "default": "True",
          "description": "Whether to include the third party requirements the binary depends on in the packaged PEX file.",
          "provider": "",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "include_tools",
          "default": "False",
          "description": "Whether to include Pex tools in the PEX bootstrap code.\n\nWith tools included, the generated PEX file can be executed with `PEX_TOOLS=1 <pex file> --help` to gain access to all the available tools.",
          "provider": "",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "restartable",
          "default": "False",
          "description": "If true, runs of this target with the `run` goal may be interrupted and restarted when its input files change.",
          "provider": "",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "entry_point",
          "default": null,
          "description": "Set the entry point, i.e. what gets run when executing `./my_app.pex`, to a module.\n\nYou can specify a full module like 'path.to.module' and 'path.to.module:func', or use a shorthand to specify a file name, using the same syntax as the `sources` field:\n\n  1) 'app.py', Pants will convert into the module `path.to.app`;\n  2) 'app.py:func', Pants will convert into `path.to.app:func`.\n\nYou must use the file name shorthand for file arguments to work with this target.\n\nYou may either set this field or the `script` field, but not both. Leave off both fields to have no entry point.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "script",
          "default": null,
          "description": "Set the entry point, i.e. what gets run when executing `./my_app.pex`, to a script or console_script as defined by any of the distributions in the PEX.\n\nYou may either set this field or the `entry_point` field, but not both. Leave off both fields to have no entry point.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "output_path",
          "default": null,
          "description": "Where the built asset should be located.\n\nIf undefined, this will use the path to the BUILD file, followed by the target name. For example, `src/python/project:app` would be `src.python.project/app.ext`.\n\nWhen running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 package`, this path will be prefixed by `--distdir` (e.g. `dist/`).\n\nWarning: setting this value risks naming collisions with other package targets you may have.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        }
      ],
      "provider": "pants.backend.python",
      "summary": "A Python target that can be converted into an executable PEX file."
    },
    "pipenv_requirements": {
      "alias": "pipenv_requirements",
      "description": "Generate a `python_requirement` for each entry in `Pipenv.lock`.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "module_mapping",
          "default": "FrozenDict({})",
          "description": "A mapping of requirement names to a list of the modules they provide.\n\nFor example, `{\"ansicolors\": [\"colors\"]}`.\n\nAny unspecified requirements will use a default. See the `modules` field from the `python_requirement` target for more information.",
          "provider": "",
          "required": false,
          "type_hint": "Dict[str, Iterable[str]]"
        },
        {
          "alias": "type_stubs_module_mapping",
          "default": "FrozenDict({})",
          "description": "A mapping of type-stub requirement names to a list of the modules they provide.\n\nFor example, `{\"types-requests\": [\"requests\"]}`.\n\nIf the requirement is not specified _and_ its name looks like a type stub, Pants will use a default. See the `type_stub_modules` field from the `python_requirement` target for more information.",
          "provider": "",
          "required": false,
          "type_hint": "Dict[str, Iterable[str]]"
        },
        {
          "alias": "source",
          "default": "'Pipfile.lock'",
          "description": "A single file that belongs to this target.\n\nPath is relative to the BUILD file's directory, e.g. `source='example.ext'`.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "overrides",
          "default": null,
          "description": "Override the field values for generated `python_requirement` targets.\n\nExpects a dictionary of requirements to a dictionary for the overrides. You may either use a string for a single requirement, or a string tuple for multiple requirements. Each override is a dictionary of field names to the overridden value.\n\nFor example:\n\n    ```\n    overrides={\n        \"django\": {\"dependencies\": [\"#setuptools\"]]},\n        \"ansicolors\": {\"description\": \"pretty colors\"]},\n        (\"ansicolors, \"django\"): {\"tags\": [\"overridden\"]},\n    }\n    ```\n\nEvery overridden requirement is validated to be generated by this target.\n\nYou can specify the same requirement in multiple keys, so long as you don't override the same field more than one time for the requirement.",
          "provider": "",
          "required": false,
          "type_hint": "Dict[Union[str, Tuple[str, ...]], Dict[str, Any]] | None"
        },
        {
          "alias": "resolve",
          "default": null,
          "description": "The resolve from `[python].resolves` that this requirement is included in.\n\nIf not defined, will default to `[python].default_resolve`.\n\nWhen generating a lockfile for a particular resolve via the `generate-lockfiles` goal, it will include all requirements that are declared with that resolve. First-party targets like `python_source` and `pex_binary` then declare which resolve they use via their `resolve` field; so, for your first-party code to use a particular `python_requirement` target, that requirement must be included in the resolve used by that code.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        }
      ],
      "provider": "pants.backend.python",
      "summary": "Generate a `python_requirement` for each entry in `Pipenv.lock`."
    },
    "poetry_requirements": {
      "alias": "poetry_requirements",
      "description": "Generate a `python_requirement` for each entry in a Poetry pyproject.toml.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "module_mapping",
          "default": "FrozenDict({})",
          "description": "A mapping of requirement names to a list of the modules they provide.\n\nFor example, `{\"ansicolors\": [\"colors\"]}`.\n\nAny unspecified requirements will use a default. See the `modules` field from the `python_requirement` target for more information.",
          "provider": "",
          "required": false,
          "type_hint": "Dict[str, Iterable[str]]"
        },
        {
          "alias": "type_stubs_module_mapping",
          "default": "FrozenDict({})",
          "description": "A mapping of type-stub requirement names to a list of the modules they provide.\n\nFor example, `{\"types-requests\": [\"requests\"]}`.\n\nIf the requirement is not specified _and_ its name looks like a type stub, Pants will use a default. See the `type_stub_modules` field from the `python_requirement` target for more information.",
          "provider": "",
          "required": false,
          "type_hint": "Dict[str, Iterable[str]]"
        },
        {
          "alias": "source",
          "default": "'pyproject.toml'",
          "description": "A single file that belongs to this target.\n\nPath is relative to the BUILD file's directory, e.g. `source='example.ext'`.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "overrides",
          "default": null,
          "description": "Override the field values for generated `python_requirement` targets.\n\nExpects a dictionary of requirements to a dictionary for the overrides. You may either use a string for a single requirement, or a string tuple for multiple requirements. Each override is a dictionary of field names to the overridden value.\n\nFor example:\n\n    ```\n    overrides={\n        \"django\": {\"dependencies\": [\"#setuptools\"]]},\n        \"ansicolors\": {\"description\": \"pretty colors\"]},\n        (\"ansicolors, \"django\"): {\"tags\": [\"overridden\"]},\n    }\n    ```\n\nEvery overridden requirement is validated to be generated by this target.\n\nYou can specify the same requirement in multiple keys, so long as you don't override the same field more than one time for the requirement.",
          "provider": "",
          "required": false,
          "type_hint": "Dict[Union[str, Tuple[str, ...]], Dict[str, Any]] | None"
        },
        {
          "alias": "resolve",
          "default": null,
          "description": "The resolve from `[python].resolves` that this requirement is included in.\n\nIf not defined, will default to `[python].default_resolve`.\n\nWhen generating a lockfile for a particular resolve via the `generate-lockfiles` goal, it will include all requirements that are declared with that resolve. First-party targets like `python_source` and `pex_binary` then declare which resolve they use via their `resolve` field; so, for your first-party code to use a particular `python_requirement` target, that requirement must be included in the resolve used by that code.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        }
      ],
      "provider": "pants.backend.python",
      "summary": "Generate a `python_requirement` for each entry in a Poetry pyproject.toml."
    },
    "protobuf_source": {
      "alias": "protobuf_source",
      "description": "A single Protobuf file used to generate various languages.\n\nSee language-specific docs:     Python: https://www.pantsbuild.org/v2.12/docs/protobuf-python\n    Go: https://www.pantsbuild.org/v2.12/docs/protobuf-go",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib', 'helloworld/main.py:lib', '3rdparty:reqs#django'].\n\nThis augments any dependencies inferred by Pants, such as by analyzing your imports. Use `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies` or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 peek` on this target to get the final result.\n\nSee https://www.pantsbuild.org/v2.12/docs/targets#target-addresses and https://www.pantsbuild.org/v2.12/docs/targets#target-generation for more about how addresses are formed, including for generated targets. You can also run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list ::` to find all addresses in your project, or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list dir:` to find all addresses defined in that directory.\n\nIf the target is in the same BUILD file, you can leave off the BUILD file path, e.g. `:tgt` instead of `helloworld/subdir:tgt`. For generated first-party addresses, use `./` for the file path, e.g. `./main.py:tgt`; for all other generated targets, use `:tgt#generated_name`.\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "source",
          "default": null,
          "description": "A single file that belongs to this target.\n\nPath is relative to the BUILD file's directory, e.g. `source='example.ext'`.",
          "provider": "",
          "required": true,
          "type_hint": "str"
        },
        {
          "alias": "grpc",
          "default": "False",
          "description": "Whether to generate gRPC code or not.",
          "provider": "",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_buf_format",
          "default": "False",
          "description": "If true, don't run `buf format` on this target's code.",
          "provider": "pants.backend.codegen.protobuf.lint.buf",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_buf_lint",
          "default": "False",
          "description": "If true, don't run `buf lint` on this target's code.",
          "provider": "pants.backend.codegen.protobuf.lint.buf",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "python_interpreter_constraints",
          "default": null,
          "description": "The Python interpreters this code is compatible with.\n\nEach element should be written in pip-style format, e.g. `CPython==2.7.*` or `CPython>=3.6,<4`. You can leave off `CPython` as a shorthand, e.g. `>=2.7` will be expanded to `CPython>=2.7`.\n\nSpecify more than one element to OR the constraints, e.g. `['PyPy==3.7.*', 'CPython==3.7.*']` means either PyPy 3.7 _or_ CPython 3.7.\n\nIf the field is not set, it will default to the option `[python].interpreter_constraints`.\n\nSee https://www.pantsbuild.org/v2.12/docs/python-interpreter-compatibility for how these interpreter constraints are merged with the constraints of dependencies.",
          "provider": "pants.backend.codegen.protobuf.python",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "python_resolve",
          "default": null,
          "description": "The resolve from `[python].resolves` to use.\n\nIf not defined, will default to `[python].default_resolve`.\n\nAll dependencies must share the same value for their `resolve` field.",
          "provider": "pants.backend.codegen.protobuf.python",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "python_source_root",
          "default": null,
          "description": "The source root to generate Python sources under.\n\nIf unspecified, the source root the `protobuf_sources` is under will be used.",
          "provider": "pants.backend.codegen.protobuf.python",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "jvm_jdk",
          "default": null,
          "description": "The major version of the JDK that this target should be built with. If not defined, will default to `[jvm].default_source_jdk`.",
          "provider": "pants.backend.experimental.codegen.protobuf.java",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "jvm_resolve",
          "default": null,
          "description": "The resolve from `[jvm].resolves` to use when compiling this target.\n\nIf not defined, will default to `[jvm].default_resolve`.",
          "provider": "pants.backend.experimental.codegen.protobuf.java",
          "required": false,
          "type_hint": "str | None"
        }
      ],
      "provider": "pants.backend.codegen.protobuf.python",
      "summary": "A single Protobuf file used to generate various languages."
    },
    "protobuf_sources": {
      "alias": "protobuf_sources",
      "description": "Generate a `protobuf_source` target for each file in the `sources` field.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "sources",
          "default": "('*.proto',)",
          "description": "A list of files and globs that belong to this target.\n\nPaths are relative to the BUILD file's directory. You can ignore files/globs by prefixing them with `!`.\n\nExample: `sources=['example.ext', 'test_*.ext', '!test_ignore.ext']`.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "overrides",
          "default": null,
          "description": "Override the field values for generated `protobuf_source` targets.\n\nExpects a dictionary of relative file paths and globs to a dictionary for the overrides. You may either use a string for a single path / glob, or a string tuple for multiple paths / globs. Each override is a dictionary of field names to the overridden value.\n\nFor example:\n\n```\noverrides={\n  \"foo.proto\": {\"grpc\": True},\n  \"bar.proto\": {\"description\": \"our user model\"},\n  (\"foo.proto\", \"bar.proto\"): {\"tags\": [\"overridden\"]},\n}\n```\n\nFile paths and globs are relative to the BUILD file's directory. Every overridden file is validated to belong to this target's `sources` field.\n\nIf you'd like to override a field's value for every `protobuf_source` target generated by this target, change the field directly on this target rather than using the `overrides` field.\n\nYou can specify the same file name in multiple keys, so long as you don't override the same field more than one time for the file.",
          "provider": "",
          "required": false,
          "type_hint": "Dict[Union[str, Tuple[str, ...]], Dict[str, Any]] | None"
        },
        {
          "alias": "skip_buf_format",
          "default": "False",
          "description": "If true, don't run `buf format` on this target's code.",
          "provider": "pants.backend.codegen.protobuf.lint.buf",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_buf_lint",
          "default": "False",
          "description": "If true, don't run `buf lint` on this target's code.",
          "provider": "pants.backend.codegen.protobuf.lint.buf",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "python_interpreter_constraints",
          "default": null,
          "description": "The Python interpreters this code is compatible with.\n\nEach element should be written in pip-style format, e.g. `CPython==2.7.*` or `CPython>=3.6,<4`. You can leave off `CPython` as a shorthand, e.g. `>=2.7` will be expanded to `CPython>=2.7`.\n\nSpecify more than one element to OR the constraints, e.g. `['PyPy==3.7.*', 'CPython==3.7.*']` means either PyPy 3.7 _or_ CPython 3.7.\n\nIf the field is not set, it will default to the option `[python].interpreter_constraints`.\n\nSee https://www.pantsbuild.org/v2.12/docs/python-interpreter-compatibility for how these interpreter constraints are merged with the constraints of dependencies.",
          "provider": "pants.backend.codegen.protobuf.python",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "python_resolve",
          "default": null,
          "description": "The resolve from `[python].resolves` to use.\n\nIf not defined, will default to `[python].default_resolve`.\n\nAll dependencies must share the same value for their `resolve` field.",
          "provider": "pants.backend.codegen.protobuf.python",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "python_source_root",
          "default": null,
          "description": "The source root to generate Python sources under.\n\nIf unspecified, the source root the `protobuf_sources` is under will be used.",
          "provider": "pants.backend.codegen.protobuf.python",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "jvm_jdk",
          "default": null,
          "description": "The major version of the JDK that this target should be built with. If not defined, will default to `[jvm].default_source_jdk`.",
          "provider": "pants.backend.experimental.codegen.protobuf.java",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "jvm_resolve",
          "default": null,
          "description": "The resolve from `[jvm].resolves` to use when compiling this target.\n\nIf not defined, will default to `[jvm].default_resolve`.",
          "provider": "pants.backend.experimental.codegen.protobuf.java",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "grpc",
          "default": "False",
          "description": "Whether to generate gRPC code or not.",
          "provider": "",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib', 'helloworld/main.py:lib', '3rdparty:reqs#django'].\n\nThis augments any dependencies inferred by Pants, such as by analyzing your imports. Use `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies` or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 peek` on this target to get the final result.\n\nSee https://www.pantsbuild.org/v2.12/docs/targets#target-addresses and https://www.pantsbuild.org/v2.12/docs/targets#target-generation for more about how addresses are formed, including for generated targets. You can also run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list ::` to find all addresses in your project, or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list dir:` to find all addresses defined in that directory.\n\nIf the target is in the same BUILD file, you can leave off the BUILD file path, e.g. `:tgt` instead of `helloworld/subdir:tgt`. For generated first-party addresses, use `./` for the file path, e.g. `./main.py:tgt`; for all other generated targets, use `:tgt#generated_name`.\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        }
      ],
      "provider": "pants.backend.codegen.protobuf.python",
      "summary": "Generate a `protobuf_source` target for each file in the `sources` field."
    },
    "pyoxidizer_binary": {
      "alias": "pyoxidizer_binary",
      "description": "A single-file Python executable with a Python interpreter embedded, built via PyOxidizer.\n\nTo use this target, first create a `python_distribution` target with the code you want included in your binary, per https://www.pantsbuild.org/v2.12/docs/python-distributions. Then add this `python_distribution` target to the `dependencies` field. See the `help` for `dependencies` for more information.\n\nYou may optionally want to set the `entry_point` field. For advanced use cases, you can use a custom PyOxidizer config file, rather than what Pants generates, by setting the `template` field. You may also want to set `[pyoxidizer].args` to a value like `['--release']`.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "output_path",
          "default": null,
          "description": "Where the built directory tree should be located.\n\nIf undefined, this will use the path to the BUILD file, followed by the target name. For example, `src/python/project:bin` would be `src.python.project/bin/`.\n\nRegardless of whether you use the default or set this field, the path will end with PyOxidizer's file format of `<platform>/{debug,release}/install/<binary_name>`, where `platform` is a Rust platform triplet like `aarch-64-apple-darwin` and `binary_name` is the `name` of the `pyoxidizer_target`. So, using the default for this field, the target `src/python/project:bin` might have a final path like `src.python.project/bin/aarch-64-apple-darwin/release/bin`.\n\nWhen running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 package`, this path will be prefixed by `--distdir` (e.g. `dist/`).\n\nWarning: setting this value risks naming collisions with other package targets you may have.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "template",
          "default": null,
          "description": "If set, will use your custom configuration rather than using Pants's default template.\n\nThe path is relative to the BUILD file's directory, and it must end in `.blzt`.\n\nAll parameters must be prefixed by $ or surrounded with ${ }.\n\nAvailable template parameters:\n\n  * RUN_MODULE - The re-formatted entry_point passed to this target (or None).\n  * NAME - This target's name.\n  * WHEELS - All python distributions passed to this target (or []).\n  * UNCLASSIFIED_RESOURCE_INSTALLATION - This will populate a snippet of code to correctly inject the targets filesystem_resources.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "The addresses of `python_distribution` target(s) to include in the binary, e.g. `['src/python/project:dist']`.\n\nThe distribution(s) must generate at least one wheel file. For example, if using `generate_setup=True`, then make sure `wheel=True`. See https://www.pantsbuild.org/v2.12/docs/python-distributions.\n\nUsually, you only need to specify a single `python_distribution`. However, if that distribution depends on another first-party distribution in your repository, you must specify that dependency too, otherwise PyOxidizer would try installing the distribution from PyPI. Note that a `python_distribution` target might depend on another `python_distribution` target even if it is not included in its own `dependencies` field, as explained at https://www.pantsbuild.org/v2.12/docs/python-distributions; if code from one distribution imports code from another distribution, then there is a dependency and you must include both `python_distribution` targets in the `dependencies` field of this `pyoxidizer_binary` target.\n\nTarget types other than `python_distribution` will be ignored.",
          "provider": "",
          "required": true,
          "type_hint": "Iterable[str]"
        },
        {
          "alias": "entry_point",
          "default": null,
          "description": "Set the entry point, i.e. what gets run when executing `./my_app`, to a module. This represents the content of PyOxidizer's `python_config.run_module` and leaving this field empty will create a REPL binary.\n\nIt is specified with the full module declared: 'path.to.module'.\n\nThis field is passed into the PyOxidizer config as-is, and does not undergo validation checking.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "filesystem_resources",
          "default": null,
          "description": "Adds support for listing dependencies that MUST be installed to the filesystem (e.g. Numpy). See https://pyoxidizer.readthedocs.io/en/stable/pyoxidizer_packaging_additional_files.html#installing-unclassified-files-on-the-filesystem",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        }
      ],
      "provider": "pants.backend.experimental.python.packaging.pyoxidizer",
      "summary": "A single-file Python executable with a Python interpreter embedded, built via PyOxidizer."
    },
    "python_awslambda": {
      "alias": "python_awslambda",
      "description": "A self-contained Python function suitable for uploading to AWS Lambda.\n\nSee https://www.pantsbuild.org/v2.12/docs/awslambda-python.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "output_path",
          "default": null,
          "description": "Where the built asset should be located.\n\nIf undefined, this will use the path to the BUILD file, followed by the target name. For example, `src/python/project:app` would be `src.python.project/app.ext`.\n\nWhen running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 package`, this path will be prefixed by `--distdir` (e.g. `dist/`).\n\nWarning: setting this value risks naming collisions with other package targets you may have.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib', 'helloworld/main.py:lib', '3rdparty:reqs#django'].\n\nThis augments any dependencies inferred by Pants, such as by analyzing your imports. Use `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies` or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 peek` on this target to get the final result.\n\nSee https://www.pantsbuild.org/v2.12/docs/targets#target-addresses and https://www.pantsbuild.org/v2.12/docs/targets#target-generation for more about how addresses are formed, including for generated targets. You can also run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list ::` to find all addresses in your project, or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list dir:` to find all addresses defined in that directory.\n\nIf the target is in the same BUILD file, you can leave off the BUILD file path, e.g. `:tgt` instead of `helloworld/subdir:tgt`. For generated first-party addresses, use `./` for the file path, e.g. `./main.py:tgt`; for all other generated targets, use `:tgt#generated_name`.\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "handler",
          "default": null,
          "description": "Entry point to the AWS Lambda handler.\n\nYou can specify a full module like 'path.to.module:handler_func' or use a shorthand to specify a file name, using the same syntax as the `sources` field, e.g. 'lambda.py:handler_func'.\n\nYou must use the file name shorthand for file arguments to work with this target.",
          "provider": "",
          "required": true,
          "type_hint": "str"
        },
        {
          "alias": "include_requirements",
          "default": "True",
          "description": "Whether to resolve requirements and include them in the Pex. This is most useful with Lambda Layers to make code uploads smaller when deps are in layers. https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html",
          "provider": "",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "runtime",
          "default": null,
          "description": "The identifier of the AWS Lambda runtime to target (pythonX.Y). See https://docs.aws.amazon.com/lambda/latest/dg/lambda-python.html.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "complete_platforms",
          "default": null,
          "description": "The platforms the built PEX should be compatible with.\n\nThere must be built wheels available for all of the foreign platforms, rather than sdists.\n\nYou can give a list of multiple complete platforms to create a multiplatform PEX, meaning that the PEX will be executable in all of the supported environments.\n\nComplete platforms should be addresses of `file` targets that point to files that contain complete platform JSON as described by Pex (https://pex.readthedocs.io/en/latest/buildingpex.html#complete-platform).",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "resolve",
          "default": null,
          "description": "The resolve from `[python].resolves` to use.\n\nIf not defined, will default to `[python].default_resolve`.\n\nAll dependencies must share the same value for their `resolve` field.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        }
      ],
      "provider": "pants.backend.awslambda.python",
      "summary": "A self-contained Python function suitable for uploading to AWS Lambda."
    },
    "python_distribution": {
      "alias": "python_distribution",
      "description": "A publishable Python setuptools distribution (e.g. an sdist or wheel).\n\nSee https://www.pantsbuild.org/v2.12/docs/python-distributions.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib', 'helloworld/main.py:lib', '3rdparty:reqs#django'].\n\nThis augments any dependencies inferred by Pants, such as by analyzing your imports. Use `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies` or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 peek` on this target to get the final result.\n\nSee https://www.pantsbuild.org/v2.12/docs/targets#target-addresses and https://www.pantsbuild.org/v2.12/docs/targets#target-generation for more about how addresses are formed, including for generated targets. You can also run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list ::` to find all addresses in your project, or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list dir:` to find all addresses defined in that directory.\n\nIf the target is in the same BUILD file, you can leave off the BUILD file path, e.g. `:tgt` instead of `helloworld/subdir:tgt`. For generated first-party addresses, use `./` for the file path, e.g. `./main.py:tgt`; for all other generated targets, use `:tgt#generated_name`.\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "entry_points",
          "default": null,
          "description": "Any entry points, such as `console_scripts` and `gui_scripts`.\n\nSpecify as a nested dictionary, with a dictionary for each type of entry point, e.g. `console_scripts` vs. `gui_scripts`. Each dictionary maps the entry point name to either a setuptools entry point (\"path.to.module:func\") or a Pants target address to a pex_binary target.\n\n    Example:\n\n        entry_points={\n          \"console_scripts\": {\n            \"my-script\": \"project.app:main\",\n            \"another-script\": \"project/subdir:pex_binary_tgt\"\n          }\n        }\n\nNote that Pants will assume that any value that either starts with `:` or has `/` in it, is a target address to a pex_binary target. Otherwise, it will assume it's a setuptools entry point as defined by https://packaging.python.org/specifications/entry-points/#entry-points-specification. Use `//` as a prefix for target addresses if you need to disambiguate.\n\nPants will attempt to infer dependencies, which you can confirm by running:\n\n    /home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies <python_distribution target address>",
          "provider": "",
          "required": false,
          "type_hint": "Dict[str, Dict[str, str]] | None"
        },
        {
          "alias": "provides",
          "default": null,
          "description": "The setup.py kwargs for the external artifact built from this target.\n\nYou must define `name`. You can also set almost any keyword argument accepted by setup.py in the `setup()` function: (https://packaging.python.org/guides/distributing-packages-using-setuptools/#setup-args).\n\nSee https://www.pantsbuild.org/v2.12/docs/plugins-setup-py for how to write a plugin to dynamically generate kwargs.",
          "provider": "",
          "required": true,
          "type_hint": "PythonArtifact"
        },
        {
          "alias": "generate_setup",
          "default": null,
          "description": "Whether to generate setup information for this distribution, based on analyzing sources and dependencies. Set to False to use existing setup information, such as existing setup.py, setup.cfg, pyproject.toml files or similar.",
          "provider": "",
          "required": false,
          "type_hint": "bool | None"
        },
        {
          "alias": "wheel",
          "default": "True",
          "description": "Whether to build a wheel for the distribution.",
          "provider": "",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "sdist",
          "default": "True",
          "description": "Whether to build an sdist for the distribution.",
          "provider": "",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "wheel_config_settings",
          "default": null,
          "description": "PEP-517 config settings to pass to the build backend when building a wheel.",
          "provider": "",
          "required": false,
          "type_hint": "Dict[str, Iterable[str]] | None"
        },
        {
          "alias": "sdist_config_settings",
          "default": null,
          "description": "PEP-517 config settings to pass to the build backend when building an sdist.",
          "provider": "",
          "required": false,
          "type_hint": "Dict[str, Iterable[str]] | None"
        },
        {
          "alias": "long_description_path",
          "default": null,
          "description": "Path to a file that will be used to fill the long_description field in setup.py.\n\nPath is relative to the build root.\n\nAlternatively, you can set the `long_description` in the `provides` field, but not both.\n\nThis field won't automatically set `long_description_content_type` field for you. You have to specify this field yourself in the `provides` field.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "repositories",
          "default": null,
          "description": "List of URL addresses or Twine repository aliases where to publish the Python package.\n\nTwine is used for publishing Python packages, so the address to any kind of repository that Twine supports may be used here.\n\nAliases are prefixed with `@` to refer to a config section in your Twine configuration, such as a `.pypirc` file. Use `@pypi` to upload to the public PyPi repository, which is the default when using Twine directly.",
          "provider": "pants.backend.experimental.python",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "skip_twine",
          "default": "False",
          "description": "If true, don't publish this target's packages using Twine.",
          "provider": "pants.backend.experimental.python",
          "required": false,
          "type_hint": "bool"
        }
      ],
      "provider": "pants.backend.python",
      "summary": "A publishable Python setuptools distribution (e.g. an sdist or wheel)."
    },
    "python_google_cloud_function": {
      "alias": "python_google_cloud_function",
      "description": "A self-contained Python function suitable for uploading to Google Cloud Function.\n\nSee https://www.pantsbuild.org/v2.12/docs/google-cloud-function-python.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "output_path",
          "default": null,
          "description": "Where the built asset should be located.\n\nIf undefined, this will use the path to the BUILD file, followed by the target name. For example, `src/python/project:app` would be `src.python.project/app.ext`.\n\nWhen running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 package`, this path will be prefixed by `--distdir` (e.g. `dist/`).\n\nWarning: setting this value risks naming collisions with other package targets you may have.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib', 'helloworld/main.py:lib', '3rdparty:reqs#django'].\n\nThis augments any dependencies inferred by Pants, such as by analyzing your imports. Use `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies` or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 peek` on this target to get the final result.\n\nSee https://www.pantsbuild.org/v2.12/docs/targets#target-addresses and https://www.pantsbuild.org/v2.12/docs/targets#target-generation for more about how addresses are formed, including for generated targets. You can also run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list ::` to find all addresses in your project, or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list dir:` to find all addresses defined in that directory.\n\nIf the target is in the same BUILD file, you can leave off the BUILD file path, e.g. `:tgt` instead of `helloworld/subdir:tgt`. For generated first-party addresses, use `./` for the file path, e.g. `./main.py:tgt`; for all other generated targets, use `:tgt#generated_name`.\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "handler",
          "default": null,
          "description": "Entry point to the Google Cloud Function handler.\n\nYou can specify a full module like 'path.to.module:handler_func' or use a shorthand to specify a file name, using the same syntax as the `sources` field, e.g. 'cloud_function.py:handler_func'.\n\nYou must use the file name shorthand for file arguments to work with this target.",
          "provider": "",
          "required": true,
          "type_hint": "str"
        },
        {
          "alias": "runtime",
          "default": null,
          "description": "The identifier of the Google Cloud Function runtime to target (pythonXY). See https://cloud.google.com/functions/docs/concepts/python-runtime.",
          "provider": "",
          "required": false,
          "type_hint": "'python37' | 'python38' | 'python39' | None"
        },
        {
          "alias": "complete_platforms",
          "default": null,
          "description": "The platforms the built PEX should be compatible with.\n\nThere must be built wheels available for all of the foreign platforms, rather than sdists.\n\nYou can give a list of multiple complete platforms to create a multiplatform PEX, meaning that the PEX will be executable in all of the supported environments.\n\nComplete platforms should be addresses of `file` targets that point to files that contain complete platform JSON as described by Pex (https://pex.readthedocs.io/en/latest/buildingpex.html#complete-platform).",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "type",
          "default": null,
          "description": "The trigger type of the cloud function. Can either be 'event' or 'http'. See https://cloud.google.com/functions/docs/concepts/python-runtime for reference to --trigger-http.",
          "provider": "",
          "required": true,
          "type_hint": "'event' | 'http'"
        },
        {
          "alias": "resolve",
          "default": null,
          "description": "The resolve from `[python].resolves` to use.\n\nIf not defined, will default to `[python].default_resolve`.\n\nAll dependencies must share the same value for their `resolve` field.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        }
      ],
      "provider": "pants.backend.google_cloud_function.python",
      "summary": "A self-contained Python function suitable for uploading to Google Cloud Function."
    },
    "python_requirement": {
      "alias": "python_requirement",
      "description": "A Python requirement installable by pip.\n\nThis target is useful when you want to declare Python requirements inline in a BUILD file. If you have a `requirements.txt` file already, you can instead use the target generator `python_requirements` to convert each requirement into a `python_requirement` target automatically. For Poetry, use `poetry_requirements`.\n\nSee https://www.pantsbuild.org/v2.12/docs/python-third-party-dependencies.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib', 'helloworld/main.py:lib', '3rdparty:reqs#django'].\n\nThis augments any dependencies inferred by Pants, such as by analyzing your imports. Use `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies` or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 peek` on this target to get the final result.\n\nSee https://www.pantsbuild.org/v2.12/docs/targets#target-addresses and https://www.pantsbuild.org/v2.12/docs/targets#target-generation for more about how addresses are formed, including for generated targets. You can also run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list ::` to find all addresses in your project, or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list dir:` to find all addresses defined in that directory.\n\nIf the target is in the same BUILD file, you can leave off the BUILD file path, e.g. `:tgt` instead of `helloworld/subdir:tgt`. For generated first-party addresses, use `./` for the file path, e.g. `./main.py:tgt`; for all other generated targets, use `:tgt#generated_name`.\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "requirements",
          "default": null,
          "description": "A pip-style requirement string, e.g. `[\"Django==3.2.8\"]`.\n\nYou can specify multiple requirements for the same project in order to use environment markers, such as `[\"foo>=1.2,<1.3 ; python_version>'3.6'\", \"foo==0.9 ; python_version<'3'\"]`.\n\nIf the requirement depends on some other requirement to work, such as needing `setuptools` to be built, use the `dependencies` field instead.",
          "provider": "",
          "required": true,
          "type_hint": "Iterable[str]"
        },
        {
          "alias": "modules",
          "default": null,
          "description": "The modules this requirement provides (used for dependency inference).\n\nFor example, the requirement `setuptools` provides `[\"setuptools\", \"pkg_resources\", \"easy_install\"]`.\n\nUsually you can leave this field off. If unspecified, Pants will first look at the default module mapping (https://github.com/pantsbuild/pants/blob/release_2.12.1/src/python/pants/backend/python/dependency_inference/default_module_mapping.py), and then will default to the normalized project name. For example, the requirement `Django` would default to the module `django`.\n\nMutually exclusive with the `type_stub_modules` field.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "type_stub_modules",
          "default": null,
          "description": "The modules this requirement provides if the requirement is a type stub (used for dependency inference).\n\nFor example, the requirement `types-requests` provides `[\"requests\"]`.\n\nUsually you can leave this field off. If unspecified, Pants will first look at the default module mapping (https://github.com/pantsbuild/pants/blob/release_2.12.1/src/python/pants/backend/python/dependency_inference/default_module_mapping.py). If not found _and_ the requirement name starts with `types-` or `stubs-`, or ends with `-types` or `-stubs`, will default to that requirement name without the prefix/suffix. For example, `types-requests` would default to `requests`. Otherwise, will be treated like a normal requirement (see the `modules` field).\n\nMutually exclusive with the `modules` field.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "resolve",
          "default": null,
          "description": "The resolve from `[python].resolves` that this requirement is included in.\n\nIf not defined, will default to `[python].default_resolve`.\n\nWhen generating a lockfile for a particular resolve via the `generate-lockfiles` goal, it will include all requirements that are declared with that resolve. First-party targets like `python_source` and `pex_binary` then declare which resolve they use via their `resolve` field; so, for your first-party code to use a particular `python_requirement` target, that requirement must be included in the resolve used by that code.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        }
      ],
      "provider": "pants.backend.python",
      "summary": "A Python requirement installable by pip."
    },
    "python_requirements": {
      "alias": "python_requirements",
      "description": "Generate a `python_requirement` for each entry in a requirements.txt-style file from the `source` field.\n\nThis works with pip-style requirements files: https://pip.pypa.io/en/latest/reference/requirements-file-format/. However, pip options like `--hash` are (for now) ignored.\n\nPants will not follow `-r reqs.txt` lines. Instead, add a dedicated `python_requirements` target generator for that additional requirements file.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "module_mapping",
          "default": "FrozenDict({})",
          "description": "A mapping of requirement names to a list of the modules they provide.\n\nFor example, `{\"ansicolors\": [\"colors\"]}`.\n\nAny unspecified requirements will use a default. See the `modules` field from the `python_requirement` target for more information.",
          "provider": "",
          "required": false,
          "type_hint": "Dict[str, Iterable[str]]"
        },
        {
          "alias": "type_stubs_module_mapping",
          "default": "FrozenDict({})",
          "description": "A mapping of type-stub requirement names to a list of the modules they provide.\n\nFor example, `{\"types-requests\": [\"requests\"]}`.\n\nIf the requirement is not specified _and_ its name looks like a type stub, Pants will use a default. See the `type_stub_modules` field from the `python_requirement` target for more information.",
          "provider": "",
          "required": false,
          "type_hint": "Dict[str, Iterable[str]]"
        },
        {
          "alias": "source",
          "default": "'requirements.txt'",
          "description": "A single file that belongs to this target.\n\nPath is relative to the BUILD file's directory, e.g. `source='example.ext'`.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "overrides",
          "default": null,
          "description": "Override the field values for generated `python_requirement` targets.\n\nExpects a dictionary of requirements to a dictionary for the overrides. You may either use a string for a single requirement, or a string tuple for multiple requirements. Each override is a dictionary of field names to the overridden value.\n\nFor example:\n\n    ```\n    overrides={\n        \"django\": {\"dependencies\": [\"#setuptools\"]]},\n        \"ansicolors\": {\"description\": \"pretty colors\"]},\n        (\"ansicolors, \"django\"): {\"tags\": [\"overridden\"]},\n    }\n    ```\n\nEvery overridden requirement is validated to be generated by this target.\n\nYou can specify the same requirement in multiple keys, so long as you don't override the same field more than one time for the requirement.",
          "provider": "",
          "required": false,
          "type_hint": "Dict[Union[str, Tuple[str, ...]], Dict[str, Any]] | None"
        },
        {
          "alias": "resolve",
          "default": null,
          "description": "The resolve from `[python].resolves` that this requirement is included in.\n\nIf not defined, will default to `[python].default_resolve`.\n\nWhen generating a lockfile for a particular resolve via the `generate-lockfiles` goal, it will include all requirements that are declared with that resolve. First-party targets like `python_source` and `pex_binary` then declare which resolve they use via their `resolve` field; so, for your first-party code to use a particular `python_requirement` target, that requirement must be included in the resolve used by that code.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        }
      ],
      "provider": "pants.backend.python",
      "summary": "Generate a `python_requirement` for each entry in a requirements.txt-style file from the `source` field."
    },
    "python_source": {
      "alias": "python_source",
      "description": "A single Python source file.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "interpreter_constraints",
          "default": null,
          "description": "The Python interpreters this code is compatible with.\n\nEach element should be written in pip-style format, e.g. `CPython==2.7.*` or `CPython>=3.6,<4`. You can leave off `CPython` as a shorthand, e.g. `>=2.7` will be expanded to `CPython>=2.7`.\n\nSpecify more than one element to OR the constraints, e.g. `['PyPy==3.7.*', 'CPython==3.7.*']` means either PyPy 3.7 _or_ CPython 3.7.\n\nIf the field is not set, it will default to the option `[python].interpreter_constraints`.\n\nSee https://www.pantsbuild.org/v2.12/docs/python-interpreter-compatibility for how these interpreter constraints are merged with the constraints of dependencies.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib', 'helloworld/main.py:lib', '3rdparty:reqs#django'].\n\nThis augments any dependencies inferred by Pants, such as by analyzing your imports. Use `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies` or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 peek` on this target to get the final result.\n\nSee https://www.pantsbuild.org/v2.12/docs/targets#target-addresses and https://www.pantsbuild.org/v2.12/docs/targets#target-generation for more about how addresses are formed, including for generated targets. You can also run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list ::` to find all addresses in your project, or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list dir:` to find all addresses defined in that directory.\n\nIf the target is in the same BUILD file, you can leave off the BUILD file path, e.g. `:tgt` instead of `helloworld/subdir:tgt`. For generated first-party addresses, use `./` for the file path, e.g. `./main.py:tgt`; for all other generated targets, use `:tgt#generated_name`.\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "resolve",
          "default": null,
          "description": "The resolve from `[python].resolves` to use.\n\nIf not defined, will default to `[python].default_resolve`.\n\nAll dependencies must share the same value for their `resolve` field.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "source",
          "default": null,
          "description": "A single file that belongs to this target.\n\nPath is relative to the BUILD file's directory, e.g. `source='example.ext'`.",
          "provider": "",
          "required": true,
          "type_hint": "str"
        },
        {
          "alias": "skip_autoflake",
          "default": "False",
          "description": "If true, don't run Autoflake on this target's code.",
          "provider": "pants.backend.experimental.python.lint.autoflake",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_pyupgrade",
          "default": "False",
          "description": "If true, don't run pyupgrade on this target's code.",
          "provider": "pants.backend.experimental.python.lint.pyupgrade",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_bandit",
          "default": "False",
          "description": "If true, don't run Bandit on this target's code.",
          "provider": "pants.backend.python.lint.bandit",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_black",
          "default": "False",
          "description": "If true, don't run Black on this target's code.",
          "provider": "pants.backend.python.lint.black",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_docformatter",
          "default": "False",
          "description": "If true, don't run Docformatter on this target's code.",
          "provider": "pants.backend.python.lint.docformatter",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_flake8",
          "default": "False",
          "description": "If true, don't run Flake8 on this target's code.",
          "provider": "pants.backend.python.lint.flake8",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_isort",
          "default": "False",
          "description": "If true, don't run isort on this target's code.",
          "provider": "pants.backend.python.lint.isort",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_pylint",
          "default": "False",
          "description": "If true, don't run Pylint on this target's code.",
          "provider": "pants.backend.python.lint.pylint",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_yapf",
          "default": "False",
          "description": "If true, don't run yapf on this target's code.",
          "provider": "pants.backend.python.lint.yapf",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_mypy",
          "default": "False",
          "description": "If true, don't run MyPy on this target's code.",
          "provider": "pants.backend.python.typecheck.mypy",
          "required": false,
          "type_hint": "bool"
        }
      ],
      "provider": "pants.backend.python",
      "summary": "A single Python source file."
    },
    "python_sources": {
      "alias": "python_sources",
      "description": "Generate a `python_source` target for each file in the `sources` field.\n\nYou can either use this target generator or `python_test_utils` for test utility files like `conftest.py`. They behave identically, but can help to better model and keep separate test support files vs. production files.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "sources",
          "default": "('*.py', '*.pyi', '!test_*.py', '!*_test.py', '!tests.py', '!conftest.py', '!test_*.pyi', '!*_test.pyi', '!tests.pyi')",
          "description": "A list of files and globs that belong to this target.\n\nPaths are relative to the BUILD file's directory. You can ignore files/globs by prefixing them with `!`.\n\nExample: `sources=['example.ext', 'test_*.ext', '!test_ignore.ext']`.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "overrides",
          "default": null,
          "description": "Override the field values for generated `python_source` targets.\n\nExpects a dictionary of relative file paths and globs to a dictionary for the overrides. You may either use a string for a single path / glob, or a string tuple for multiple paths / globs. Each override is a dictionary of field names to the overridden value.\n\nFor example:\n\n```\noverrides={\n  \"foo.py\": {\"skip_pylint\": True]},\n  \"bar.py\": {\"skip_flake8\": True]},\n  (\"foo.py\", \"bar.py\"): {\"tags\": [\"linter_disabled\"]},\n}\n```\n\nFile paths and globs are relative to the BUILD file's directory. Every overridden file is validated to belong to this target's `sources` field.\n\nIf you'd like to override a field's value for every `python_source` target generated by this target, change the field directly on this target rather than using the `overrides` field.\n\nYou can specify the same file name in multiple keys, so long as you don't override the same field more than one time for the file.",
          "provider": "",
          "required": false,
          "type_hint": "Dict[Union[str, Tuple[str, ...]], Dict[str, Any]] | None"
        },
        {
          "alias": "skip_autoflake",
          "default": "False",
          "description": "If true, don't run Autoflake on this target's code.",
          "provider": "pants.backend.experimental.python.lint.autoflake",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_pyupgrade",
          "default": "False",
          "description": "If true, don't run pyupgrade on this target's code.",
          "provider": "pants.backend.experimental.python.lint.pyupgrade",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_bandit",
          "default": "False",
          "description": "If true, don't run Bandit on this target's code.",
          "provider": "pants.backend.python.lint.bandit",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_black",
          "default": "False",
          "description": "If true, don't run Black on this target's code.",
          "provider": "pants.backend.python.lint.black",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_docformatter",
          "default": "False",
          "description": "If true, don't run Docformatter on this target's code.",
          "provider": "pants.backend.python.lint.docformatter",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_flake8",
          "default": "False",
          "description": "If true, don't run Flake8 on this target's code.",
          "provider": "pants.backend.python.lint.flake8",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_isort",
          "default": "False",
          "description": "If true, don't run isort on this target's code.",
          "provider": "pants.backend.python.lint.isort",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_pylint",
          "default": "False",
          "description": "If true, don't run Pylint on this target's code.",
          "provider": "pants.backend.python.lint.pylint",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_yapf",
          "default": "False",
          "description": "If true, don't run yapf on this target's code.",
          "provider": "pants.backend.python.lint.yapf",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_mypy",
          "default": "False",
          "description": "If true, don't run MyPy on this target's code.",
          "provider": "pants.backend.python.typecheck.mypy",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "resolve",
          "default": null,
          "description": "The resolve from `[python].resolves` to use.\n\nIf not defined, will default to `[python].default_resolve`.\n\nAll dependencies must share the same value for their `resolve` field.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib', 'helloworld/main.py:lib', '3rdparty:reqs#django'].\n\nThis augments any dependencies inferred by Pants, such as by analyzing your imports. Use `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies` or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 peek` on this target to get the final result.\n\nSee https://www.pantsbuild.org/v2.12/docs/targets#target-addresses and https://www.pantsbuild.org/v2.12/docs/targets#target-generation for more about how addresses are formed, including for generated targets. You can also run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list ::` to find all addresses in your project, or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list dir:` to find all addresses defined in that directory.\n\nIf the target is in the same BUILD file, you can leave off the BUILD file path, e.g. `:tgt` instead of `helloworld/subdir:tgt`. For generated first-party addresses, use `./` for the file path, e.g. `./main.py:tgt`; for all other generated targets, use `:tgt#generated_name`.\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "interpreter_constraints",
          "default": null,
          "description": "The Python interpreters this code is compatible with.\n\nEach element should be written in pip-style format, e.g. `CPython==2.7.*` or `CPython>=3.6,<4`. You can leave off `CPython` as a shorthand, e.g. `>=2.7` will be expanded to `CPython>=2.7`.\n\nSpecify more than one element to OR the constraints, e.g. `['PyPy==3.7.*', 'CPython==3.7.*']` means either PyPy 3.7 _or_ CPython 3.7.\n\nIf the field is not set, it will default to the option `[python].interpreter_constraints`.\n\nSee https://www.pantsbuild.org/v2.12/docs/python-interpreter-compatibility for how these interpreter constraints are merged with the constraints of dependencies.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        }
      ],
      "provider": "pants.backend.python",
      "summary": "Generate a `python_source` target for each file in the `sources` field."
    },
    "python_test": {
      "alias": "python_test",
      "description": "A single Python test file, written in either Pytest style or unittest style.\n\nAll test util code, including `conftest.py`, should go into a dedicated `python_source` target and then be included in the `dependencies` field. (You can use the `python_test_utils` target to generate these `python_source` targets.)\n\nSee https://www.pantsbuild.org/v2.12/docs/python-test-goal",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib', 'helloworld/main.py:lib', '3rdparty:reqs#django'].\n\nThis augments any dependencies inferred by Pants, such as by analyzing your imports. Use `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies` or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 peek` on this target to get the final result.\n\nSee https://www.pantsbuild.org/v2.12/docs/targets#target-addresses and https://www.pantsbuild.org/v2.12/docs/targets#target-generation for more about how addresses are formed, including for generated targets. You can also run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list ::` to find all addresses in your project, or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list dir:` to find all addresses defined in that directory.\n\nIf the target is in the same BUILD file, you can leave off the BUILD file path, e.g. `:tgt` instead of `helloworld/subdir:tgt`. For generated first-party addresses, use `./` for the file path, e.g. `./main.py:tgt`; for all other generated targets, use `:tgt#generated_name`.\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "resolve",
          "default": null,
          "description": "The resolve from `[python].resolves` to use.\n\nIf not defined, will default to `[python].default_resolve`.\n\nAll dependencies must share the same value for their `resolve` field.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "timeout",
          "default": null,
          "description": "A timeout (in seconds) used by each test file belonging to this target.\n\nIf unset, will default to `[pytest].timeout_default`; if that option is also unset, then the test will never time out. Will never exceed `[pytest].timeout_maximum`. Only applies if the option `--pytest-timeouts` is set to true (the default).",
          "provider": "",
          "required": false,
          "type_hint": "int | None"
        },
        {
          "alias": "runtime_package_dependencies",
          "default": null,
          "description": "Addresses to targets that can be built with the `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 package` goal and whose resulting artifacts should be included in the test run.\n\nPants will build the artifacts as if you had run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 package`. It will include the results in your test's chroot, using the same name they would normally have, but without the `--distdir` prefix (e.g. `dist/`).\n\nYou can include anything that can be built by `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 package`, e.g. a `pex_binary`, `python_awslambda`, or an `archive`.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "extra_env_vars",
          "default": null,
          "description": "Additional environment variables to include in test processes. Entries are strings in the form `ENV_VAR=value` to use explicitly; or just `ENV_VAR` to copy the value of a variable in Pants's own environment. This will be merged with and override values from [test].extra_env_vars.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "interpreter_constraints",
          "default": null,
          "description": "The Python interpreters this code is compatible with.\n\nEach element should be written in pip-style format, e.g. `CPython==2.7.*` or `CPython>=3.6,<4`. You can leave off `CPython` as a shorthand, e.g. `>=2.7` will be expanded to `CPython>=2.7`.\n\nSpecify more than one element to OR the constraints, e.g. `['PyPy==3.7.*', 'CPython==3.7.*']` means either PyPy 3.7 _or_ CPython 3.7.\n\nIf the field is not set, it will default to the option `[python].interpreter_constraints`.\n\nSee https://www.pantsbuild.org/v2.12/docs/python-interpreter-compatibility for how these interpreter constraints are merged with the constraints of dependencies.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "skip_tests",
          "default": "False",
          "description": "If true, don't run this target's tests.",
          "provider": "",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib', 'helloworld/main.py:lib', '3rdparty:reqs#django'].\n\nThis augments any dependencies inferred by Pants, such as by analyzing your imports. Use `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies` or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 peek` on this target to get the final result.\n\nSee https://www.pantsbuild.org/v2.12/docs/targets#target-addresses and https://www.pantsbuild.org/v2.12/docs/targets#target-generation for more about how addresses are formed, including for generated targets. You can also run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list ::` to find all addresses in your project, or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list dir:` to find all addresses defined in that directory.\n\nIf the target is in the same BUILD file, you can leave off the BUILD file path, e.g. `:tgt` instead of `helloworld/subdir:tgt`. For generated first-party addresses, use `./` for the file path, e.g. `./main.py:tgt`; for all other generated targets, use `:tgt#generated_name`.\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "source",
          "default": null,
          "description": "A single file that belongs to this target.\n\nPath is relative to the BUILD file's directory, e.g. `source='example.ext'`.",
          "provider": "",
          "required": true,
          "type_hint": "str"
        },
        {
          "alias": "skip_autoflake",
          "default": "False",
          "description": "If true, don't run Autoflake on this target's code.",
          "provider": "pants.backend.experimental.python.lint.autoflake",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_pyupgrade",
          "default": "False",
          "description": "If true, don't run pyupgrade on this target's code.",
          "provider": "pants.backend.experimental.python.lint.pyupgrade",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_bandit",
          "default": "False",
          "description": "If true, don't run Bandit on this target's code.",
          "provider": "pants.backend.python.lint.bandit",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_black",
          "default": "False",
          "description": "If true, don't run Black on this target's code.",
          "provider": "pants.backend.python.lint.black",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_docformatter",
          "default": "False",
          "description": "If true, don't run Docformatter on this target's code.",
          "provider": "pants.backend.python.lint.docformatter",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_flake8",
          "default": "False",
          "description": "If true, don't run Flake8 on this target's code.",
          "provider": "pants.backend.python.lint.flake8",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_isort",
          "default": "False",
          "description": "If true, don't run isort on this target's code.",
          "provider": "pants.backend.python.lint.isort",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_pylint",
          "default": "False",
          "description": "If true, don't run Pylint on this target's code.",
          "provider": "pants.backend.python.lint.pylint",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_yapf",
          "default": "False",
          "description": "If true, don't run yapf on this target's code.",
          "provider": "pants.backend.python.lint.yapf",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_mypy",
          "default": "False",
          "description": "If true, don't run MyPy on this target's code.",
          "provider": "pants.backend.python.typecheck.mypy",
          "required": false,
          "type_hint": "bool"
        }
      ],
      "provider": "pants.backend.python",
      "summary": "A single Python test file, written in either Pytest style or unittest style."
    },
    "python_test_utils": {
      "alias": "python_test_utils",
      "description": "Generate a `python_source` target for each file in the `sources` field.\n\nThis target generator is intended for test utility files like `conftest.py` or `my_test_utils.py`. Technically, it generates `python_source` targets in the exact same way as the `python_sources` target generator does, only that the `sources` field has a different default. So it is valid to use `python_sources` instead. However, this target can be helpful to better model your code by keeping separate test support files vs. production files.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "sources",
          "default": "('conftest.py', 'test_*.pyi', '*_test.pyi', 'tests.pyi')",
          "description": "A list of files and globs that belong to this target.\n\nPaths are relative to the BUILD file's directory. You can ignore files/globs by prefixing them with `!`.\n\nExample: `sources=['example.ext', 'test_*.ext', '!test_ignore.ext']`.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "overrides",
          "default": null,
          "description": "Override the field values for generated `python_source` targets.\n\nExpects a dictionary of relative file paths and globs to a dictionary for the overrides. You may either use a string for a single path / glob, or a string tuple for multiple paths / globs. Each override is a dictionary of field names to the overridden value.\n\nFor example:\n\n```\noverrides={\n  \"foo.py\": {\"skip_pylint\": True]},\n  \"bar.py\": {\"skip_flake8\": True]},\n  (\"foo.py\", \"bar.py\"): {\"tags\": [\"linter_disabled\"]},\n}\n```\n\nFile paths and globs are relative to the BUILD file's directory. Every overridden file is validated to belong to this target's `sources` field.\n\nIf you'd like to override a field's value for every `python_source` target generated by this target, change the field directly on this target rather than using the `overrides` field.\n\nYou can specify the same file name in multiple keys, so long as you don't override the same field more than one time for the file.",
          "provider": "",
          "required": false,
          "type_hint": "Dict[Union[str, Tuple[str, ...]], Dict[str, Any]] | None"
        },
        {
          "alias": "skip_autoflake",
          "default": "False",
          "description": "If true, don't run Autoflake on this target's code.",
          "provider": "pants.backend.experimental.python.lint.autoflake",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_pyupgrade",
          "default": "False",
          "description": "If true, don't run pyupgrade on this target's code.",
          "provider": "pants.backend.experimental.python.lint.pyupgrade",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_bandit",
          "default": "False",
          "description": "If true, don't run Bandit on this target's code.",
          "provider": "pants.backend.python.lint.bandit",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_black",
          "default": "False",
          "description": "If true, don't run Black on this target's code.",
          "provider": "pants.backend.python.lint.black",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_docformatter",
          "default": "False",
          "description": "If true, don't run Docformatter on this target's code.",
          "provider": "pants.backend.python.lint.docformatter",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_flake8",
          "default": "False",
          "description": "If true, don't run Flake8 on this target's code.",
          "provider": "pants.backend.python.lint.flake8",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_isort",
          "default": "False",
          "description": "If true, don't run isort on this target's code.",
          "provider": "pants.backend.python.lint.isort",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_pylint",
          "default": "False",
          "description": "If true, don't run Pylint on this target's code.",
          "provider": "pants.backend.python.lint.pylint",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_yapf",
          "default": "False",
          "description": "If true, don't run yapf on this target's code.",
          "provider": "pants.backend.python.lint.yapf",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_mypy",
          "default": "False",
          "description": "If true, don't run MyPy on this target's code.",
          "provider": "pants.backend.python.typecheck.mypy",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "resolve",
          "default": null,
          "description": "The resolve from `[python].resolves` to use.\n\nIf not defined, will default to `[python].default_resolve`.\n\nAll dependencies must share the same value for their `resolve` field.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib', 'helloworld/main.py:lib', '3rdparty:reqs#django'].\n\nThis augments any dependencies inferred by Pants, such as by analyzing your imports. Use `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies` or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 peek` on this target to get the final result.\n\nSee https://www.pantsbuild.org/v2.12/docs/targets#target-addresses and https://www.pantsbuild.org/v2.12/docs/targets#target-generation for more about how addresses are formed, including for generated targets. You can also run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list ::` to find all addresses in your project, or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list dir:` to find all addresses defined in that directory.\n\nIf the target is in the same BUILD file, you can leave off the BUILD file path, e.g. `:tgt` instead of `helloworld/subdir:tgt`. For generated first-party addresses, use `./` for the file path, e.g. `./main.py:tgt`; for all other generated targets, use `:tgt#generated_name`.\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "interpreter_constraints",
          "default": null,
          "description": "The Python interpreters this code is compatible with.\n\nEach element should be written in pip-style format, e.g. `CPython==2.7.*` or `CPython>=3.6,<4`. You can leave off `CPython` as a shorthand, e.g. `>=2.7` will be expanded to `CPython>=2.7`.\n\nSpecify more than one element to OR the constraints, e.g. `['PyPy==3.7.*', 'CPython==3.7.*']` means either PyPy 3.7 _or_ CPython 3.7.\n\nIf the field is not set, it will default to the option `[python].interpreter_constraints`.\n\nSee https://www.pantsbuild.org/v2.12/docs/python-interpreter-compatibility for how these interpreter constraints are merged with the constraints of dependencies.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        }
      ],
      "provider": "pants.backend.python",
      "summary": "Generate a `python_source` target for each file in the `sources` field."
    },
    "python_tests": {
      "alias": "python_tests",
      "description": "Generate a `python_test` target for each file in the `sources` field.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "sources",
          "default": "('test_*.py', '*_test.py', 'tests.py')",
          "description": "A list of files and globs that belong to this target.\n\nPaths are relative to the BUILD file's directory. You can ignore files/globs by prefixing them with `!`.\n\nExample: `sources=['example.ext', 'test_*.ext', '!test_ignore.ext']`.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "overrides",
          "default": null,
          "description": "Override the field values for generated `python_test` targets.\n\nExpects a dictionary of relative file paths and globs to a dictionary for the overrides. You may either use a string for a single path / glob, or a string tuple for multiple paths / globs. Each override is a dictionary of field names to the overridden value.\n\nFor example:\n\n```\noverrides={\n  \"foo_test.py\": {\"timeout\": 120]},\n  \"bar_test.py\": {\"timeout\": 200]},\n  (\"foo_test.py\", \"bar_test.py\"): {\"tags\": [\"slow_tests\"]},\n}\n```\n\nFile paths and globs are relative to the BUILD file's directory. Every overridden file is validated to belong to this target's `sources` field.\n\nIf you'd like to override a field's value for every `python_test` target generated by this target, change the field directly on this target rather than using the `overrides` field.\n\nYou can specify the same file name in multiple keys, so long as you don't override the same field more than one time for the file.",
          "provider": "",
          "required": false,
          "type_hint": "Dict[Union[str, Tuple[str, ...]], Dict[str, Any]] | None"
        },
        {
          "alias": "skip_autoflake",
          "default": "False",
          "description": "If true, don't run Autoflake on this target's code.",
          "provider": "pants.backend.experimental.python.lint.autoflake",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_pyupgrade",
          "default": "False",
          "description": "If true, don't run pyupgrade on this target's code.",
          "provider": "pants.backend.experimental.python.lint.pyupgrade",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_bandit",
          "default": "False",
          "description": "If true, don't run Bandit on this target's code.",
          "provider": "pants.backend.python.lint.bandit",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_black",
          "default": "False",
          "description": "If true, don't run Black on this target's code.",
          "provider": "pants.backend.python.lint.black",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_docformatter",
          "default": "False",
          "description": "If true, don't run Docformatter on this target's code.",
          "provider": "pants.backend.python.lint.docformatter",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_flake8",
          "default": "False",
          "description": "If true, don't run Flake8 on this target's code.",
          "provider": "pants.backend.python.lint.flake8",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_isort",
          "default": "False",
          "description": "If true, don't run isort on this target's code.",
          "provider": "pants.backend.python.lint.isort",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_pylint",
          "default": "False",
          "description": "If true, don't run Pylint on this target's code.",
          "provider": "pants.backend.python.lint.pylint",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_yapf",
          "default": "False",
          "description": "If true, don't run yapf on this target's code.",
          "provider": "pants.backend.python.lint.yapf",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_mypy",
          "default": "False",
          "description": "If true, don't run MyPy on this target's code.",
          "provider": "pants.backend.python.typecheck.mypy",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib', 'helloworld/main.py:lib', '3rdparty:reqs#django'].\n\nThis augments any dependencies inferred by Pants, such as by analyzing your imports. Use `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies` or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 peek` on this target to get the final result.\n\nSee https://www.pantsbuild.org/v2.12/docs/targets#target-addresses and https://www.pantsbuild.org/v2.12/docs/targets#target-generation for more about how addresses are formed, including for generated targets. You can also run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list ::` to find all addresses in your project, or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list dir:` to find all addresses defined in that directory.\n\nIf the target is in the same BUILD file, you can leave off the BUILD file path, e.g. `:tgt` instead of `helloworld/subdir:tgt`. For generated first-party addresses, use `./` for the file path, e.g. `./main.py:tgt`; for all other generated targets, use `:tgt#generated_name`.\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "resolve",
          "default": null,
          "description": "The resolve from `[python].resolves` to use.\n\nIf not defined, will default to `[python].default_resolve`.\n\nAll dependencies must share the same value for their `resolve` field.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "timeout",
          "default": null,
          "description": "A timeout (in seconds) used by each test file belonging to this target.\n\nIf unset, will default to `[pytest].timeout_default`; if that option is also unset, then the test will never time out. Will never exceed `[pytest].timeout_maximum`. Only applies if the option `--pytest-timeouts` is set to true (the default).",
          "provider": "",
          "required": false,
          "type_hint": "int | None"
        },
        {
          "alias": "runtime_package_dependencies",
          "default": null,
          "description": "Addresses to targets that can be built with the `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 package` goal and whose resulting artifacts should be included in the test run.\n\nPants will build the artifacts as if you had run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 package`. It will include the results in your test's chroot, using the same name they would normally have, but without the `--distdir` prefix (e.g. `dist/`).\n\nYou can include anything that can be built by `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 package`, e.g. a `pex_binary`, `python_awslambda`, or an `archive`.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "extra_env_vars",
          "default": null,
          "description": "Additional environment variables to include in test processes. Entries are strings in the form `ENV_VAR=value` to use explicitly; or just `ENV_VAR` to copy the value of a variable in Pants's own environment. This will be merged with and override values from [test].extra_env_vars.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "interpreter_constraints",
          "default": null,
          "description": "The Python interpreters this code is compatible with.\n\nEach element should be written in pip-style format, e.g. `CPython==2.7.*` or `CPython>=3.6,<4`. You can leave off `CPython` as a shorthand, e.g. `>=2.7` will be expanded to `CPython>=2.7`.\n\nSpecify more than one element to OR the constraints, e.g. `['PyPy==3.7.*', 'CPython==3.7.*']` means either PyPy 3.7 _or_ CPython 3.7.\n\nIf the field is not set, it will default to the option `[python].interpreter_constraints`.\n\nSee https://www.pantsbuild.org/v2.12/docs/python-interpreter-compatibility for how these interpreter constraints are merged with the constraints of dependencies.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "skip_tests",
          "default": "False",
          "description": "If true, don't run this target's tests.",
          "provider": "",
          "required": false,
          "type_hint": "bool"
        }
      ],
      "provider": "pants.backend.python",
      "summary": "Generate a `python_test` target for each file in the `sources` field."
    },
    "relocated_files": {
      "alias": "relocated_files",
      "description": "Loose files with path manipulation applied.\n\nAllows you to relocate the files at runtime to something more convenient than their actual paths in your project.\n\nFor example, you can relocate `src/resources/project1/data.json` to instead be `resources/data.json`. Your other target types can then add this target to their `dependencies` field, rather than using the original `files` target.\n\nTo remove a prefix:\n\n    # Results in `data.json`.\n    relocated_files(\n        files_targets=[\"src/resources/project1:target\"],\n        src=\"src/resources/project1\",\n        dest=\"\",\n    )\n\nTo add a prefix:\n\n    # Results in `images/logo.svg`.\n    relocated_files(\n        files_targets=[\"//:logo\"],\n        src=\"\",\n        dest=\"images\",\n    )\n\nTo replace a prefix:\n\n    # Results in `new_prefix/project1/data.json`.\n    relocated_files(\n        files_targets=[\"src/resources/project1:target\"],\n        src=\"src/resources\",\n        dest=\"new_prefix\",\n    )",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "files_targets",
          "default": null,
          "description": "Addresses to the original `file` and `files` targets that you want to relocate, such as `['//:json_files']`.\n\nEvery target will be relocated using the same mapping. This means that every target must include the value from the `src` field in their original path.",
          "provider": "",
          "required": true,
          "type_hint": "Iterable[str]"
        },
        {
          "alias": "src",
          "default": null,
          "description": "The original prefix that you want to replace, such as `src/resources`.\n\nYou can set this field to the empty string to preserve the original path; the value in the `dest` field will then be added to the beginning of this original path.",
          "provider": "",
          "required": true,
          "type_hint": "str"
        },
        {
          "alias": "dest",
          "default": null,
          "description": "The new prefix that you want to add to the beginning of the path, such as `data`.\n\nYou can set this field to the empty string to avoid adding any new values to the path; the value in the `src` field will then be stripped, rather than replaced.",
          "provider": "",
          "required": true,
          "type_hint": "str"
        }
      ],
      "provider": "pants.core",
      "summary": "Loose files with path manipulation applied."
    },
    "resource": {
      "alias": "resource",
      "description": "A single resource file embedded in a code package and accessed in a location-independent manner.\n\nResources are embedded in code artifacts such as Python wheels or JVM JARs. The sources of a `resources` target are accessed via language-specific resource APIs, such as Python's `pkgutil` or JVM's ClassLoader, via paths relative to the target's source root.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib', 'helloworld/main.py:lib', '3rdparty:reqs#django'].\n\nThis augments any dependencies inferred by Pants, such as by analyzing your imports. Use `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies` or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 peek` on this target to get the final result.\n\nSee https://www.pantsbuild.org/v2.12/docs/targets#target-addresses and https://www.pantsbuild.org/v2.12/docs/targets#target-generation for more about how addresses are formed, including for generated targets. You can also run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list ::` to find all addresses in your project, or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list dir:` to find all addresses defined in that directory.\n\nIf the target is in the same BUILD file, you can leave off the BUILD file path, e.g. `:tgt` instead of `helloworld/subdir:tgt`. For generated first-party addresses, use `./` for the file path, e.g. `./main.py:tgt`; for all other generated targets, use `:tgt#generated_name`.\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "source",
          "default": null,
          "description": "A single file that belongs to this target.\n\nPath is relative to the BUILD file's directory, e.g. `source='example.ext'`.",
          "provider": "",
          "required": true,
          "type_hint": "str"
        }
      ],
      "provider": "pants.core",
      "summary": "A single resource file embedded in a code package and accessed in a location-independent manner."
    },
    "resources": {
      "alias": "resources",
      "description": "Generate a `resource` target for each file in the `sources` field.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "sources",
          "default": null,
          "description": "A list of files and globs that belong to this target.\n\nPaths are relative to the BUILD file's directory. You can ignore files/globs by prefixing them with `!`.\n\nExample: `sources=['example.ext', 'test_*.ext', '!test_ignore.ext']`.",
          "provider": "",
          "required": true,
          "type_hint": "Iterable[str]"
        },
        {
          "alias": "overrides",
          "default": null,
          "description": "Override the field values for generated `resource` targets.\n\nExpects a dictionary of relative file paths and globs to a dictionary for the overrides. You may either use a string for a single path / glob, or a string tuple for multiple paths / globs. Each override is a dictionary of field names to the overridden value.\n\nFor example:\n\n```\noverrides={\n  \"foo.json\": {\"description\": \"our customer model\"]},\n  \"bar.json\": {\"description\": \"our product model\"]},\n  (\"foo.json\", \"bar.json\"): {\"tags\": [\"overridden\"]},\n}\n```\n\nFile paths and globs are relative to the BUILD file's directory. Every overridden file is validated to belong to this target's `sources` field.\n\nIf you'd like to override a field's value for every `resource` target generated by this target, change the field directly on this target rather than using the `overrides` field.\n\nYou can specify the same file name in multiple keys, so long as you don't override the same field more than one time for the file.",
          "provider": "",
          "required": false,
          "type_hint": "Dict[Union[str, Tuple[str, ...]], Dict[str, Any]] | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib', 'helloworld/main.py:lib', '3rdparty:reqs#django'].\n\nThis augments any dependencies inferred by Pants, such as by analyzing your imports. Use `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies` or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 peek` on this target to get the final result.\n\nSee https://www.pantsbuild.org/v2.12/docs/targets#target-addresses and https://www.pantsbuild.org/v2.12/docs/targets#target-generation for more about how addresses are formed, including for generated targets. You can also run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list ::` to find all addresses in your project, or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list dir:` to find all addresses defined in that directory.\n\nIf the target is in the same BUILD file, you can leave off the BUILD file path, e.g. `:tgt` instead of `helloworld/subdir:tgt`. For generated first-party addresses, use `./` for the file path, e.g. `./main.py:tgt`; for all other generated targets, use `:tgt#generated_name`.\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        }
      ],
      "provider": "pants.core",
      "summary": "Generate a `resource` target for each file in the `sources` field."
    },
    "scala_junit_test": {
      "alias": "scala_junit_test",
      "description": "A single Scala test, run with JUnit.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib', 'helloworld/main.py:lib', '3rdparty:reqs#django'].\n\nThis augments any dependencies inferred by Pants, such as by analyzing your imports. Use `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies` or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 peek` on this target to get the final result.\n\nSee https://www.pantsbuild.org/v2.12/docs/targets#target-addresses and https://www.pantsbuild.org/v2.12/docs/targets#target-generation for more about how addresses are formed, including for generated targets. You can also run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list ::` to find all addresses in your project, or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list dir:` to find all addresses defined in that directory.\n\nIf the target is in the same BUILD file, you can leave off the BUILD file path, e.g. `:tgt` instead of `helloworld/subdir:tgt`. For generated first-party addresses, use `./` for the file path, e.g. `./main.py:tgt`; for all other generated targets, use `:tgt#generated_name`.\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "source",
          "default": null,
          "description": "A single file that belongs to this target.\n\nPath is relative to the BUILD file's directory, e.g. `source='example.ext'`.",
          "provider": "",
          "required": true,
          "type_hint": "str"
        },
        {
          "alias": "scalac_plugins",
          "default": null,
          "description": "The names of Scala plugins that this source file requires.\n\nThe plugin must be defined by a corresponding `scalac_plugin` AND `jvm_artifact` target, and must be present in this target's resolve's lockfile.\n\nIf not specified, this will default to the plugins specified in `[scalac].plugins_for_resolve` for this target's resolve.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "resolve",
          "default": null,
          "description": "The resolve from `[jvm].resolves` to use when compiling this target.\n\nIf not defined, will default to `[jvm].default_resolve`.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "experimental_provides_types",
          "default": null,
          "description": "Signals that the specified types should be fulfilled by these source files during dependency inference.\n\nThis allows for specific types within packages that are otherwise inferred as belonging to `jvm_artifact` targets to be unambiguously inferred as belonging to this first-party source.\n\nIf a given type is defined, at least one source file captured by this target must actually provide that symbol.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "jdk",
          "default": null,
          "description": "The major version of the JDK that this target should be built with. If not defined, will default to `[jvm].default_source_jdk`.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        }
      ],
      "provider": "pants.backend.experimental.scala",
      "summary": "A single Scala test, run with JUnit."
    },
    "scala_junit_tests": {
      "alias": "scala_junit_tests",
      "description": "Generate a `scala_junit_test` target for each file in the `sources` field.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "sources",
          "default": "('*Test.scala',)",
          "description": "A list of files and globs that belong to this target.\n\nPaths are relative to the BUILD file's directory. You can ignore files/globs by prefixing them with `!`.\n\nExample: `sources=['example.ext', 'test_*.ext', '!test_ignore.ext']`.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib', 'helloworld/main.py:lib', '3rdparty:reqs#django'].\n\nThis augments any dependencies inferred by Pants, such as by analyzing your imports. Use `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies` or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 peek` on this target to get the final result.\n\nSee https://www.pantsbuild.org/v2.12/docs/targets#target-addresses and https://www.pantsbuild.org/v2.12/docs/targets#target-generation for more about how addresses are formed, including for generated targets. You can also run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list ::` to find all addresses in your project, or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list dir:` to find all addresses defined in that directory.\n\nIf the target is in the same BUILD file, you can leave off the BUILD file path, e.g. `:tgt` instead of `helloworld/subdir:tgt`. For generated first-party addresses, use `./` for the file path, e.g. `./main.py:tgt`; for all other generated targets, use `:tgt#generated_name`.\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "scalac_plugins",
          "default": null,
          "description": "The names of Scala plugins that this source file requires.\n\nThe plugin must be defined by a corresponding `scalac_plugin` AND `jvm_artifact` target, and must be present in this target's resolve's lockfile.\n\nIf not specified, this will default to the plugins specified in `[scalac].plugins_for_resolve` for this target's resolve.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "jdk",
          "default": null,
          "description": "The major version of the JDK that this target should be built with. If not defined, will default to `[jvm].default_source_jdk`.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "experimental_provides_types",
          "default": null,
          "description": "Signals that the specified types should be fulfilled by these source files during dependency inference.\n\nThis allows for specific types within packages that are otherwise inferred as belonging to `jvm_artifact` targets to be unambiguously inferred as belonging to this first-party source.\n\nIf a given type is defined, at least one source file captured by this target must actually provide that symbol.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "resolve",
          "default": null,
          "description": "The resolve from `[jvm].resolves` to use when compiling this target.\n\nIf not defined, will default to `[jvm].default_resolve`.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        }
      ],
      "provider": "pants.backend.experimental.scala",
      "summary": "Generate a `scala_junit_test` target for each file in the `sources` field."
    },
    "scala_source": {
      "alias": "scala_source",
      "description": "A single Scala source file containing application or library code.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib', 'helloworld/main.py:lib', '3rdparty:reqs#django'].\n\nThis augments any dependencies inferred by Pants, such as by analyzing your imports. Use `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies` or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 peek` on this target to get the final result.\n\nSee https://www.pantsbuild.org/v2.12/docs/targets#target-addresses and https://www.pantsbuild.org/v2.12/docs/targets#target-generation for more about how addresses are formed, including for generated targets. You can also run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list ::` to find all addresses in your project, or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list dir:` to find all addresses defined in that directory.\n\nIf the target is in the same BUILD file, you can leave off the BUILD file path, e.g. `:tgt` instead of `helloworld/subdir:tgt`. For generated first-party addresses, use `./` for the file path, e.g. `./main.py:tgt`; for all other generated targets, use `:tgt#generated_name`.\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "source",
          "default": null,
          "description": "A single file that belongs to this target.\n\nPath is relative to the BUILD file's directory, e.g. `source='example.ext'`.",
          "provider": "",
          "required": true,
          "type_hint": "str"
        },
        {
          "alias": "scalac_plugins",
          "default": null,
          "description": "The names of Scala plugins that this source file requires.\n\nThe plugin must be defined by a corresponding `scalac_plugin` AND `jvm_artifact` target, and must be present in this target's resolve's lockfile.\n\nIf not specified, this will default to the plugins specified in `[scalac].plugins_for_resolve` for this target's resolve.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "resolve",
          "default": null,
          "description": "The resolve from `[jvm].resolves` to use when compiling this target.\n\nIf not defined, will default to `[jvm].default_resolve`.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "experimental_provides_types",
          "default": null,
          "description": "Signals that the specified types should be fulfilled by these source files during dependency inference.\n\nThis allows for specific types within packages that are otherwise inferred as belonging to `jvm_artifact` targets to be unambiguously inferred as belonging to this first-party source.\n\nIf a given type is defined, at least one source file captured by this target must actually provide that symbol.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "jdk",
          "default": null,
          "description": "The major version of the JDK that this target should be built with. If not defined, will default to `[jvm].default_source_jdk`.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "skip_scalafmt",
          "default": "False",
          "description": "If true, don't run `scalafmt` on this target's code.",
          "provider": "pants.backend.experimental.scala.lint.scalafmt",
          "required": false,
          "type_hint": "bool"
        }
      ],
      "provider": "pants.backend.experimental.scala",
      "summary": "A single Scala source file containing application or library code."
    },
    "scala_sources": {
      "alias": "scala_sources",
      "description": "Generate a `scala_source` target for each file in the `sources` field.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "sources",
          "default": "('*.scala', '!*Test.scala', '!*Spec.scala', '!*Suite.scala')",
          "description": "A list of files and globs that belong to this target.\n\nPaths are relative to the BUILD file's directory. You can ignore files/globs by prefixing them with `!`.\n\nExample: `sources=['example.ext', 'test_*.ext', '!test_ignore.ext']`.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "skip_scalafmt",
          "default": "False",
          "description": "If true, don't run `scalafmt` on this target's code.",
          "provider": "pants.backend.experimental.scala.lint.scalafmt",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib', 'helloworld/main.py:lib', '3rdparty:reqs#django'].\n\nThis augments any dependencies inferred by Pants, such as by analyzing your imports. Use `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies` or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 peek` on this target to get the final result.\n\nSee https://www.pantsbuild.org/v2.12/docs/targets#target-addresses and https://www.pantsbuild.org/v2.12/docs/targets#target-generation for more about how addresses are formed, including for generated targets. You can also run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list ::` to find all addresses in your project, or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list dir:` to find all addresses defined in that directory.\n\nIf the target is in the same BUILD file, you can leave off the BUILD file path, e.g. `:tgt` instead of `helloworld/subdir:tgt`. For generated first-party addresses, use `./` for the file path, e.g. `./main.py:tgt`; for all other generated targets, use `:tgt#generated_name`.\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "scalac_plugins",
          "default": null,
          "description": "The names of Scala plugins that this source file requires.\n\nThe plugin must be defined by a corresponding `scalac_plugin` AND `jvm_artifact` target, and must be present in this target's resolve's lockfile.\n\nIf not specified, this will default to the plugins specified in `[scalac].plugins_for_resolve` for this target's resolve.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "resolve",
          "default": null,
          "description": "The resolve from `[jvm].resolves` to use when compiling this target.\n\nIf not defined, will default to `[jvm].default_resolve`.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "jdk",
          "default": null,
          "description": "The major version of the JDK that this target should be built with. If not defined, will default to `[jvm].default_source_jdk`.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "experimental_provides_types",
          "default": null,
          "description": "Signals that the specified types should be fulfilled by these source files during dependency inference.\n\nThis allows for specific types within packages that are otherwise inferred as belonging to `jvm_artifact` targets to be unambiguously inferred as belonging to this first-party source.\n\nIf a given type is defined, at least one source file captured by this target must actually provide that symbol.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        }
      ],
      "provider": "pants.backend.experimental.scala",
      "summary": "Generate a `scala_source` target for each file in the `sources` field."
    },
    "scalac_plugin": {
      "alias": "scalac_plugin",
      "description": "A plugin for `scalac`.\n\nCurrently only thirdparty plugins are supported. To enable a plugin, define this target type, and set the `artifact=` field to the address of a `jvm_artifact` that provides the plugin.\n\nIf the `scalac`-loaded name of the plugin does not match the target's name, additionally set the `plugin_name=` field.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "artifact",
          "default": null,
          "description": "The address of a `jvm_artifact` that defines a plugin for `scalac`.",
          "provider": "",
          "required": true,
          "type_hint": "str"
        },
        {
          "alias": "plugin_name",
          "default": null,
          "description": "The name that `scalac` should use to load the plugin.\n\nIf not set, the plugin name defaults to the target name.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        }
      ],
      "provider": "pants.backend.experimental.scala",
      "summary": "A plugin for `scalac`."
    },
    "scalatest_test": {
      "alias": "scalatest_test",
      "description": "A single Scala test, run with Scalatest.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib', 'helloworld/main.py:lib', '3rdparty:reqs#django'].\n\nThis augments any dependencies inferred by Pants, such as by analyzing your imports. Use `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies` or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 peek` on this target to get the final result.\n\nSee https://www.pantsbuild.org/v2.12/docs/targets#target-addresses and https://www.pantsbuild.org/v2.12/docs/targets#target-generation for more about how addresses are formed, including for generated targets. You can also run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list ::` to find all addresses in your project, or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list dir:` to find all addresses defined in that directory.\n\nIf the target is in the same BUILD file, you can leave off the BUILD file path, e.g. `:tgt` instead of `helloworld/subdir:tgt`. For generated first-party addresses, use `./` for the file path, e.g. `./main.py:tgt`; for all other generated targets, use `:tgt#generated_name`.\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "source",
          "default": null,
          "description": "A single file that belongs to this target.\n\nPath is relative to the BUILD file's directory, e.g. `source='example.ext'`.",
          "provider": "",
          "required": true,
          "type_hint": "str"
        },
        {
          "alias": "scalac_plugins",
          "default": null,
          "description": "The names of Scala plugins that this source file requires.\n\nThe plugin must be defined by a corresponding `scalac_plugin` AND `jvm_artifact` target, and must be present in this target's resolve's lockfile.\n\nIf not specified, this will default to the plugins specified in `[scalac].plugins_for_resolve` for this target's resolve.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "resolve",
          "default": null,
          "description": "The resolve from `[jvm].resolves` to use when compiling this target.\n\nIf not defined, will default to `[jvm].default_resolve`.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "experimental_provides_types",
          "default": null,
          "description": "Signals that the specified types should be fulfilled by these source files during dependency inference.\n\nThis allows for specific types within packages that are otherwise inferred as belonging to `jvm_artifact` targets to be unambiguously inferred as belonging to this first-party source.\n\nIf a given type is defined, at least one source file captured by this target must actually provide that symbol.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "jdk",
          "default": null,
          "description": "The major version of the JDK that this target should be built with. If not defined, will default to `[jvm].default_source_jdk`.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        }
      ],
      "provider": "pants.backend.experimental.scala",
      "summary": "A single Scala test, run with Scalatest."
    },
    "scalatest_tests": {
      "alias": "scalatest_tests",
      "description": "Generate a `scalatest_test` target for each file in the `sources` field (defaults to all files in the directory matching ('*Spec.scala', '*Suite.scala')).",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "sources",
          "default": "('*Spec.scala', '*Suite.scala')",
          "description": "A list of files and globs that belong to this target.\n\nPaths are relative to the BUILD file's directory. You can ignore files/globs by prefixing them with `!`.\n\nExample: `sources=['example.ext', 'test_*.ext', '!test_ignore.ext']`.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib', 'helloworld/main.py:lib', '3rdparty:reqs#django'].\n\nThis augments any dependencies inferred by Pants, such as by analyzing your imports. Use `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies` or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 peek` on this target to get the final result.\n\nSee https://www.pantsbuild.org/v2.12/docs/targets#target-addresses and https://www.pantsbuild.org/v2.12/docs/targets#target-generation for more about how addresses are formed, including for generated targets. You can also run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list ::` to find all addresses in your project, or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list dir:` to find all addresses defined in that directory.\n\nIf the target is in the same BUILD file, you can leave off the BUILD file path, e.g. `:tgt` instead of `helloworld/subdir:tgt`. For generated first-party addresses, use `./` for the file path, e.g. `./main.py:tgt`; for all other generated targets, use `:tgt#generated_name`.\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "scalac_plugins",
          "default": null,
          "description": "The names of Scala plugins that this source file requires.\n\nThe plugin must be defined by a corresponding `scalac_plugin` AND `jvm_artifact` target, and must be present in this target's resolve's lockfile.\n\nIf not specified, this will default to the plugins specified in `[scalac].plugins_for_resolve` for this target's resolve.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "jdk",
          "default": null,
          "description": "The major version of the JDK that this target should be built with. If not defined, will default to `[jvm].default_source_jdk`.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "experimental_provides_types",
          "default": null,
          "description": "Signals that the specified types should be fulfilled by these source files during dependency inference.\n\nThis allows for specific types within packages that are otherwise inferred as belonging to `jvm_artifact` targets to be unambiguously inferred as belonging to this first-party source.\n\nIf a given type is defined, at least one source file captured by this target must actually provide that symbol.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "resolve",
          "default": null,
          "description": "The resolve from `[jvm].resolves` to use when compiling this target.\n\nIf not defined, will default to `[jvm].default_resolve`.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        }
      ],
      "provider": "pants.backend.experimental.scala",
      "summary": "Generate a `scalatest_test` target for each file in the `sources` field (defaults to all files in the directory matching ('*Spec.scala', '*Suite.scala'))."
    },
    "shell_source": {
      "alias": "shell_source",
      "description": "A single Bourne-based shell script, e.g. a Bash script.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib', 'helloworld/main.py:lib', '3rdparty:reqs#django'].\n\nThis augments any dependencies inferred by Pants, such as by analyzing your imports. Use `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies` or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 peek` on this target to get the final result.\n\nSee https://www.pantsbuild.org/v2.12/docs/targets#target-addresses and https://www.pantsbuild.org/v2.12/docs/targets#target-generation for more about how addresses are formed, including for generated targets. You can also run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list ::` to find all addresses in your project, or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list dir:` to find all addresses defined in that directory.\n\nIf the target is in the same BUILD file, you can leave off the BUILD file path, e.g. `:tgt` instead of `helloworld/subdir:tgt`. For generated first-party addresses, use `./` for the file path, e.g. `./main.py:tgt`; for all other generated targets, use `:tgt#generated_name`.\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "source",
          "default": null,
          "description": "A single file that belongs to this target.\n\nPath is relative to the BUILD file's directory, e.g. `source='example.ext'`.",
          "provider": "",
          "required": true,
          "type_hint": "str"
        },
        {
          "alias": "skip_shellcheck",
          "default": "False",
          "description": "If true, don't run Shellcheck on this target's code.",
          "provider": "pants.backend.shell.lint.shellcheck",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_shfmt",
          "default": "False",
          "description": "If true, don't run shfmt on this target's code.",
          "provider": "pants.backend.shell.lint.shfmt",
          "required": false,
          "type_hint": "bool"
        }
      ],
      "provider": "pants.backend.shell",
      "summary": "A single Bourne-based shell script, e.g. a Bash script."
    },
    "shell_sources": {
      "alias": "shell_sources",
      "description": "Generate a `shell_source` target for each file in the `sources` field.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "sources",
          "default": "('*.sh', '!*_test.sh', '!test_*.sh', '!tests.sh')",
          "description": "A list of files and globs that belong to this target.\n\nPaths are relative to the BUILD file's directory. You can ignore files/globs by prefixing them with `!`.\n\nExample: `sources=['example.ext', 'test_*.ext', '!test_ignore.ext']`.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "overrides",
          "default": null,
          "description": "Override the field values for generated `shell_source` targets.\n\nExpects a dictionary of relative file paths and globs to a dictionary for the overrides. You may either use a string for a single path / glob, or a string tuple for multiple paths / globs. Each override is a dictionary of field names to the overridden value.\n\nFor example:\n\n```\noverrides={\n  \"foo.sh\": {\"skip_shellcheck\": True]},\n  \"bar.sh\": {\"skip_shfmt\": True]},\n  (\"foo.sh\", \"bar.sh\"): {\"tags\": [\"linter_disabled\"]},\n}\n```\n\nFile paths and globs are relative to the BUILD file's directory. Every overridden file is validated to belong to this target's `sources` field.\n\nIf you'd like to override a field's value for every `shell_source` target generated by this target, change the field directly on this target rather than using the `overrides` field.\n\nYou can specify the same file name in multiple keys, so long as you don't override the same field more than one time for the file.",
          "provider": "",
          "required": false,
          "type_hint": "Dict[Union[str, Tuple[str, ...]], Dict[str, Any]] | None"
        },
        {
          "alias": "skip_shellcheck",
          "default": "False",
          "description": "If true, don't run Shellcheck on this target's code.",
          "provider": "pants.backend.shell.lint.shellcheck",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_shfmt",
          "default": "False",
          "description": "If true, don't run shfmt on this target's code.",
          "provider": "pants.backend.shell.lint.shfmt",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib', 'helloworld/main.py:lib', '3rdparty:reqs#django'].\n\nThis augments any dependencies inferred by Pants, such as by analyzing your imports. Use `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies` or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 peek` on this target to get the final result.\n\nSee https://www.pantsbuild.org/v2.12/docs/targets#target-addresses and https://www.pantsbuild.org/v2.12/docs/targets#target-generation for more about how addresses are formed, including for generated targets. You can also run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list ::` to find all addresses in your project, or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list dir:` to find all addresses defined in that directory.\n\nIf the target is in the same BUILD file, you can leave off the BUILD file path, e.g. `:tgt` instead of `helloworld/subdir:tgt`. For generated first-party addresses, use `./` for the file path, e.g. `./main.py:tgt`; for all other generated targets, use `:tgt#generated_name`.\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        }
      ],
      "provider": "pants.backend.shell",
      "summary": "Generate a `shell_source` target for each file in the `sources` field."
    },
    "shunit2_test": {
      "alias": "shunit2_test",
      "description": "A single test file for Bourne-based shell scripts using the shunit2 test framework.\n\nTo use, add tests to your file per https://github.com/kward/shunit2/. Specify the shell to run with by either setting the field `shell` or including a shebang. To test the same file with multiple shells, create multiple `shunit2_tests` targets, one for each shell.\n\nPants will automatically download the `shunit2` bash script and add `source ./shunit2` to your test for you. If you already have `source ./shunit2`, Pants will overwrite it to use the correct relative path.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "source",
          "default": null,
          "description": "A single file that belongs to this target.\n\nPath is relative to the BUILD file's directory, e.g. `source='example.ext'`.",
          "provider": "",
          "required": true,
          "type_hint": "str"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib', 'helloworld/main.py:lib', '3rdparty:reqs#django'].\n\nThis augments any dependencies inferred by Pants, such as by analyzing your imports. Use `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies` or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 peek` on this target to get the final result.\n\nSee https://www.pantsbuild.org/v2.12/docs/targets#target-addresses and https://www.pantsbuild.org/v2.12/docs/targets#target-generation for more about how addresses are formed, including for generated targets. You can also run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list ::` to find all addresses in your project, or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list dir:` to find all addresses defined in that directory.\n\nIf the target is in the same BUILD file, you can leave off the BUILD file path, e.g. `:tgt` instead of `helloworld/subdir:tgt`. For generated first-party addresses, use `./` for the file path, e.g. `./main.py:tgt`; for all other generated targets, use `:tgt#generated_name`.\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "timeout",
          "default": null,
          "description": "A timeout (in seconds) used by each test file belonging to this target.\n\nIf unset, the test will never time out.",
          "provider": "",
          "required": false,
          "type_hint": "int | None"
        },
        {
          "alias": "skip_tests",
          "default": "False",
          "description": "If true, don't run this target's tests.",
          "provider": "",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "shell",
          "default": null,
          "description": "Which shell to run the tests with. If unspecified, Pants will look for a shebang line.",
          "provider": "",
          "required": false,
          "type_hint": "'bash' | 'dash' | 'ksh' | 'pdksh' | 'sh' | 'zsh' | None"
        },
        {
          "alias": "runtime_package_dependencies",
          "default": null,
          "description": "Addresses to targets that can be built with the `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 package` goal and whose resulting artifacts should be included in the test run.\n\nPants will build the artifacts as if you had run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 package`. It will include the results in your test's chroot, using the same name they would normally have, but without the `--distdir` prefix (e.g. `dist/`).\n\nYou can include anything that can be built by `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 package`, e.g. a `pex_binary`, `python_awslambda`, or an `archive`.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "skip_shellcheck",
          "default": "False",
          "description": "If true, don't run Shellcheck on this target's code.",
          "provider": "pants.backend.shell.lint.shellcheck",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_shfmt",
          "default": "False",
          "description": "If true, don't run shfmt on this target's code.",
          "provider": "pants.backend.shell.lint.shfmt",
          "required": false,
          "type_hint": "bool"
        }
      ],
      "provider": "pants.backend.shell",
      "summary": "A single test file for Bourne-based shell scripts using the shunit2 test framework."
    },
    "shunit2_tests": {
      "alias": "shunit2_tests",
      "description": "Generate a `shunit2_test` target for each file in the `sources` field.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "sources",
          "default": "('*_test.sh', 'test_*.sh', 'tests.sh')",
          "description": "A list of files and globs that belong to this target.\n\nPaths are relative to the BUILD file's directory. You can ignore files/globs by prefixing them with `!`.\n\nExample: `sources=['example.ext', 'test_*.ext', '!test_ignore.ext']`.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "overrides",
          "default": null,
          "description": "Override the field values for generated `shunit2_test` targets.\n\nExpects a dictionary of relative file paths and globs to a dictionary for the overrides. You may either use a string for a single path / glob, or a string tuple for multiple paths / globs. Each override is a dictionary of field names to the overridden value.\n\nFor example:\n\n```\noverrides={\n  \"foo_test.sh\": {\"timeout\": 120]},\n  \"bar_test.sh\": {\"timeout\": 200]},\n  (\"foo_test.sh\", \"bar_test.sh\"): {\"tags\": [\"slow_tests\"]},\n}\n```\n\nFile paths and globs are relative to the BUILD file's directory. Every overridden file is validated to belong to this target's `sources` field.\n\nIf you'd like to override a field's value for every `shunit2_test` target generated by this target, change the field directly on this target rather than using the `overrides` field.\n\nYou can specify the same file name in multiple keys, so long as you don't override the same field more than one time for the file.",
          "provider": "",
          "required": false,
          "type_hint": "Dict[Union[str, Tuple[str, ...]], Dict[str, Any]] | None"
        },
        {
          "alias": "skip_shellcheck",
          "default": "False",
          "description": "If true, don't run Shellcheck on this target's code.",
          "provider": "pants.backend.shell.lint.shellcheck",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_shfmt",
          "default": "False",
          "description": "If true, don't run shfmt on this target's code.",
          "provider": "pants.backend.shell.lint.shfmt",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib', 'helloworld/main.py:lib', '3rdparty:reqs#django'].\n\nThis augments any dependencies inferred by Pants, such as by analyzing your imports. Use `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies` or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 peek` on this target to get the final result.\n\nSee https://www.pantsbuild.org/v2.12/docs/targets#target-addresses and https://www.pantsbuild.org/v2.12/docs/targets#target-generation for more about how addresses are formed, including for generated targets. You can also run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list ::` to find all addresses in your project, or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list dir:` to find all addresses defined in that directory.\n\nIf the target is in the same BUILD file, you can leave off the BUILD file path, e.g. `:tgt` instead of `helloworld/subdir:tgt`. For generated first-party addresses, use `./` for the file path, e.g. `./main.py:tgt`; for all other generated targets, use `:tgt#generated_name`.\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "timeout",
          "default": null,
          "description": "A timeout (in seconds) used by each test file belonging to this target.\n\nIf unset, the test will never time out.",
          "provider": "",
          "required": false,
          "type_hint": "int | None"
        },
        {
          "alias": "skip_tests",
          "default": "False",
          "description": "If true, don't run this target's tests.",
          "provider": "",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "shell",
          "default": null,
          "description": "Which shell to run the tests with. If unspecified, Pants will look for a shebang line.",
          "provider": "",
          "required": false,
          "type_hint": "'bash' | 'dash' | 'ksh' | 'pdksh' | 'sh' | 'zsh' | None"
        },
        {
          "alias": "runtime_package_dependencies",
          "default": null,
          "description": "Addresses to targets that can be built with the `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 package` goal and whose resulting artifacts should be included in the test run.\n\nPants will build the artifacts as if you had run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 package`. It will include the results in your test's chroot, using the same name they would normally have, but without the `--distdir` prefix (e.g. `dist/`).\n\nYou can include anything that can be built by `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 package`, e.g. a `pex_binary`, `python_awslambda`, or an `archive`.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        }
      ],
      "provider": "pants.backend.shell",
      "summary": "Generate a `shunit2_test` target for each file in the `sources` field."
    },
    "target": {
      "alias": "target",
      "description": "A generic target with no specific type.\n\nThis can be used as a generic \"bag of dependencies\", i.e. you can group several different targets into one single target so that your other targets only need to depend on one thing.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib', 'helloworld/main.py:lib', '3rdparty:reqs#django'].\n\nThis augments any dependencies inferred by Pants, such as by analyzing your imports. Use `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies` or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 peek` on this target to get the final result.\n\nSee https://www.pantsbuild.org/v2.12/docs/targets#target-addresses and https://www.pantsbuild.org/v2.12/docs/targets#target-generation for more about how addresses are formed, including for generated targets. You can also run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list ::` to find all addresses in your project, or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list dir:` to find all addresses defined in that directory.\n\nIf the target is in the same BUILD file, you can leave off the BUILD file path, e.g. `:tgt` instead of `helloworld/subdir:tgt`. For generated first-party addresses, use `./` for the file path, e.g. `./main.py:tgt`; for all other generated targets, use `:tgt#generated_name`.\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        }
      ],
      "provider": "pants.core",
      "summary": "A generic target with no specific type."
    },
    "terraform_module": {
      "alias": "terraform_module",
      "description": "A single Terraform module corresponding to a directory.\n\nThere must only be one `terraform_module` in a directory.\n\nUse `terraform_modules` to generate `terraform_module` targets for less boilerplate.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib', 'helloworld/main.py:lib', '3rdparty:reqs#django'].\n\nThis augments any dependencies inferred by Pants, such as by analyzing your imports. Use `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies` or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 peek` on this target to get the final result.\n\nSee https://www.pantsbuild.org/v2.12/docs/targets#target-addresses and https://www.pantsbuild.org/v2.12/docs/targets#target-generation for more about how addresses are formed, including for generated targets. You can also run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list ::` to find all addresses in your project, or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list dir:` to find all addresses defined in that directory.\n\nIf the target is in the same BUILD file, you can leave off the BUILD file path, e.g. `:tgt` instead of `helloworld/subdir:tgt`. For generated first-party addresses, use `./` for the file path, e.g. `./main.py:tgt`; for all other generated targets, use `:tgt#generated_name`.\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "sources",
          "default": "('*.tf',)",
          "description": "A list of files and globs that belong to this target.\n\nPaths are relative to the BUILD file's directory. You can ignore files/globs by prefixing them with `!`.\n\nExample: `sources=['example.ext', 'test_*.ext', '!test_ignore.ext']`.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        }
      ],
      "provider": "pants.backend.experimental.terraform",
      "summary": "A single Terraform module corresponding to a directory."
    },
    "thrift_source": {
      "alias": "thrift_source",
      "description": "A single Thrift file used to generate various languages.\n\nSee language-specific docs:     Python: https://www.pantsbuild.org/v2.12/docs/thrift-python",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib', 'helloworld/main.py:lib', '3rdparty:reqs#django'].\n\nThis augments any dependencies inferred by Pants, such as by analyzing your imports. Use `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies` or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 peek` on this target to get the final result.\n\nSee https://www.pantsbuild.org/v2.12/docs/targets#target-addresses and https://www.pantsbuild.org/v2.12/docs/targets#target-generation for more about how addresses are formed, including for generated targets. You can also run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list ::` to find all addresses in your project, or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list dir:` to find all addresses defined in that directory.\n\nIf the target is in the same BUILD file, you can leave off the BUILD file path, e.g. `:tgt` instead of `helloworld/subdir:tgt`. For generated first-party addresses, use `./` for the file path, e.g. `./main.py:tgt`; for all other generated targets, use `:tgt#generated_name`.\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "source",
          "default": null,
          "description": "A single file that belongs to this target.\n\nPath is relative to the BUILD file's directory, e.g. `source='example.ext'`.",
          "provider": "",
          "required": true,
          "type_hint": "str"
        },
        {
          "alias": "python_resolve",
          "default": null,
          "description": "The resolve from `[python].resolves` to use.\n\nIf not defined, will default to `[python].default_resolve`.\n\nAll dependencies must share the same value for their `resolve` field.",
          "provider": "pants.backend.codegen.thrift.apache.python",
          "required": false,
          "type_hint": "str | None"
        }
      ],
      "provider": "pants.backend.codegen.thrift.apache.python",
      "summary": "A single Thrift file used to generate various languages."
    },
    "thrift_sources": {
      "alias": "thrift_sources",
      "description": "Generate a `thrift_source` target for each file in the `sources` field.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --tag='integration_test' test ::` to only run on targets with that tag.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list --documented ::` to see all targets with descriptions.",
          "provider": "",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "sources",
          "default": "('*.thrift',)",
          "description": "A list of files and globs that belong to this target.\n\nPaths are relative to the BUILD file's directory. You can ignore files/globs by prefixing them with `!`.\n\nExample: `sources=['example.ext', 'test_*.ext', '!test_ignore.ext']`.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "overrides",
          "default": null,
          "description": "Override the field values for generated `thrift_source` targets.\n\nExpects a dictionary of relative file paths and globs to a dictionary for the overrides. You may either use a string for a single path / glob, or a string tuple for multiple paths / globs. Each override is a dictionary of field names to the overridden value.\n\nFor example:\n\n```\noverrides={\n  \"bar.thrift\": {\"description\": \"our user model\"]},\n  (\"foo.thrift\", \"bar.thrift\"): {\"tags\": [\"overridden\"]},\n}\n```\n\nFile paths and globs are relative to the BUILD file's directory. Every overridden file is validated to belong to this target's `sources` field.\n\nIf you'd like to override a field's value for every `thrift_source` target generated by this target, change the field directly on this target rather than using the `overrides` field.\n\nYou can specify the same file name in multiple keys, so long as you don't override the same field more than one time for the file.",
          "provider": "",
          "required": false,
          "type_hint": "Dict[Union[str, Tuple[str, ...]], Dict[str, Any]] | None"
        },
        {
          "alias": "python_resolve",
          "default": null,
          "description": "The resolve from `[python].resolves` to use.\n\nIf not defined, will default to `[python].default_resolve`.\n\nAll dependencies must share the same value for their `resolve` field.",
          "provider": "pants.backend.codegen.thrift.apache.python",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib', 'helloworld/main.py:lib', '3rdparty:reqs#django'].\n\nThis augments any dependencies inferred by Pants, such as by analyzing your imports. Use `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies` or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 peek` on this target to get the final result.\n\nSee https://www.pantsbuild.org/v2.12/docs/targets#target-addresses and https://www.pantsbuild.org/v2.12/docs/targets#target-generation for more about how addresses are formed, including for generated targets. You can also run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list ::` to find all addresses in your project, or `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 list dir:` to find all addresses defined in that directory.\n\nIf the target is in the same BUILD file, you can leave off the BUILD file path, e.g. `:tgt` instead of `helloworld/subdir:tgt`. For generated first-party addresses, use `./` for the file path, e.g. `./main.py:tgt`; for all other generated targets, use `:tgt#generated_name`.\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "provider": "",
          "required": false,
          "type_hint": "Iterable[str] | None"
        }
      ],
      "provider": "pants.backend.codegen.thrift.apache.python",
      "summary": "Generate a `thrift_source` target for each file in the `sources` field."
    }
  },
  "rule_output_type_to_rule_infos": {
    "AddressToDependees": [
      {
        "description": "Map all targets to their dependees",
        "help": null,
        "input_gets": [
          "Get(Addresses, DependenciesRequest, ..)"
        ],
        "input_types": [
          "AllUnexpandedTargets"
        ],
        "name": "pants.backend.project_info.dependees.map_addresses_to_dependees",
        "output_desc": "AddressToDependees(mapping: pants.util.frozendict.FrozenDict[pants.build_graph.address.Address, pants.util.ordered_set.FrozenOrderedSet[pants.build_graph.address.Address]])",
        "output_type": "AddressToDependees",
        "provider": "pants.backend.project_info"
      }
    ],
    "AllAssetTargets": [
      {
        "description": "Find all assets in project",
        "help": null,
        "input_gets": [],
        "input_types": [
          "AllTargets",
          "AllAssetTargetsRequest"
        ],
        "name": "pants.core.target_types.find_all_assets",
        "output_desc": "AllAssetTargets(resources: 'tuple[Target, ...]', files: 'tuple[Target, ...]')",
        "output_type": "AllAssetTargets",
        "provider": "pants.core"
      }
    ],
    "AllAssetTargetsByPath": [
      {
        "description": "Mapping assets by path",
        "help": null,
        "input_gets": [],
        "input_types": [
          "AllAssetTargets"
        ],
        "name": "pants.core.target_types.map_assets_by_path",
        "output_desc": "AllAssetTargetsByPath(resources: 'FrozenDict[PurePath, frozenset[Target]]', files: 'FrozenDict[PurePath, frozenset[Target]]')",
        "output_type": "AllAssetTargetsByPath",
        "provider": "pants.core"
      }
    ],
    "AllGoTargets": [
      {
        "description": "Find all Go targets in project",
        "help": null,
        "input_gets": [],
        "input_types": [
          "AllTargets"
        ],
        "name": "pants.backend.go.target_type_rules.find_all_go_targets",
        "output_desc": null,
        "output_type": "AllGoTargets",
        "provider": "pants.backend.experimental.go"
      }
    ],
    "AllHelmArtifactTargets": [
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "AllTargets"
        ],
        "name": "pants.backend.helm.target_types.all_helm_artifact_targets",
        "output_desc": null,
        "output_type": "AllHelmArtifactTargets",
        "provider": "pants.backend.experimental.helm"
      }
    ],
    "AllHelmChartTargets": [
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "AllTargets"
        ],
        "name": "pants.backend.helm.target_types.all_helm_chart_targets",
        "output_desc": null,
        "output_type": "AllHelmChartTargets",
        "provider": "pants.backend.experimental.helm"
      }
    ],
    "AllHelmUnitTestTestTargets": [
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "AllTargets"
        ],
        "name": "pants.backend.helm.target_types.all_helm_unittest_test_targets",
        "output_desc": null,
        "output_type": "AllHelmUnitTestTestTargets",
        "provider": "pants.backend.experimental.helm"
      }
    ],
    "AllJavaTargets": [
      {
        "description": "Find all Java targets in project",
        "help": null,
        "input_gets": [],
        "input_types": [
          "AllTargets"
        ],
        "name": "pants.backend.java.dependency_inference.symbol_mapper.find_all_java_targets",
        "output_desc": null,
        "output_type": "AllJavaTargets",
        "provider": "pants.backend.experimental.java"
      }
    ],
    "AllJvmArtifactTargets": [
      {
        "description": "Find all jvm_artifact targets in project",
        "help": null,
        "input_gets": [],
        "input_types": [
          "AllTargets"
        ],
        "name": "pants.jvm.dependency_inference.artifact_mapper.find_all_jvm_artifact_targets",
        "output_desc": null,
        "output_type": "AllJvmArtifactTargets",
        "provider": "pants.backend.experimental.java"
      }
    ],
    "AllJvmTypeProvidingTargets": [
      {
        "description": "Find all targets with experimental_provides fields in project",
        "help": null,
        "input_gets": [],
        "input_types": [
          "AllTargets"
        ],
        "name": "pants.jvm.dependency_inference.artifact_mapper.find_all_jvm_provides_fields",
        "output_desc": null,
        "output_type": "AllJvmTypeProvidingTargets",
        "provider": "pants.backend.experimental.java"
      }
    ],
    "AllKotlinTargets": [
      {
        "description": "Find all Kotlin targets in project",
        "help": null,
        "input_gets": [],
        "input_types": [
          "AllTargets"
        ],
        "name": "pants.backend.kotlin.dependency_inference.symbol_mapper.find_all_kotlin_targets",
        "output_desc": null,
        "output_type": "AllKotlinTargets",
        "provider": "pants.backend.experimental.kotlin"
      }
    ],
    "AllKotlincPluginTargets": [
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "AllTargets"
        ],
        "name": "pants.backend.kotlin.compile.kotlinc_plugins.all_kotlinc_plugin_targets",
        "output_desc": null,
        "output_type": "AllKotlincPluginTargets",
        "provider": "pants.backend.experimental.kotlin"
      }
    ],
    "AllOwnedSources": [
      {
        "description": "Determine all files already owned by targets",
        "help": null,
        "input_gets": [
          "Get(SourcesPaths, SourcesPathsRequest, ..)"
        ],
        "input_types": [
          "AllUnexpandedTargets"
        ],
        "name": "pants.core.goals.tailor.determine_all_owned_sources",
        "output_desc": "All files in the project already owned by targets.",
        "output_type": "AllOwnedSources",
        "provider": "pants.core"
      }
    ],
    "AllProtobufTargets": [
      {
        "description": "Find all Protobuf targets in project",
        "help": null,
        "input_gets": [],
        "input_types": [
          "AllTargets"
        ],
        "name": "pants.backend.codegen.protobuf.target_types.find_all_protobuf_targets",
        "output_desc": null,
        "output_type": "AllProtobufTargets",
        "provider": "pants.backend.codegen.protobuf.python"
      }
    ],
    "AllPytestPluginSetups": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(WrappedTarget, Address, ..)",
          "Get(PytestPluginSetup, PytestPluginSetupRequest, ..)"
        ],
        "input_types": [
          "AllPytestPluginSetupsRequest",
          "UnionMembership"
        ],
        "name": "pants.backend.python.goals.pytest_runner.run_all_setup_plugins",
        "output_desc": null,
        "output_type": "AllPytestPluginSetups",
        "provider": "pants.backend.python"
      }
    ],
    "AllPythonTargets": [
      {
        "description": "Find all Python targets in project",
        "help": null,
        "input_gets": [],
        "input_types": [
          "AllTargets"
        ],
        "name": "pants.backend.python.dependency_inference.module_mapper.find_all_python_projects",
        "output_desc": "AllPythonTargets(first_party: 'tuple[Target, ...]', third_party: 'tuple[Target, ...]')",
        "output_type": "AllPythonTargets",
        "provider": "pants.backend.python"
      }
    ],
    "AllScalaPluginTargets": [
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "AllTargets"
        ],
        "name": "pants.backend.scala.compile.scalac_plugins.all_scala_plugin_targets",
        "output_desc": null,
        "output_type": "AllScalaPluginTargets",
        "provider": "pants.backend.experimental.scala"
      }
    ],
    "AllScalaTargets": [
      {
        "description": "Find all Scala targets in project",
        "help": null,
        "input_gets": [],
        "input_types": [
          "AllTargets"
        ],
        "name": "pants.backend.scala.dependency_inference.symbol_mapper.find_all_scala_targets",
        "output_desc": null,
        "output_type": "AllScalaTargets",
        "provider": "pants.backend.experimental.scala"
      }
    ],
    "AllShellTargets": [
      {
        "description": "Find all Shell targets in project",
        "help": null,
        "input_gets": [],
        "input_types": [
          "AllTargets"
        ],
        "name": "pants.backend.shell.dependency_inference.find_all_shell_targets",
        "output_desc": null,
        "output_type": "AllShellTargets",
        "provider": "pants.backend.shell"
      }
    ],
    "AllSourceRoots": [
      {
        "description": "Compute all source roots",
        "help": null,
        "input_gets": [
          "Get(Paths, PathGlobs, ..)",
          "Get(OptionalSourceRoot, SourceRootRequest, ..)"
        ],
        "input_types": [
          "SourceRootConfig"
        ],
        "name": "pants.source.source_root.all_roots",
        "output_desc": null,
        "output_type": "AllSourceRoots",
        "provider": "pants.core"
      }
    ],
    "AllThirdPartyPackages": [
      {
        "description": "Download and analyze all third-party Go packages",
        "help": null,
        "input_gets": [
          "Get(ModuleDescriptors, ModuleDescriptorsRequest, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(AnalyzedThirdPartyModule, AnalyzeThirdPartyModuleRequest, ..)"
        ],
        "input_types": [
          "AllThirdPartyPackagesRequest"
        ],
        "name": "pants.backend.go.util_rules.third_party_pkg.download_and_analyze_third_party_packages",
        "output_desc": "All the packages downloaded from a go.mod, along with a digest of the downloaded files.\n\nThe digest has files in the format `gopath/pkg/mod`, which is what `GoSdkProcess` sets `GOPATH`\nto. This means that you can include the digest in a process and Go will properly consume it as\nthe `GOPATH`.",
        "output_type": "AllThirdPartyPackages",
        "provider": "pants.backend.experimental.go"
      }
    ],
    "AllThriftTargets": [
      {
        "description": "Find all Thrift targets in project",
        "help": null,
        "input_gets": [],
        "input_types": [
          "AllTargets"
        ],
        "name": "pants.backend.codegen.thrift.target_types.find_all_thrift_targets",
        "output_desc": null,
        "output_type": "AllThriftTargets",
        "provider": "pants.backend.codegen.thrift.apache.python"
      }
    ],
    "AnalyzeScalaSourceRequest": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(WrappedTarget, Address, ..)",
          "Get(SourceFiles, SourceFilesRequest, ..)"
        ],
        "input_types": [
          "ScalaSubsystem",
          "JvmSubsystem",
          "Scalac",
          "SourceFilesRequest"
        ],
        "name": "pants.backend.scala.dependency_inference.scala_parser.create_analyze_scala_source_request",
        "output_desc": "AnalyzeScalaSourceRequest(source_files: 'SourceFiles', scala_version: 'str', source3: 'bool')",
        "output_type": "AnalyzeScalaSourceRequest",
        "provider": "pants.backend.experimental.scala"
      }
    ],
    "AnalyzedThirdPartyModule": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(ProcessResult, GoSdkProcess, ..)",
          "Get(Snapshot, DigestSubset, ..)",
          "Get(ProcessResult, Process, ..)",
          "Get(FallibleThirdPartyPkgAnalysis, AnalyzeThirdPartyPackageRequest, ..)"
        ],
        "input_types": [
          "AnalyzeThirdPartyModuleRequest",
          "PackageAnalyzerSetup",
          "GolangSubsystem"
        ],
        "name": "pants.backend.go.util_rules.third_party_pkg.analyze_go_third_party_module",
        "output_desc": "AnalyzedThirdPartyModule(packages: 'FrozenOrderedSet[ThirdPartyPkgAnalysis]')",
        "output_type": "AnalyzedThirdPartyModule",
        "provider": "pants.backend.experimental.go"
      }
    ],
    "AncestorFiles": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Snapshot, PathGlobs, ..)"
        ],
        "input_types": [
          "AncestorFilesRequest"
        ],
        "name": "pants.backend.python.util_rules.ancestor_files.find_ancestor_files",
        "output_desc": "Any ancestor files found.",
        "output_type": "AncestorFiles",
        "provider": "pants.backend.python"
      }
    ],
    "AnonymousTelemetry": [
      {
        "description": null,
        "help": "Options related to sending anonymous stats to the Pants project, to aid development.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_anonymous_telemetry",
        "output_desc": null,
        "output_type": "AnonymousTelemetry",
        "provider": "pants.core"
      }
    ],
    "ApacheThriftSetup": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Environment, EnvironmentRequest, ..)",
          "Get(BinaryPaths, BinaryPathRequest, ..)",
          "Get(ProcessResult, Process, ..)"
        ],
        "input_types": [
          "ApacheThriftSubsystem"
        ],
        "name": "pants.backend.codegen.thrift.apache.rules.setup_thrift_tool",
        "output_desc": "ApacheThriftSetup(path: 'str')",
        "output_type": "ApacheThriftSetup",
        "provider": "pants.backend.codegen.thrift.apache.python"
      }
    ],
    "ApacheThriftSubsystem": [
      {
        "description": null,
        "help": "Apache Thrift IDL compiler (https://thrift.apache.org/).",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_apache_thrift",
        "output_desc": null,
        "output_type": "ApacheThriftSubsystem",
        "provider": "pants.backend.codegen.thrift.apache.python"
      }
    ],
    "ArtifactRequirements": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Address, AddressInput, ..)",
          "Get(Targets, Addresses, ..)"
        ],
        "input_types": [
          "GatherJvmCoordinatesRequest"
        ],
        "name": "pants.jvm.resolve.jvm_tool.gather_coordinates_for_jvm_lockfile",
        "output_desc": "An ordered list of Coordinates used as requirements.",
        "output_type": "ArtifactRequirements",
        "provider": "pants.backend.experimental.java"
      }
    ],
    "AssemblyPostCompilation": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Digest, MergeDigests, ..)",
          "Get(GoSdkToolIDResult, GoSdkToolIDRequest, ..)",
          "Get(FallibleProcessResult, GoSdkProcess, ..)"
        ],
        "input_types": [
          "AssemblyPostCompilationRequest"
        ],
        "name": "pants.backend.go.util_rules.assembly.link_assembly_post_compilation",
        "output_desc": "AssemblyPostCompilation(result: 'FallibleProcessResult', merged_output_digest: 'Digest | None')",
        "output_type": "AssemblyPostCompilation",
        "provider": "pants.backend.experimental.go"
      }
    ],
    "Autoflake": [
      {
        "description": null,
        "help": "The Autoflake Python code formatter (https://github.com/myint/autoflake).",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_autoflake",
        "output_desc": null,
        "output_type": "Autoflake",
        "provider": "pants.backend.experimental.python.lint.autoflake"
      }
    ],
    "AvailableThirdPartyArtifacts": [
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "AllJvmArtifactTargets",
          "JvmSubsystem"
        ],
        "name": "pants.jvm.dependency_inference.artifact_mapper.find_available_third_party_artifacts",
        "output_desc": "Maps coordinates and resolve names to target `Address`es and declared packages.",
        "output_type": "AvailableThirdPartyArtifacts",
        "provider": "pants.backend.experimental.java"
      }
    ],
    "BSPBuildTargetInternal": [
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "_ParseOneBSPMappingRequest"
        ],
        "name": "pants.bsp.util_rules.targets.parse_one_bsp_mapping",
        "output_desc": "BSPBuildTargetInternal(name: 'str', specs: 'Specs', definition: 'BSPTargetDefinition')",
        "output_type": "BSPBuildTargetInternal",
        "provider": "pants.core"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "BuildTargetIdentifier",
          "BSPBuildTargets"
        ],
        "name": "pants.bsp.util_rules.targets.resolve_bsp_build_target_identifier",
        "output_desc": "BSPBuildTargetInternal(name: 'str', specs: 'Specs', definition: 'BSPTargetDefinition')",
        "output_type": "BSPBuildTargetInternal",
        "provider": "pants.core"
      }
    ],
    "BSPBuildTargetSourcesInfo": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Targets, BSPBuildTargetInternal, ..)",
          "Get(SourcesPaths, SourcesPathsRequest, ..)",
          "Get(SourceRootsResult, SourceRootsRequest, ..)"
        ],
        "input_types": [
          "BSPBuildTargetInternal"
        ],
        "name": "pants.bsp.util_rules.targets.resolve_bsp_build_target_source_roots",
        "output_desc": "Source files and roots for a BSP build target.\n\nIt is a separate class so that it is computed lazily only when called for by an RPC call.",
        "output_type": "BSPBuildTargetSourcesInfo",
        "provider": "pants.core"
      }
    ],
    "BSPBuildTargets": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(DigestContents, PathGlobs, ..)",
          "Get(BSPBuildTargetInternal, _ParseOneBSPMappingRequest, ..)"
        ],
        "input_types": [
          "BSPGoal"
        ],
        "name": "pants.bsp.util_rules.targets.materialize_bsp_build_targets",
        "output_desc": "BSPBuildTargets(targets_mapping: 'FrozenDict[str, BSPBuildTargetInternal]')",
        "output_type": "BSPBuildTargets",
        "provider": "pants.core"
      }
    ],
    "BSPBuildTargetsMetadataResult": [
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "JavaBSPBuildTargetsMetadataRequest"
        ],
        "name": "pants.backend.java.bsp.rules.bsp_resolve_java_metadata",
        "output_desc": "Response type for a BSPBuildTargetsMetadataRequest.",
        "output_type": "BSPBuildTargetsMetadataResult",
        "provider": "pants.backend.experimental.java"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(MaterializeScalaRuntimeJarsResult, MaterializeScalaRuntimeJarsRequest, ..)"
        ],
        "input_types": [
          "ScalaBSPBuildTargetsMetadataRequest",
          "JvmSubsystem",
          "ScalaSubsystem",
          "BuildRoot"
        ],
        "name": "pants.backend.scala.bsp.rules.bsp_resolve_scala_metadata",
        "output_desc": "Response type for a BSPBuildTargetsMetadataRequest.",
        "output_type": "BSPBuildTargetsMetadataResult",
        "provider": "pants.backend.experimental.scala"
      }
    ],
    "BSPCompileResult": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Targets, BSPBuildTargetInternal, ..)",
          "Get(BSPCompileResult, BSPCompileRequest, ..)",
          "Get(Digest, MergeDigests, ..)"
        ],
        "input_types": [
          "CompileOneBSPTargetRequest",
          "BSPContext",
          "UnionMembership"
        ],
        "name": "pants.bsp.util_rules.compile.compile_bsp_target",
        "output_desc": "Result of compilation of a target capable of target compilation.",
        "output_type": "BSPCompileResult",
        "provider": "pants.core"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(CoarsenedTargets, Addresses, ..)",
          "Get(CoursierResolveKey, CoarsenedTargets, ..)",
          "Get(FallibleClasspathEntry, ClasspathEntryRequest, ..)",
          "Get(DigestEntries, Digest, ..)",
          "Get(Digest, CreateDigest, ..)"
        ],
        "input_types": [
          "JavaBSPCompileRequest",
          "ClasspathEntryRequestFactory"
        ],
        "name": "pants.backend.java.bsp.rules.bsp_java_compile_request",
        "output_desc": "Result of compilation of a target capable of target compilation.",
        "output_type": "BSPCompileResult",
        "provider": "pants.backend.experimental.java"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(CoarsenedTargets, Addresses, ..)",
          "Get(CoursierResolveKey, CoarsenedTargets, ..)",
          "Get(FallibleClasspathEntry, ClasspathEntryRequest, ..)",
          "Get(DigestEntries, Digest, ..)",
          "Get(Digest, CreateDigest, ..)"
        ],
        "input_types": [
          "ScalaBSPCompileRequest",
          "ClasspathEntryRequestFactory"
        ],
        "name": "pants.backend.scala.bsp.rules.bsp_scala_compile_request",
        "output_desc": "Result of compilation of a target capable of target compilation.",
        "output_type": "BSPCompileResult",
        "provider": "pants.backend.experimental.scala"
      }
    ],
    "BSPContext": [
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "SessionValues"
        ],
        "name": "pants.bsp.rules.bsp_context",
        "output_desc": "Wrapper type to provide BSP rules with the ability to interact with the BSP protocol\ndriver.",
        "output_type": "BSPContext",
        "provider": "pants.core"
      }
    ],
    "BSPDependencyModulesResult": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(CoarsenedTargets, Addresses, ..)",
          "Get(CoursierResolveKey, CoarsenedTargets, ..)",
          "Get(CoursierResolvedLockfile, CoursierResolveKey, ..)",
          "Get(TransitiveTargets, TransitiveTargetsRequest, ..)",
          "Get(Digest, CreateDigest, ..)",
          "Get(Digest, AddPrefix, ..)"
        ],
        "input_types": [
          "ScalaBSPDependencyModulesRequest",
          "BuildRoot"
        ],
        "name": "pants.backend.scala.bsp.rules.scala_bsp_dependency_modules",
        "output_desc": "BSPDependencyModulesResult(modules: 'tuple[DependencyModule, ...]', digest: 'Digest' = Digest('e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855', 0))",
        "output_type": "BSPDependencyModulesResult",
        "provider": "pants.backend.experimental.scala"
      }
    ],
    "BSPGoal": [
      {
        "description": null,
        "help": "Setup repository for Build Server Protocol (https://build-server-protocol.github.io/).",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_experimental_bsp",
        "output_desc": null,
        "output_type": "BSPGoal",
        "provider": "pants.core"
      }
    ],
    "Bandit": [
      {
        "description": null,
        "help": "A tool for finding security issues in Python code (https://bandit.readthedocs.io).",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_bandit",
        "output_desc": null,
        "output_type": "Bandit",
        "provider": "pants.backend.python.lint.bandit"
      }
    ],
    "BashBinary": [
      {
        "description": "Finding the `bash` binary",
        "help": null,
        "input_gets": [
          "Get(BinaryPaths, BinaryPathRequest, ..)"
        ],
        "input_types": [
          "BashBinaryRequest"
        ],
        "name": "pants.core.util_rules.system_binaries.find_bash",
        "output_desc": "The `bash` binary.",
        "output_type": "BashBinary",
        "provider": "pants.core"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(BashBinary, BashBinaryRequest, ..)"
        ],
        "input_types": [],
        "name": "pants.core.util_rules.system_binaries.get_bash",
        "output_desc": "The `bash` binary.",
        "output_type": "BashBinary",
        "provider": "pants.core"
      }
    ],
    "BinaryPaths": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(BashBinary, BashBinaryRequest, ..)",
          "Get(Digest, CreateDigest, ..)",
          "Get(ProcessResult, Process, ..)",
          "Get(FallibleProcessResult, Process, ..)"
        ],
        "input_types": [
          "BinaryPathRequest"
        ],
        "name": "pants.core.util_rules.system_binaries.find_binary",
        "output_desc": "BinaryPaths(binary_name: 'str', paths: 'Iterable[BinaryPath] | None' = None)",
        "output_type": "BinaryPaths",
        "provider": "pants.core"
      }
    ],
    "BinaryShims": [
      {
        "description": null,
        "help": "Creates a bin directory with shims for all requested binaries.\n\nUseful as input digest for a Process to setup a `bin` directory for PATH.",
        "input_gets": [
          "Get(BinaryPaths, BinaryPathRequest, ..)",
          "Get(ProcessResult, Process, ..)"
        ],
        "input_types": [
          "BinaryShimsRequest",
          "BashBinary",
          "MkdirBinary",
          "ChmodBinary"
        ],
        "name": "pants.core.util_rules.system_binaries.create_binary_shims",
        "output_desc": "The shims created for a BinaryShimsRequest is placed in `bin_directory` of the `digest`.\n\nThe purpose of these shims is so that a Process may be executed with `bin_directory` added to\nPATH so that the binaries are available for execution.\n\nThe alternative is to add the directories hosting the binaries directly, but that opens up for\nmany more unrelated binaries to also be executable from PATH, leaking into the sandbox\nunnecessarily.",
        "output_type": "BinaryShims",
        "provider": "pants.core"
      }
    ],
    "Black": [
      {
        "description": null,
        "help": "The Black Python code formatter (https://black.readthedocs.io/).",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_black",
        "output_desc": null,
        "output_type": "Black",
        "provider": "pants.core"
      }
    ],
    "BufSubsystem": [
      {
        "description": null,
        "help": "A linter and formatter for Protocol Buffers (https://github.com/bufbuild/buf).",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_buf",
        "output_desc": null,
        "output_type": "BufSubsystem",
        "provider": "pants.backend.codegen.protobuf.lint.buf"
      }
    ],
    "BuildGoPackageRequest": [
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "FallibleBuildGoPackageRequest"
        ],
        "name": "pants.backend.go.util_rules.build_pkg_target.required_build_go_package_request",
        "output_desc": null,
        "output_type": "BuildGoPackageRequest",
        "provider": "pants.backend.experimental.go"
      }
    ],
    "BuildPexResult": [
      {
        "description": null,
        "help": "Returns a PEX with the given settings.",
        "input_gets": [
          "Get(PythonExecutable, InterpreterConstraints, ..)",
          "Get(Digest, AddPrefix, ..)",
          "Get(LoadedLockfile, LoadedLockfileRequest, ..)",
          "Get(Digest, CreateDigest, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(Process, PexCliProcess, ..)",
          "Get(ProcessResult, Process, ..)"
        ],
        "input_types": [
          "PexRequest",
          "PythonSetup",
          "PythonRepos",
          "Platform",
          "PexRuntimeEnvironment"
        ],
        "name": "pants.backend.python.util_rules.pex.build_pex",
        "output_desc": "BuildPexResult(result: 'ProcessResult', pex_filename: 'str', digest: 'Digest', python: 'PythonExecutable | None')",
        "output_type": "BuildPexResult",
        "provider": "pants.core"
      }
    ],
    "BuildSystem": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(DigestContents, DigestSubset, ..)"
        ],
        "input_types": [
          "BuildSystemRequest",
          "Setuptools"
        ],
        "name": "pants.backend.python.util_rules.dists.find_build_system",
        "output_desc": "A PEP 517/518 build system configuration.",
        "output_type": "BuildSystem",
        "provider": "pants.backend.python"
      }
    ],
    "BuiltGoPackage": [
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "FallibleBuiltGoPackage"
        ],
        "name": "pants.backend.go.util_rules.build_pkg.required_built_go_package",
        "output_desc": "A package and its dependencies compiled as `__pkg__.a` files.\n\nThe packages are arranged into `__pkgs__/{path_safe(import_path)}/__pkg__.a`.",
        "output_type": "BuiltGoPackage",
        "provider": "pants.backend.experimental.go"
      }
    ],
    "BuiltPackage": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Targets, UnparsedAddressInputs, ..)",
          "Get(FieldSetsPerTarget, FieldSetsPerTargetRequest, ..)",
          "Get(BuiltPackage, PackageFieldSet, ..)",
          "Get(HydratedSources, HydrateSourcesRequest, ..)",
          "Get(Snapshot, MergeDigests, ..)",
          "Get(Digest, CreateArchive, ..)"
        ],
        "input_types": [
          "ArchiveFieldSet"
        ],
        "name": "pants.core.target_types.package_archive_target",
        "output_desc": "BuiltPackage(digest: 'Digest', artifacts: 'tuple[BuiltPackageArtifact, ...]')",
        "output_type": "BuiltPackage",
        "provider": "pants.core"
      },
      {
        "description": "Create Python AWS Lambda",
        "help": null,
        "input_gets": [
          "Get(CompletePlatforms, PexCompletePlatformsField, ..)",
          "Get(VenvPex, PexRequest, ..)",
          "Get(Pex, PexFromTargetsRequest, ..)",
          "Get(ResolvedPythonAwsHandler, ResolvePythonAwsHandlerRequest, ..)",
          "Get(TransitiveTargets, TransitiveTargetsRequest, ..)",
          "Get(ProcessResult, VenvPexProcess, ..)"
        ],
        "input_types": [
          "PythonAwsLambdaFieldSet",
          "Lambdex",
          "Platform",
          "UnionMembership"
        ],
        "name": "pants.backend.awslambda.python.rules.package_python_awslambda",
        "output_desc": "BuiltPackage(digest: 'Digest', artifacts: 'tuple[BuiltPackageArtifact, ...]')",
        "output_type": "BuiltPackage",
        "provider": "pants.backend.awslambda.python"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(DockerBuildContext, DockerBuildContextRequest, ..)",
          "Get(WrappedTarget, Address, ..)",
          "Get(FallibleProcessResult, Process, ..)"
        ],
        "input_types": [
          "DockerFieldSet",
          "DockerOptions",
          "GlobalOptions",
          "DockerBinary",
          "ProcessCleanupOption"
        ],
        "name": "pants.backend.docker.goals.package_image.build_docker_image",
        "output_desc": "BuiltPackage(digest: 'Digest', artifacts: 'tuple[BuiltPackageArtifact, ...]')",
        "output_type": "BuiltPackage",
        "provider": "pants.backend.docker"
      },
      {
        "description": "Package Go binary",
        "help": null,
        "input_gets": [
          "Get(GoBinaryMainPackage, GoBinaryMainPackageRequest, ..)",
          "Get(BuiltGoPackage, BuildGoPackageTargetRequest, ..)",
          "Get(ImportConfig, ImportConfigRequest, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(LinkedGoBinary, LinkGoBinaryRequest, ..)",
          "Get(Digest, AddPrefix, ..)"
        ],
        "input_types": [
          "GoBinaryFieldSet"
        ],
        "name": "pants.backend.go.goals.package_binary.package_go_binary",
        "output_desc": "BuiltPackage(digest: 'Digest', artifacts: 'tuple[BuiltPackageArtifact, ...]')",
        "output_type": "BuiltPackage",
        "provider": "pants.backend.experimental.go"
      },
      {
        "description": "Package Helm chart",
        "help": null,
        "input_gets": [
          "Get(HelmChart, HelmChartRequest, ..)",
          "Get(Digest, CreateDigest, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(ProcessResult, HelmProcess, ..)",
          "Get(Digest, RemovePrefix, ..)",
          "Get(Snapshot, AddPrefix, ..)"
        ],
        "input_types": [
          "HelmPackageFieldSet"
        ],
        "name": "pants.backend.helm.goals.package.run_helm_package",
        "output_desc": "BuiltPackage(digest: 'Digest', artifacts: 'tuple[BuiltPackageArtifact, ...]')",
        "output_type": "BuiltPackage",
        "provider": "pants.backend.experimental.helm"
      },
      {
        "description": null,
        "help": "Constructs a deploy (\"fat\") JAR file by\n1. Resolving/compiling a Classpath for the `root_address` target,\n2. Producing a ZIP file containing _only_ the JAR manifest file for the `main_class`\n3. Creating a deploy jar with a broken ZIP index by concatenating all dependency JARs together,\n   followed by the thin JAR we created\n4. Using the unix `zip` utility's repair function to fix the broken fat jar",
        "input_gets": [
          "Get(Classpath, Addresses, ..)",
          "Get(Digest, CreateDigest, ..)",
          "Get(ProcessResult, Process, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(Digest, AddPrefix, ..)"
        ],
        "input_types": [
          "BashBinary",
          "ZipBinary",
          "DeployJarFieldSet"
        ],
        "name": "pants.jvm.package.deploy_jar.package_deploy_jar",
        "output_desc": "BuiltPackage(digest: 'Digest', artifacts: 'tuple[BuiltPackageArtifact, ...]')",
        "output_type": "BuiltPackage",
        "provider": "pants.backend.experimental.java"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Classpath, DependenciesRequest, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(Digest, AddPrefix, ..)",
          "Get(RenderedWarContent, RenderWarContentRequest, ..)",
          "Get(RenderedWarDeploymentDescriptor, RenderWarDeploymentDescriptorRequest, ..)",
          "Get(Digest, CreateDigest, ..)",
          "Get(ProcessResult, Process, ..)",
          "Get(DigestEntries, Digest, ..)"
        ],
        "input_types": [
          "PackageWarFileFieldSet",
          "BashBinary",
          "ZipBinary"
        ],
        "name": "pants.jvm.package.war.package_war",
        "output_desc": "BuiltPackage(digest: 'Digest', artifacts: 'tuple[BuiltPackageArtifact, ...]')",
        "output_type": "BuiltPackage",
        "provider": "pants.backend.experimental.java"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Targets, DependenciesRequest, ..)",
          "Get(FieldSetsPerTarget, FieldSetsPerTargetRequest, ..)",
          "Get(BuiltPackage, PackageFieldSet, ..)",
          "Get(HydratedSources, HydrateSourcesRequest, ..)",
          "Get(DigestContents, Digest, ..)",
          "Get(Pex, PexRequest, ..)",
          "Get(Digest, CreateDigest, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(Process, PexProcess, ..)",
          "Get(ProcessResult, Process, ..)",
          "Get(Digest, RemovePrefix, ..)",
          "Get(Snapshot, AddPrefix, ..)"
        ],
        "input_types": [
          "PyOxidizer",
          "PyOxidizerFieldSet",
          "PyoxidizerRunnerScript",
          "BashBinary"
        ],
        "name": "pants.backend.python.packaging.pyoxidizer.rules.package_pyoxidizer_binary",
        "output_desc": "BuiltPackage(digest: 'Digest', artifacts: 'tuple[BuiltPackageArtifact, ...]')",
        "output_type": "BuiltPackage",
        "provider": "pants.backend.experimental.python.packaging.pyoxidizer"
      },
      {
        "description": "Create Python Google Cloud Function",
        "help": null,
        "input_gets": [
          "Get(CompletePlatforms, PexCompletePlatformsField, ..)",
          "Get(VenvPex, PexRequest, ..)",
          "Get(Pex, PexFromTargetsRequest, ..)",
          "Get(ResolvedPythonGoogleHandler, ResolvePythonGoogleHandlerRequest, ..)",
          "Get(TransitiveTargets, TransitiveTargetsRequest, ..)",
          "Get(ProcessResult, VenvPexProcess, ..)"
        ],
        "input_types": [
          "PythonGoogleCloudFunctionFieldSet",
          "Lambdex",
          "Platform",
          "UnionMembership"
        ],
        "name": "pants.backend.google_cloud_function.python.rules.package_python_google_cloud_function",
        "output_desc": "BuiltPackage(digest: 'Digest', artifacts: 'tuple[BuiltPackageArtifact, ...]')",
        "output_type": "BuiltPackage",
        "provider": "pants.backend.google_cloud_function.python"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(ResolvedPexEntryPoint, ResolvePexEntryPointRequest, ..)",
          "Get(TransitiveTargets, TransitiveTargetsRequest, ..)",
          "Get(CompletePlatforms, PexCompletePlatformsField, ..)",
          "Get(Pex, PexFromTargetsRequest, ..)"
        ],
        "input_types": [
          "PexBinaryFieldSet",
          "PexBinaryDefaults",
          "UnionMembership"
        ],
        "name": "pants.backend.python.goals.package_pex_binary.package_pex_binary",
        "output_desc": "BuiltPackage(digest: 'Digest', artifacts: 'tuple[BuiltPackageArtifact, ...]')",
        "output_type": "BuiltPackage",
        "provider": "pants.backend.python"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(TransitiveTargets, TransitiveTargetsRequest, ..)",
          "Get(DistBuildChroot, DistBuildChrootRequest, ..)",
          "Get(Digest, AddPrefix, ..)",
          "Get(BuildSystem, BuildSystemRequest, ..)",
          "Get(DistBuildResult, DistBuildRequest, ..)",
          "Get(Snapshot, Digest, ..)"
        ],
        "input_types": [
          "PythonDistributionFieldSet",
          "PythonSetup"
        ],
        "name": "pants.backend.python.goals.setup_py.package_python_dist",
        "output_desc": "BuiltPackage(digest: 'Digest', artifacts: 'tuple[BuiltPackageArtifact, ...]')",
        "output_type": "BuiltPackage",
        "provider": "pants.backend.python"
      }
    ],
    "BuiltPackageDependencies": [
      {
        "description": "Build runtime package dependencies for tests",
        "help": null,
        "input_gets": [
          "Get(Targets, UnparsedAddressInputs, ..)",
          "Get(FieldSetsPerTarget, FieldSetsPerTargetRequest, ..)",
          "Get(BuiltPackage, PackageFieldSet, ..)"
        ],
        "input_types": [
          "BuildPackageDependenciesRequest"
        ],
        "name": "pants.core.goals.test.build_runtime_package_dependencies",
        "output_desc": null,
        "output_type": "BuiltPackageDependencies",
        "provider": "pants.core"
      }
    ],
    "Check": [
      {
        "description": "`check` goal",
        "help": null,
        "input_gets": [
          "Get(CheckResults, CheckRequest, ..)"
        ],
        "input_types": [
          "Console",
          "Workspace",
          "FilteredTargets",
          "DistDir",
          "UnionMembership",
          "CheckSubsystem"
        ],
        "name": "pants.core.goals.check.check",
        "output_desc": null,
        "output_type": "Check",
        "provider": "pants.core"
      }
    ],
    "CheckResult": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(PythonSourceFiles, PythonSourceFilesRequest, ..)",
          "Get(SourceFiles, SourceFilesRequest, ..)",
          "Get(Pex, RequirementsPexRequest, ..)",
          "Get(Pex, PexRequest, ..)",
          "Get(VenvPex, PexRequest, ..)",
          "Get(Digest, CreateDigest, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(FallibleProcessResult, VenvPexProcess, ..)",
          "Get(Digest, RemovePrefix, ..)"
        ],
        "input_types": [
          "MyPyPartition",
          "MyPyConfigFile",
          "MyPyFirstPartyPlugins",
          "MyPy",
          "PythonSetup"
        ],
        "name": "pants.backend.python.typecheck.mypy.rules.mypy_typecheck_partition",
        "output_desc": "CheckResult(exit_code: 'int', stdout: 'str', stderr: 'str', partition_description: 'str | None' = None, report: 'Digest' = Digest('e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855', 0))",
        "output_type": "CheckResult",
        "provider": "pants.backend.python.typecheck.mypy"
      }
    ],
    "CheckResults": [
      {
        "description": "Check Go compilation",
        "help": null,
        "input_gets": [
          "Get(FallibleBuildGoPackageRequest, BuildGoPackageTargetRequest, ..)",
          "Get(FallibleBuiltGoPackage, BuildGoPackageRequest, ..)"
        ],
        "input_types": [
          "GoCheckRequest"
        ],
        "name": "pants.backend.go.goals.check.check_go",
        "output_desc": "Zero or more CheckResult objects for a single type checker.\n\nTypically, type checkers will return one result. If they no-oped, they will return zero results.\nHowever, some type checkers may need to partition their input and thus may need to return\nmultiple results.",
        "output_type": "CheckResults",
        "provider": "pants.backend.experimental.go"
      },
      {
        "description": "Check javac compilation",
        "help": null,
        "input_gets": [
          "Get(CoarsenedTargets, Addresses, ..)",
          "Get(CoursierResolveKey, CoarsenedTargets, ..)",
          "Get(FallibleClasspathEntry, ClasspathEntryRequest, ..)"
        ],
        "input_types": [
          "JavacCheckRequest",
          "ClasspathEntryRequestFactory"
        ],
        "name": "pants.backend.java.goals.check.javac_check",
        "output_desc": "Zero or more CheckResult objects for a single type checker.\n\nTypically, type checkers will return one result. If they no-oped, they will return zero results.\nHowever, some type checkers may need to partition their input and thus may need to return\nmultiple results.",
        "output_type": "CheckResults",
        "provider": "pants.backend.experimental.java"
      },
      {
        "description": "Check compilation for Kotlin",
        "help": null,
        "input_gets": [
          "Get(CoarsenedTargets, Addresses, ..)",
          "Get(CoursierResolveKey, CoarsenedTargets, ..)",
          "Get(FallibleClasspathEntry, ClasspathEntryRequest, ..)"
        ],
        "input_types": [
          "KotlincCheckRequest",
          "ClasspathEntryRequestFactory"
        ],
        "name": "pants.backend.kotlin.goals.check.kotlinc_check",
        "output_desc": "Zero or more CheckResult objects for a single type checker.\n\nTypically, type checkers will return one result. If they no-oped, they will return zero results.\nHowever, some type checkers may need to partition their input and thus may need to return\nmultiple results.",
        "output_type": "CheckResults",
        "provider": "pants.backend.experimental.kotlin"
      },
      {
        "description": "Check compilation for Scala",
        "help": null,
        "input_gets": [
          "Get(CoarsenedTargets, Addresses, ..)",
          "Get(CoursierResolveKey, CoarsenedTargets, ..)",
          "Get(FallibleClasspathEntry, ClasspathEntryRequest, ..)"
        ],
        "input_types": [
          "ScalacCheckRequest",
          "ClasspathEntryRequestFactory"
        ],
        "name": "pants.backend.scala.goals.check.scalac_check",
        "output_desc": "Zero or more CheckResult objects for a single type checker.\n\nTypically, type checkers will return one result. If they no-oped, they will return zero results.\nHowever, some type checkers may need to partition their input and thus may need to return\nmultiple results.",
        "output_type": "CheckResults",
        "provider": "pants.backend.experimental.scala"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(StyleSetup, StyleSetupRequest, ..)",
          "Get(FallibleProcessResult, TerraformProcess, ..)"
        ],
        "input_types": [
          "TerraformCheckRequest",
          "TerraformValidateSubsystem"
        ],
        "name": "pants.backend.terraform.goals.check.terraform_check",
        "output_desc": "Zero or more CheckResult objects for a single type checker.\n\nTypically, type checkers will return one result. If they no-oped, they will return zero results.\nHowever, some type checkers may need to partition their input and thus may need to return\nmultiple results.",
        "output_type": "CheckResults",
        "provider": "pants.backend.experimental.terraform"
      },
      {
        "description": "Typecheck using MyPy",
        "help": null,
        "input_gets": [
          "Get(MyPyPartitions, MyPyRequest, ..)",
          "Get(CheckResult, MyPyPartition, ..)"
        ],
        "input_types": [
          "MyPyRequest",
          "MyPy"
        ],
        "name": "pants.backend.python.typecheck.mypy.rules.mypy_typecheck",
        "output_desc": "Zero or more CheckResult objects for a single type checker.\n\nTypically, type checkers will return one result. If they no-oped, they will return zero results.\nHowever, some type checkers may need to partition their input and thus may need to return\nmultiple results.",
        "output_type": "CheckResults",
        "provider": "pants.backend.python.typecheck.mypy"
      }
    ],
    "CheckSubsystem": [
      {
        "description": null,
        "help": "Run type checking or the lightest variant of compilation available for a language.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_check",
        "output_desc": null,
        "output_type": "CheckSubsystem",
        "provider": "pants.core"
      }
    ],
    "ChmodBinary": [
      {
        "description": "Finding the `chmod` binary",
        "help": null,
        "input_gets": [
          "Get(BinaryPaths, BinaryPathRequest, ..)"
        ],
        "input_types": [],
        "name": "pants.core.util_rules.system_binaries.find_chmod",
        "output_desc": null,
        "output_type": "ChmodBinary",
        "provider": "pants.core"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "ChmodBinaryRequest",
          "ChmodBinary"
        ],
        "name": "pants.core.util_rules.system_binaries.find_chmod_wrapper",
        "output_desc": null,
        "output_type": "ChmodBinary",
        "provider": "pants.core"
      }
    ],
    "ChosenPythonResolve": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(TransitiveTargets, TransitiveTargetsRequest, ..)"
        ],
        "input_types": [
          "ChosenPythonResolveRequest",
          "PythonSetup"
        ],
        "name": "pants.backend.python.util_rules.pex_from_targets.choose_python_resolve",
        "output_desc": "ChosenPythonResolve(name: 'str', lockfile: 'Lockfile')",
        "output_type": "ChosenPythonResolve",
        "provider": "pants.backend.python"
      }
    ],
    "Classpath": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(CoursierResolveKey, CoarsenedTargets, ..)",
          "Get(ClasspathEntry, ClasspathEntryRequest, ..)"
        ],
        "input_types": [
          "CoarsenedTargets",
          "ClasspathEntryRequestFactory"
        ],
        "name": "pants.jvm.classpath.classpath",
        "output_desc": "A transitive classpath which is sufficient to launch the target(s) it was generated for.\n\nThere are two primary ways to consume a Classpath:\n    1. Using the `(root_)immutable_inputs` methods, which produce the argument to\n       `Process.immutable_input_digests` and adapted CLI args for use with that argument.\n    2. Using the `digests` and `(root_)args` methods, which can be merged to produce the\n       argument to `Process.input_digest` and CLI args for use with a digest.\nThe first approach should be preferred, because it allows for symlinking of inputs. If\npossible, the latter method should be removed when consumers have migrated.\n\nThis classpath is guaranteed to contain only JAR files.",
        "output_type": "Classpath",
        "provider": "pants.backend.experimental.java"
      }
    ],
    "ClasspathEntry": [
      {
        "description": null,
        "help": "Run `coursier fetch --intransitive` to fetch a single artifact.\n\nThis rule exists to permit efficient subsetting of a \"global\" classpath\nin the form of a lockfile.  Callers can determine what subset of dependencies\nfrom the lockfile are needed for a given target, then request those\nlockfile entries individually.\n\nBy fetching only one entry at a time, we maximize our cache efficiency.  If instead\nwe fetched the entire subset that the caller wanted, there would be a different cache\nkey for every possible subset.\n\nThis rule also guarantees exact reproducibility.  If all caches have been\nremoved, `coursier fetch` will re-download the artifact, and this rule will\nconfirm that what was downloaded matches exactly (by content digest) what\nwas specified in the lockfile (what Coursier originally downloaded).",
        "input_gets": [
          "Get(Targets, UnparsedAddressInputs, ..)",
          "Get(CoursierResolveInfo, ArtifactRequirements, ..)",
          "Get(ProcessResult, CoursierFetchProcess, ..)",
          "Get(Digest, DigestSubset, ..)",
          "Get(DigestContents, Digest, ..)",
          "Get(Digest, RemovePrefix, ..)",
          "Get(FileDigest, ExtractFileDigest, ..)"
        ],
        "input_types": [
          "CoursierLockfileEntry"
        ],
        "name": "pants.jvm.resolve.coursier_fetch.coursier_fetch_one_coord",
        "output_desc": "A JVM classpath entry represented as a series of JAR files, and their dependencies.\n\nThis is a series of JAR files in order to account for \"exported\" dependencies, when a node\nand some of its dependencies are indistinguishable (such as for aliases, or potentially\nexplicitly declared or inferred `exported=` lists in the future).\n\nThis class additionally keeps filenames in order to preserve classpath ordering for the\n`classpath_arg` method: although Digests encode filenames, they are stored sorted.\n\nTODO: Move to `classpath.py`.\nTODO: Generalize via https://github.com/pantsbuild/pants/issues/13112.",
        "output_type": "ClasspathEntry",
        "provider": "pants.backend.experimental.java"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(ToolClasspath, ToolClasspathRequest, ..)"
        ],
        "input_types": [
          "ScalaLibraryRequest"
        ],
        "name": "pants.backend.scala.compile.scalac.fetch_scala_library",
        "output_desc": "A JVM classpath entry represented as a series of JAR files, and their dependencies.\n\nThis is a series of JAR files in order to account for \"exported\" dependencies, when a node\nand some of its dependencies are indistinguishable (such as for aliases, or potentially\nexplicitly declared or inferred `exported=` lists in the future).\n\nThis class additionally keeps filenames in order to preserve classpath ordering for the\n`classpath_arg` method: although Digests encode filenames, they are stored sorted.\n\nTODO: Move to `classpath.py`.\nTODO: Generalize via https://github.com/pantsbuild/pants/issues/13112.",
        "output_type": "ClasspathEntry",
        "provider": "pants.backend.experimental.scala"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "FallibleClasspathEntry"
        ],
        "name": "pants.jvm.compile.required_classfiles",
        "output_desc": "A JVM classpath entry represented as a series of JAR files, and their dependencies.\n\nThis is a series of JAR files in order to account for \"exported\" dependencies, when a node\nand some of its dependencies are indistinguishable (such as for aliases, or potentially\nexplicitly declared or inferred `exported=` lists in the future).\n\nThis class additionally keeps filenames in order to preserve classpath ordering for the\n`classpath_arg` method: although Digests encode filenames, they are stored sorted.\n\nTODO: Move to `classpath.py`.\nTODO: Generalize via https://github.com/pantsbuild/pants/issues/13112.",
        "output_type": "ClasspathEntry",
        "provider": "pants.backend.experimental.java"
      }
    ],
    "ClasspathEntryRequestFactory": [
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "UnionMembership"
        ],
        "name": "pants.jvm.compile.calculate_jvm_request_types",
        "output_desc": "ClasspathEntryRequestFactory(impls: 'tuple[type[ClasspathEntryRequest], ...]', generator_sources: 'FrozenDict[type[ClasspathEntryRequest], frozenset[type[SourcesField]]]')",
        "output_type": "ClasspathEntryRequestFactory",
        "provider": "pants.backend.experimental.java"
      }
    ],
    "ClasspathEntryRequests": [
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "ClasspathEntryRequestFactory",
          "ClasspathDependenciesRequest"
        ],
        "name": "pants.jvm.compile.classpath_dependency_requests",
        "output_desc": null,
        "output_type": "ClasspathEntryRequests",
        "provider": "pants.backend.experimental.java"
      }
    ],
    "CompileResult": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(BSPBuildTargetInternal, BuildTargetIdentifier, ..)",
          "Get(BSPCompileResult, CompileOneBSPTargetRequest, ..)",
          "Get(Digest, MergeDigests, ..)"
        ],
        "input_types": [
          "CompileParams",
          "Workspace"
        ],
        "name": "pants.bsp.util_rules.compile.bsp_compile_request",
        "output_desc": "CompileResult(origin_id: 'str | None', status_code: 'int', data_kind: 'str | None' = None, data: 'Any | None' = None)",
        "output_type": "CompileResult",
        "provider": "pants.core"
      }
    ],
    "CompletePlatforms": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Targets, UnparsedAddressInputs, ..)",
          "Get(HydratedSources, HydrateSourcesRequest, ..)",
          "Get(Snapshot, MergeDigests, ..)"
        ],
        "input_types": [
          "PexCompletePlatformsField"
        ],
        "name": "pants.backend.python.util_rules.pex.digest_complete_platforms",
        "output_desc": null,
        "output_type": "CompletePlatforms",
        "provider": "pants.core"
      }
    ],
    "ConfigFiles": [
      {
        "description": "Find config files",
        "help": null,
        "input_gets": [
          "Get(Snapshot, PathGlobs, ..)",
          "Get(DigestContents, PathGlobs, ..)"
        ],
        "input_types": [
          "ConfigFilesRequest"
        ],
        "name": "pants.core.util_rules.config_files.find_config_file",
        "output_desc": "Config files used by a tool run by Pants.",
        "output_type": "ConfigFiles",
        "provider": "pants.core"
      }
    ],
    "CountLinesOfCode": [
      {
        "description": "`count-loc` goal",
        "help": null,
        "input_gets": [
          "Get(DownloadedExternalTool, ExternalToolRequest, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(ProcessResult, Process, ..)"
        ],
        "input_types": [
          "Console",
          "SuccinctCodeCounter",
          "SpecsSnapshot"
        ],
        "name": "pants.backend.project_info.count_loc.count_loc",
        "output_desc": null,
        "output_type": "CountLinesOfCode",
        "provider": "pants.backend.project_info"
      }
    ],
    "CountLinesOfCodeSubsystem": [
      {
        "description": null,
        "help": "Count lines of code.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_count_loc",
        "output_desc": null,
        "output_type": "CountLinesOfCodeSubsystem",
        "provider": "pants.backend.project_info"
      }
    ],
    "Coursier": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(DownloadedExternalTool, ExternalToolRequest, ..)",
          "Get(Digest, CreateDigest, ..)",
          "Get(Digest, MergeDigests, ..)"
        ],
        "input_types": [
          "CoursierSubsystem",
          "PythonBinary"
        ],
        "name": "pants.jvm.resolve.coursier_setup.setup_coursier",
        "output_desc": "The Coursier tool and various utilities, prepared for use via `immutable_input_digests`.",
        "output_type": "Coursier",
        "provider": "pants.backend.experimental.java"
      }
    ],
    "CoursierResolveInfo": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Digest, CreateDigest, ..)",
          "Get(SourceFiles, SourceFilesRequest, ..)",
          "Get(Digest, MergeDigests, ..)"
        ],
        "input_types": [
          "ArtifactRequirements"
        ],
        "name": "pants.jvm.resolve.coursier_fetch.prepare_coursier_resolve_info",
        "output_desc": "CoursierResolveInfo(coord_arg_strings: 'FrozenSet[str]', extra_args: 'tuple[str, ...]', digest: 'Digest')",
        "output_type": "CoursierResolveInfo",
        "provider": "pants.backend.experimental.java"
      }
    ],
    "CoursierResolveKey": [
      {
        "description": null,
        "help": "Selects and validates (transitively) a single resolve for a set of roots in a compile graph.\n\nIn most cases, a `CoursierResolveKey` should be requested for a single `CoarsenedTarget` root,\nwhich avoids coupling un-related roots unnecessarily. But in other cases, a single compatible\nresolve is required for multiple roots (such as when running a `repl` over unrelated code), and\nin that case there might be multiple CoarsenedTargets.",
        "input_gets": [
          "Get(Digest, PathGlobs, ..)"
        ],
        "input_types": [
          "CoarsenedTargets",
          "JvmSubsystem"
        ],
        "name": "pants.jvm.resolve.coursier_fetch.select_coursier_resolve_for_targets",
        "output_desc": "CoursierResolveKey(name: 'str', path: 'str', digest: 'Digest')",
        "output_type": "CoursierResolveKey",
        "provider": "pants.backend.experimental.java"
      }
    ],
    "CoursierResolvedLockfile": [
      {
        "description": null,
        "help": "Run `coursier fetch ...` against a list of Maven coordinates and capture the result.\n\nThis rule does two things in a single Process invocation:\n\n    * Runs `coursier fetch` to let Coursier do the heavy lifting of resolving\n      dependencies and downloading resolved artifacts (jars, etc).\n    * Copies the resolved artifacts into the Process output directory, capturing\n      the artifacts as content-addressed `Digest`s.\n\nIt's important that this happens in the same process, since the process isn't\nguaranteed to run on the same machine as the rule, nor is a subsequent process\ninvocation.  This guarantees that whatever Coursier resolved, it was fully\ncaptured into Pants' content addressed artifact storage.\n\nNote however that we still get the benefit of Coursier's \"global\" cache if it\nhad already been run on the machine where the `coursier fetch` runs, so rerunning\n`coursier fetch` tends to be fast in practice.\n\nFinally, this rule bundles up the result into a `CoursierResolvedLockfile`.  This\ndata structure encapsulates everything necessary to either materialize the\nresolved dependencies to a classpath for Java invocations, or to write the\nlockfile out to the workspace to hermetically freeze the result of the resolve.",
        "input_gets": [
          "Get(CoursierResolveInfo, ArtifactRequirements, ..)",
          "Get(ProcessResult, CoursierFetchProcess, ..)",
          "Get(Digest, DigestSubset, ..)",
          "Get(DigestContents, Digest, ..)",
          "Get(Digest, RemovePrefix, ..)",
          "Get(FileDigest, ExtractFileDigest, ..)"
        ],
        "input_types": [
          "ArtifactRequirements"
        ],
        "name": "pants.jvm.resolve.coursier_fetch.coursier_resolve_lockfile",
        "output_desc": "An in-memory representation of Pants' Coursier lockfile format.\n\nAll coordinates in the resolved lockfile will be compatible, so we do not need to do version\ntesting when looking up coordinates.",
        "output_type": "CoursierResolvedLockfile",
        "provider": "pants.backend.experimental.java"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(DigestContents, Digest, ..)"
        ],
        "input_types": [
          "CoursierResolveKey"
        ],
        "name": "pants.jvm.resolve.coursier_fetch.get_coursier_lockfile_for_resolve",
        "output_desc": "An in-memory representation of Pants' Coursier lockfile format.\n\nAll coordinates in the resolved lockfile will be compatible, so we do not need to do version\ntesting when looking up coordinates.",
        "output_type": "CoursierResolvedLockfile",
        "provider": "pants.backend.experimental.java"
      }
    ],
    "CoursierSubsystem": [
      {
        "description": null,
        "help": "A dependency resolver for the Maven ecosystem. (https://get-coursier.io/)",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_coursier",
        "output_desc": null,
        "output_type": "CoursierSubsystem",
        "provider": "pants.backend.experimental.java"
      }
    ],
    "CoverageConfig": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(ConfigFiles, ConfigFilesRequest, ..)",
          "Get(DigestContents, Digest, ..)",
          "Get(Digest, CreateDigest, ..)"
        ],
        "input_types": [
          "CoverageSubsystem"
        ],
        "name": "pants.backend.python.goals.coverage_py.create_or_update_coverage_config",
        "output_desc": "CoverageConfig(digest: 'Digest', path: 'str')",
        "output_type": "CoverageConfig",
        "provider": "pants.backend.python"
      }
    ],
    "CoverageReports": [
      {
        "description": "Generate Pytest coverage reports",
        "help": "Takes all Python test results and generates a single coverage report.",
        "input_gets": [
          "Get(TransitiveTargets, TransitiveTargetsRequest, ..)",
          "Get(PythonSourceFiles, PythonSourceFilesRequest, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(Snapshot, Digest, ..)",
          "Get(FallibleProcessResult, VenvPexProcess, ..)"
        ],
        "input_types": [
          "MergedCoverageData",
          "CoverageSetup",
          "CoverageConfig",
          "CoverageSubsystem",
          "ProcessCleanupOption",
          "DistDir"
        ],
        "name": "pants.backend.python.goals.coverage_py.generate_coverage_reports",
        "output_desc": "CoverageReports(reports: 'tuple[CoverageReport, ...]')",
        "output_type": "CoverageReports",
        "provider": "pants.backend.python"
      }
    ],
    "CoverageSetup": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(VenvPex, PexRequest, ..)"
        ],
        "input_types": [
          "CoverageSubsystem"
        ],
        "name": "pants.backend.python.goals.coverage_py.setup_coverage",
        "output_desc": "CoverageSetup(pex: 'VenvPex')",
        "output_type": "CoverageSetup",
        "provider": "pants.backend.python"
      }
    ],
    "CoverageSubsystem": [
      {
        "description": null,
        "help": "Configuration for Python test coverage measurement.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_coverage_py",
        "output_desc": null,
        "output_type": "CoverageSubsystem",
        "provider": "pants.backend.python"
      }
    ],
    "Dependees": [
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "DependeesRequest",
          "AddressToDependees"
        ],
        "name": "pants.backend.project_info.dependees.find_dependees",
        "output_desc": null,
        "output_type": "Dependees",
        "provider": "pants.backend.project_info"
      }
    ],
    "DependeesGoal": [
      {
        "description": "`dependees` goal",
        "help": null,
        "input_gets": [
          "Get(Dependees, DependeesRequest, ..)"
        ],
        "input_types": [
          "Addresses",
          "DependeesSubsystem",
          "Console"
        ],
        "name": "pants.backend.project_info.dependees.dependees_goal",
        "output_desc": null,
        "output_type": "DependeesGoal",
        "provider": "pants.backend.project_info"
      }
    ],
    "DependeesSubsystem": [
      {
        "description": null,
        "help": "List all targets that depend on any of the input files/targets.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_dependees",
        "output_desc": null,
        "output_type": "DependeesSubsystem",
        "provider": "pants.backend.project_info"
      }
    ],
    "Dependencies": [
      {
        "description": "`dependencies` goal",
        "help": null,
        "input_gets": [
          "Get(TransitiveTargets, TransitiveTargetsRequest, ..)",
          "Get(UnexpandedTargets, Addresses, ..)",
          "Get(Targets, DependenciesRequest, ..)"
        ],
        "input_types": [
          "Console",
          "Addresses",
          "DependenciesSubsystem"
        ],
        "name": "pants.backend.project_info.dependencies.dependencies",
        "output_desc": null,
        "output_type": "Dependencies",
        "provider": "pants.backend.project_info"
      }
    ],
    "DependenciesSubsystem": [
      {
        "description": null,
        "help": "List the dependencies of the input files/targets.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_dependencies",
        "output_desc": null,
        "output_type": "DependenciesSubsystem",
        "provider": "pants.backend.project_info"
      }
    ],
    "DependencyModulesResult": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(ResolveOneDependencyModuleResult, ResolveOneDependencyModuleRequest, ..)",
          "Get(Digest, MergeDigests, ..)"
        ],
        "input_types": [
          "DependencyModulesParams",
          "Workspace"
        ],
        "name": "pants.bsp.util_rules.targets.bsp_dependency_modules",
        "output_desc": "DependencyModulesResult(items: 'tuple[DependencyModulesItem, ...]')",
        "output_type": "DependencyModulesResult",
        "provider": "pants.core"
      }
    ],
    "DependencySourcesResult": [
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "DependencySourcesParams"
        ],
        "name": "pants.bsp.util_rules.targets.bsp_dependency_sources",
        "output_desc": "DependencySourcesResult(items: 'tuple[DependencySourcesItem, ...]')",
        "output_type": "DependencySourcesResult",
        "provider": "pants.core"
      }
    ],
    "DiffBinary": [
      {
        "description": "Finding the `diff` binary",
        "help": null,
        "input_gets": [
          "Get(BinaryPaths, BinaryPathRequest, ..)"
        ],
        "input_types": [],
        "name": "pants.core.util_rules.system_binaries.find_diff",
        "output_desc": null,
        "output_type": "DiffBinary",
        "provider": "pants.core"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "DiffBinaryRequest",
          "DiffBinary"
        ],
        "name": "pants.core.util_rules.system_binaries.find_diff_wrapper",
        "output_desc": null,
        "output_type": "DiffBinary",
        "provider": "pants.core"
      }
    ],
    "Digest": [
      {
        "description": "Creating an archive file",
        "help": null,
        "input_gets": [
          "Get(Digest, CreateDigest, ..)",
          "Get(ZipBinary, ZipBinaryRequest, ..)",
          "Get(BashBinary, BashBinaryRequest, ..)",
          "Get(TarBinary, TarBinaryRequest, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(ProcessResult, Process, ..)"
        ],
        "input_types": [
          "CreateArchive"
        ],
        "name": "pants.core.util_rules.archive.create_archive",
        "output_desc": null,
        "output_type": "Digest",
        "provider": "pants.core"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Digest, CreateDigest, ..)"
        ],
        "input_types": [
          "HelmChartMetadata"
        ],
        "name": "pants.backend.helm.util_rules.chart_metadata.render_chart_metadata",
        "output_desc": null,
        "output_type": "Digest",
        "provider": "pants.backend.experimental.helm"
      }
    ],
    "DisjointSourcePutativeTarget": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Paths, PathGlobs, ..)",
          "Get(UnexpandedTargets, AddressSpecs, ..)",
          "Get(SourcesPaths, SourcesPathsRequest, ..)"
        ],
        "input_types": [
          "PutativeTarget"
        ],
        "name": "pants.core.goals.tailor.restrict_conflicting_sources",
        "output_desc": "Putative target whose sources don't overlap with those of any existing targets.",
        "output_type": "DisjointSourcePutativeTarget",
        "provider": "pants.core"
      }
    ],
    "DistBuildChroot": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(DistBuildSources, DistBuildChrootRequest, ..)",
          "Get(GeneratedSetupPy, GenerateSetupPyRequest, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(StrippedFileName, StrippedFileNameRequest, ..)"
        ],
        "input_types": [
          "DistBuildChrootRequest",
          "SetupPyGeneration"
        ],
        "name": "pants.backend.python.goals.setup_py.generate_chroot",
        "output_desc": "A chroot containing PEP 517 build setup and the sources it operates on.",
        "output_type": "DistBuildChroot",
        "provider": "pants.backend.python"
      }
    ],
    "DistBuildResult": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(VenvPex, PexRequest, ..)",
          "Get(Digest, CreateDigest, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(ProcessResult, VenvPexProcess, ..)",
          "Get(Digest, RemovePrefix, ..)",
          "Get(Snapshot, Digest, ..)"
        ],
        "input_types": [
          "DistBuildRequest",
          "PythonSetup"
        ],
        "name": "pants.backend.python.util_rules.dists.run_pep517_build",
        "output_desc": "DistBuildResult(output: 'Digest', wheel_path: 'str | None', sdist_path: 'str | None')",
        "output_type": "DistBuildResult",
        "provider": "pants.backend.python"
      }
    ],
    "DistBuildSources": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(OwnedDependencies, DependencyOwner, ..)",
          "Get(TransitiveTargets, TransitiveTargetsRequest, ..)",
          "Get(StrippedPythonSourceFiles, PythonSourceFilesRequest, ..)",
          "Get(DigestContents, DigestSubset, ..)"
        ],
        "input_types": [
          "DistBuildChrootRequest",
          "UnionMembership"
        ],
        "name": "pants.backend.python.goals.setup_py.get_sources",
        "output_desc": "The sources required to build a distribution.\n\nIncludes some information derived from analyzing the source, namely the packages, namespace\npackages and resource files in the source.",
        "output_type": "DistBuildSources",
        "provider": "pants.backend.python"
      }
    ],
    "DistDir": [
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "GlobalOptions",
          "BuildRoot"
        ],
        "name": "pants.core.util_rules.distdir.get_distdir",
        "output_desc": "The directory to which we write distributable files.",
        "output_type": "DistDir",
        "provider": "pants.core"
      }
    ],
    "Docformatter": [
      {
        "description": null,
        "help": "The Python docformatter tool (https://github.com/myint/docformatter).",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_docformatter",
        "output_desc": null,
        "output_type": "Docformatter",
        "provider": "pants.backend.python.lint.docformatter"
      }
    ],
    "DockerBinary": [
      {
        "description": "Finding the `docker` binary and related tooling",
        "help": null,
        "input_gets": [
          "Get(Environment, EnvironmentRequest, ..)",
          "Get(BinaryPaths, BinaryPathRequest, ..)",
          "Get(BinaryShims, BinaryShimsRequest, ..)"
        ],
        "input_types": [
          "DockerBinaryRequest",
          "DockerOptions"
        ],
        "name": "pants.backend.docker.util_rules.docker_binary.find_docker",
        "output_desc": "The `docker` binary.",
        "output_type": "DockerBinary",
        "provider": "pants.backend.docker"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(DockerBinary, DockerBinaryRequest, ..)"
        ],
        "input_types": [],
        "name": "pants.backend.docker.util_rules.docker_binary.get_docker",
        "output_desc": "The `docker` binary.",
        "output_type": "DockerBinary",
        "provider": "pants.backend.docker"
      }
    ],
    "DockerBuildArgs": [
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "DockerBuildArgsRequest",
          "DockerOptions"
        ],
        "name": "pants.backend.docker.util_rules.docker_build_args.docker_build_args",
        "output_desc": null,
        "output_type": "DockerBuildArgs",
        "provider": "pants.backend.docker"
      }
    ],
    "DockerBuildContext": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(TransitiveTargets, TransitiveTargetsRequest, ..)",
          "Get(Targets, DependenciesRequest, ..)",
          "Get(SourceFiles, SourceFilesRequest, ..)",
          "Get(FieldSetsPerTarget, FieldSetsPerTargetRequest, ..)",
          "Get(DockerfileInfo, DockerfileInfoRequest, ..)",
          "Get(BuiltPackage, PackageFieldSet, ..)",
          "Get(Snapshot, MergeDigests, ..)",
          "Get(DockerBuildArgs, DockerBuildArgsRequest, ..)",
          "Get(DockerBuildEnvironment, DockerBuildEnvironmentRequest, ..)",
          "Get(Addresses, UnparsedAddressInputs, ..)"
        ],
        "input_types": [
          "DockerBuildContextRequest"
        ],
        "name": "pants.backend.docker.util_rules.docker_build_context.create_docker_build_context",
        "output_desc": "DockerBuildContext(build_args: 'DockerBuildArgs', digest: 'Digest', build_env: 'DockerBuildEnvironment', upstream_image_ids: 'tuple[str, ...]', dockerfile: 'str', interpolation_context: 'DockerInterpolationContext', copy_source_vs_context_source: 'tuple[tuple[str, str], ...]', stages: 'tuple[str, ...]')",
        "output_type": "DockerBuildContext",
        "provider": "pants.backend.docker"
      }
    ],
    "DockerBuildEnvironment": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(DockerBuildArgs, DockerBuildArgsRequest, ..)",
          "Get(Environment, EnvironmentRequest, ..)"
        ],
        "input_types": [
          "DockerBuildEnvironmentRequest",
          "DockerOptions"
        ],
        "name": "pants.backend.docker.util_rules.docker_build_env.docker_build_environment_vars",
        "output_desc": "DockerBuildEnvironment(environment: 'Environment')",
        "output_type": "DockerBuildEnvironment",
        "provider": "pants.backend.docker"
      }
    ],
    "DockerOptions": [
      {
        "description": null,
        "help": "Options for interacting with Docker.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_docker",
        "output_desc": null,
        "output_type": "DockerOptions",
        "provider": "pants.backend.docker"
      }
    ],
    "DockerfileInfo": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(WrappedTarget, Address, ..)",
          "Get(HydratedSources, HydrateSourcesRequest, ..)",
          "Get(ProcessResult, DockerfileParseRequest, ..)"
        ],
        "input_types": [
          "DockerfileInfoRequest"
        ],
        "name": "pants.backend.docker.subsystems.dockerfile_parser.parse_dockerfile",
        "output_desc": "DockerfileInfo(address: 'Address', digest: 'Digest', source: 'str', putative_target_addresses: 'tuple[str, ...]' = (), version_tags: 'tuple[str, ...]' = (), build_args: 'DockerBuildArgs' = DockerBuildArgs(), from_image_build_arg_names: 'tuple[str, ...]' = (), copy_sources: 'tuple[str, ...]' = ())",
        "output_type": "DockerfileInfo",
        "provider": "pants.backend.docker"
      }
    ],
    "DockerfileParser": [
      {
        "description": null,
        "help": "Used to parse Dockerfile build specs to infer their dependencies.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_dockerfile_parser",
        "output_desc": null,
        "output_type": "DockerfileParser",
        "provider": "pants.backend.docker"
      }
    ],
    "DownloadedExternalTool": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Digest, DownloadFile, ..)",
          "Get(ExtractedArchive, Digest, ..)",
          "Get(DigestEntries, Digest, ..)",
          "Get(Digest, CreateDigest, ..)"
        ],
        "input_types": [
          "ExternalToolRequest"
        ],
        "name": "pants.core.util_rules.external_tool.download_external_tool",
        "output_desc": "DownloadedExternalTool(digest: 'Digest', exe: 'str')",
        "output_type": "DownloadedExternalTool",
        "provider": "pants.core"
      }
    ],
    "EditedBuildFiles": [
      {
        "description": "Edit BUILD files with new targets",
        "help": null,
        "input_gets": [
          "Get(Paths, PathGlobs, ..)",
          "Get(DigestContents, PathGlobs, ..)",
          "Get(Digest, CreateDigest, ..)"
        ],
        "input_types": [
          "EditBuildFilesRequest",
          "TailorSubsystem"
        ],
        "name": "pants.core.goals.tailor.edit_build_files",
        "output_desc": "EditedBuildFiles(digest: 'Digest', created_paths: 'tuple[str, ...]', updated_paths: 'tuple[str, ...]')",
        "output_type": "EditedBuildFiles",
        "provider": "pants.core"
      }
    ],
    "Export": [
      {
        "description": "`export` goal",
        "help": null,
        "input_gets": [
          "Get(ExportResults, ExportRequest, ..)",
          "Get(Digest, AddPrefix, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(Environment, EnvironmentRequest, ..)",
          "Effect(InteractiveProcessResult, InteractiveProcess, ..)"
        ],
        "input_types": [
          "Console",
          "FilteredTargets",
          "Workspace",
          "UnionMembership",
          "BuildRoot",
          "DistDir"
        ],
        "name": "pants.core.goals.export.export",
        "output_desc": null,
        "output_type": "Export",
        "provider": "pants.core"
      }
    ],
    "ExportCodegen": [
      {
        "description": "`export-codegen` goal",
        "help": null,
        "input_gets": [
          "Get(HydratedSources, HydrateSourcesRequest, ..)",
          "Get(Digest, MergeDigests, ..)"
        ],
        "input_types": [
          "FilteredTargets",
          "UnionMembership",
          "Workspace",
          "DistDir",
          "RegisteredTargetTypes"
        ],
        "name": "pants.backend.codegen.export_codegen_goal.export_codegen",
        "output_desc": null,
        "output_type": "ExportCodegen",
        "provider": "pants.backend.docker"
      }
    ],
    "ExportCodegenSubsystem": [
      {
        "description": null,
        "help": "Write generated files to `dist/codegen` for use outside of Pants.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_export_codegen",
        "output_desc": null,
        "output_type": "ExportCodegenSubsystem",
        "provider": "pants.backend.docker"
      }
    ],
    "ExportPythonTool": [
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "AutoflakeExportSentinel",
          "Autoflake"
        ],
        "name": "pants.backend.python.lint.autoflake.subsystem.autoflake_export",
        "output_desc": "How to export a particular Python tool.\n\nIf `pex_request=None`, the tool will be skipped.",
        "output_type": "ExportPythonTool",
        "provider": "pants.backend.experimental.python.lint.autoflake"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "PyUpgradeExportSentinel",
          "PyUpgrade"
        ],
        "name": "pants.backend.python.lint.pyupgrade.subsystem.pyupgrade_export",
        "output_desc": "How to export a particular Python tool.\n\nIf `pex_request=None`, the tool will be skipped.",
        "output_type": "ExportPythonTool",
        "provider": "pants.backend.experimental.python.lint.pyupgrade"
      },
      {
        "description": "Determine all Python interpreter versions used by Pytest in your project (for `export` goal)",
        "help": null,
        "input_gets": [
          "Get(AllTargets, AllTargetsRequest, ..)",
          "Get(TransitiveTargets, TransitiveTargetsRequest, ..)"
        ],
        "input_types": [
          "PytestExportSentinel",
          "PyTest",
          "PythonSetup"
        ],
        "name": "pants.backend.python.subsystems.pytest.pytest_export",
        "output_desc": "How to export a particular Python tool.\n\nIf `pex_request=None`, the tool will be skipped.",
        "output_type": "ExportPythonTool",
        "provider": "pants.backend.python"
      },
      {
        "description": "Determine all Python interpreter versions used by Bandit in your project (for `export` goal)",
        "help": null,
        "input_gets": [
          "Get(AllTargets, AllTargetsRequest, ..)"
        ],
        "input_types": [
          "BanditExportSentinel",
          "Bandit",
          "PythonSetup"
        ],
        "name": "pants.backend.python.lint.bandit.subsystem.bandit_export",
        "output_desc": "How to export a particular Python tool.\n\nIf `pex_request=None`, the tool will be skipped.",
        "output_type": "ExportPythonTool",
        "provider": "pants.backend.python.lint.bandit"
      },
      {
        "description": "Determine Black interpreter constraints (for `export` goal)",
        "help": null,
        "input_gets": [
          "Get(AllTargets, AllTargetsRequest, ..)"
        ],
        "input_types": [
          "BlackExportSentinel",
          "Black",
          "PythonSetup"
        ],
        "name": "pants.backend.python.lint.black.subsystem.black_export",
        "output_desc": "How to export a particular Python tool.\n\nIf `pex_request=None`, the tool will be skipped.",
        "output_type": "ExportPythonTool",
        "provider": "pants.backend.python.lint.black"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "DocformatterExportSentinel",
          "Docformatter"
        ],
        "name": "pants.backend.python.lint.docformatter.subsystem.docformatter_export",
        "output_desc": "How to export a particular Python tool.\n\nIf `pex_request=None`, the tool will be skipped.",
        "output_type": "ExportPythonTool",
        "provider": "pants.backend.python.lint.docformatter"
      },
      {
        "description": "Determine all Python interpreter versions used by Flake8 in your project (for `export` goal)",
        "help": null,
        "input_gets": [
          "Get(AllTargets, AllTargetsRequest, ..)"
        ],
        "input_types": [
          "Flake8ExportSentinel",
          "Flake8",
          "Flake8FirstPartyPlugins",
          "PythonSetup"
        ],
        "name": "pants.backend.python.lint.flake8.subsystem.flake8_export",
        "output_desc": "How to export a particular Python tool.\n\nIf `pex_request=None`, the tool will be skipped.",
        "output_type": "ExportPythonTool",
        "provider": "pants.backend.python.lint.flake8"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "IsortExportSentinel",
          "Isort"
        ],
        "name": "pants.backend.python.lint.isort.subsystem.isort_export",
        "output_desc": "How to export a particular Python tool.\n\nIf `pex_request=None`, the tool will be skipped.",
        "output_type": "ExportPythonTool",
        "provider": "pants.backend.python.lint.isort"
      },
      {
        "description": "Determine all Python interpreter versions used by Pylint in your project (for `export` goal)",
        "help": null,
        "input_gets": [
          "Get(AllTargets, AllTargetsRequest, ..)",
          "Get(Targets, DependenciesRequest, ..)"
        ],
        "input_types": [
          "PylintExportSentinel",
          "Pylint",
          "PylintFirstPartyPlugins",
          "PythonSetup"
        ],
        "name": "pants.backend.python.lint.pylint.subsystem.pylint_export",
        "output_desc": "How to export a particular Python tool.\n\nIf `pex_request=None`, the tool will be skipped.",
        "output_type": "ExportPythonTool",
        "provider": "pants.backend.python.lint.pylint"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "YapfExportSentinel",
          "Yapf"
        ],
        "name": "pants.backend.python.lint.yapf.subsystem.yapf_export",
        "output_desc": "How to export a particular Python tool.\n\nIf `pex_request=None`, the tool will be skipped.",
        "output_type": "ExportPythonTool",
        "provider": "pants.backend.python.lint.yapf"
      },
      {
        "description": "Determine MyPy interpreter constraints (for `export` goal)",
        "help": null,
        "input_gets": [
          "Get(AllTargets, AllTargetsRequest, ..)",
          "Get(CoarsenedTargets, CoarsenedTargetsRequest, ..)"
        ],
        "input_types": [
          "MyPyExportSentinel",
          "MyPy",
          "PythonSetup",
          "MyPyFirstPartyPlugins"
        ],
        "name": "pants.backend.python.typecheck.mypy.subsystem.mypy_export",
        "output_desc": "How to export a particular Python tool.\n\nIf `pex_request=None`, the tool will be skipped.",
        "output_type": "ExportPythonTool",
        "provider": "pants.backend.python.typecheck.mypy"
      }
    ],
    "ExportResult": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Pex, RequirementsPexRequest, ..)",
          "Get(ProcessResult, Process, ..)",
          "Get(Digest, MergeDigests, ..)"
        ],
        "input_types": [
          "_ExportVenvRequest",
          "PythonSetup",
          "PexPEX"
        ],
        "name": "pants.backend.python.goals.export.export_virtualenv",
        "output_desc": "ExportResult(description: 'str', reldir: 'str', *, digest: 'Digest' = Digest('e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855', 0), post_processing_cmds: 'Iterable[PostProcessingCommand]' = ())",
        "output_type": "ExportResult",
        "provider": "pants.backend.python"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Pex, PexRequest, ..)",
          "Get(Digest, AddPrefix, ..)",
          "Get(Digest, MergeDigests, ..)"
        ],
        "input_types": [
          "ExportPythonTool",
          "PexPEX"
        ],
        "name": "pants.backend.python.goals.export.export_tool",
        "output_desc": "ExportResult(description: 'str', reldir: 'str', *, digest: 'Digest' = Digest('e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855', 0), post_processing_cmds: 'Iterable[PostProcessingCommand]' = ())",
        "output_type": "ExportResult",
        "provider": "pants.backend.python"
      }
    ],
    "ExportResults": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(ExportResult, _ExportVenvRequest, ..)",
          "Get(ExportPythonTool, ExportPythonToolSentinel, ..)",
          "Get(ExportResult, ExportPythonTool, ..)"
        ],
        "input_types": [
          "ExportVenvsRequest",
          "PythonSetup",
          "DistDir",
          "UnionMembership"
        ],
        "name": "pants.backend.python.goals.export.export_virtualenvs",
        "output_desc": null,
        "output_type": "ExportResults",
        "provider": "pants.backend.python"
      }
    ],
    "ExportSubsystem": [
      {
        "description": null,
        "help": "Export Pants data for use in other tools, such as IDEs.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_export",
        "output_desc": null,
        "output_type": "ExportSubsystem",
        "provider": "pants.core"
      }
    ],
    "ExportedTarget": [
      {
        "description": "Get exporting owner for target",
        "help": "Find the exported target that owns the given target (and therefore exports it).\n\nThe owner of T (i.e., the exported target in whose artifact T's code is published) is:\n\n 1. An exported target that depends on T (or is T itself).\n 2. Is T's closest filesystem ancestor among those satisfying 1.\n\nIf there are multiple such exported targets at the same degree of ancestry, the ownership\nis ambiguous and an error is raised. If there is no exported target that depends on T\nand is its ancestor, then there is no owner and an error is raised.",
        "input_gets": [
          "Get(Targets, AddressSpecs, ..)",
          "Get(TransitiveTargets, TransitiveTargetsRequest, ..)"
        ],
        "input_types": [
          "OwnedDependency"
        ],
        "name": "pants.backend.python.goals.setup_py.get_exporting_owner",
        "output_desc": "A target that explicitly exports a setup.py artifact, using a `provides=` stanza.\n\nThe code provided by this artifact can be from this target or from any targets it owns.",
        "output_type": "ExportedTarget",
        "provider": "pants.backend.python"
      }
    ],
    "ExportedTargetRequirements": [
      {
        "description": "Compute distribution's 3rd party requirements",
        "help": null,
        "input_gets": [
          "Get(TransitiveTargets, TransitiveTargetsRequest, ..)",
          "Get(ExportedTarget, OwnedDependency, ..)",
          "Get(Targets, DependenciesRequest, ..)",
          "Get(Targets, UnparsedAddressInputs, ..)",
          "Get(SetupKwargs, OwnedDependency, ..)"
        ],
        "input_types": [
          "DependencyOwner",
          "UnionMembership",
          "SetupPyGeneration"
        ],
        "name": "pants.backend.python.goals.setup_py.get_requirements",
        "output_desc": "The requirements of an ExportedTarget.\n\nIncludes:\n- The \"normal\" 3rdparty requirements of the ExportedTarget and all targets it owns.\n- The published versions of any other ExportedTargets it depends on.",
        "output_type": "ExportedTargetRequirements",
        "provider": "pants.backend.python"
      }
    ],
    "ExternalHelmPluginRequest": [
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "HelmUnitTestPluginBinding",
          "HelmUnitTestSubsystem"
        ],
        "name": "pants.backend.helm.subsystems.unittest.download_plugin_request",
        "output_desc": "ExternalHelmPluginRequest(plugin_name: 'str', tool_request: 'ExternalToolRequest')",
        "output_type": "ExternalHelmPluginRequest",
        "provider": "pants.backend.experimental.helm"
      }
    ],
    "ExtractedArchive": [
      {
        "description": "Extracting an archive file",
        "help": "If digest contains a single archive file, extract it, otherwise return the input digest.",
        "input_gets": [
          "Get(Snapshot, Digest, ..)",
          "Get(Digest, CreateDigest, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(UnzipBinary, UnzipBinaryRequest, ..)",
          "Get(TarBinary, TarBinaryRequest, ..)",
          "Get(GunzipBinary, GunzipBinaryRequest, ..)",
          "Get(ProcessResult, Process, ..)",
          "Get(Digest, RemovePrefix, ..)"
        ],
        "input_types": [
          "MaybeExtractArchiveRequest"
        ],
        "name": "pants.core.util_rules.archive.maybe_extract_archive",
        "output_desc": "The result of extracting an archive.",
        "output_type": "ExtractedArchive",
        "provider": "pants.core"
      }
    ],
    "FallibleAssemblyPreCompilation": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Digest, CreateDigest, ..)",
          "Get(GoSdkToolIDResult, GoSdkToolIDRequest, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(FallibleProcessResult, GoSdkProcess, ..)"
        ],
        "input_types": [
          "AssemblyPreCompilationRequest",
          "GoRoot"
        ],
        "name": "pants.backend.go.util_rules.assembly.setup_assembly_pre_compilation",
        "output_desc": "FallibleAssemblyPreCompilation(result: 'AssemblyPreCompilation | None', exit_code: 'int' = 0, stdout: 'str | None' = None, stderr: 'str | None' = None)",
        "output_type": "FallibleAssemblyPreCompilation",
        "provider": "pants.backend.experimental.go"
      }
    ],
    "FallibleBuildGoPackageRequest": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(TransitiveTargets, TransitiveTargetsRequest, ..)",
          "Get(DownloadedExternalTool, ExternalToolRequest, ..)",
          "Get(Digest, CreateDigest, ..)",
          "Get(SourceFiles, SourceFilesRequest, ..)",
          "Get(SourceRootsResult, SourceRootsRequest, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(SourcesPaths, SourcesPathsRequest, ..)",
          "Get(FallibleProcessResult, Process, ..)",
          "Get(Snapshot, Digest, ..)",
          "Get(BuildGoPackageRequest, BuildGoPackageTargetRequest, ..)"
        ],
        "input_types": [
          "_SetupGoProtobufPackageBuildRequest",
          "Protoc",
          "_SetupGoProtocPlugin",
          "ImportPathToPackages",
          "GoProtobufImportPathMapping",
          "PackageAnalyzerSetup"
        ],
        "name": "pants.backend.codegen.protobuf.go.rules.setup_full_package_build_request",
        "output_desc": "Request to build a package, but fallible if determining the request metadata failed.\n\nWhen creating \"synthetic\" packages, use `GoPackageRequest` directly. This type is only intended\nfor determining the package metadata of user code, which may fail to be analyzed.",
        "output_type": "FallibleBuildGoPackageRequest",
        "provider": "pants.backend.experimental.codegen.protobuf.go"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(HydratedSources, HydrateSourcesRequest, ..)",
          "Get(DigestContents, Digest, ..)",
          "Get(FallibleBuildGoPackageRequest, _SetupGoProtobufPackageBuildRequest, ..)"
        ],
        "input_types": [
          "GoCodegenBuildProtobufRequest",
          "GoProtobufImportPathMapping"
        ],
        "name": "pants.backend.codegen.protobuf.go.rules.setup_build_go_package_request_for_protobuf",
        "output_desc": "Request to build a package, but fallible if determining the request metadata failed.\n\nWhen creating \"synthetic\" packages, use `GoPackageRequest` directly. This type is only intended\nfor determining the package metadata of user code, which may fail to be analyzed.",
        "output_type": "FallibleBuildGoPackageRequest",
        "provider": "pants.backend.experimental.codegen.protobuf.go"
      },
      {
        "description": "Set up Go compilation request",
        "help": null,
        "input_gets": [
          "Get(WrappedTarget, Address, ..)",
          "Get(FallibleBuildGoPackageRequest, GoCodegenBuildRequest, ..)",
          "Get(FallibleFirstPartyPkgAnalysis, FirstPartyPkgAnalysisRequest, ..)",
          "Get(FallibleFirstPartyPkgDigest, FirstPartyPkgDigestRequest, ..)",
          "Get(GoModInfo, GoModInfoRequest, ..)",
          "Get(ThirdPartyPkgAnalysis, ThirdPartyPkgAnalysisRequest, ..)",
          "Get(Targets, DependenciesRequest, ..)",
          "Get(FallibleBuildGoPackageRequest, BuildGoPackageTargetRequest, ..)"
        ],
        "input_types": [
          "BuildGoPackageTargetRequest",
          "UnionMembership"
        ],
        "name": "pants.backend.go.util_rules.build_pkg_target.setup_build_go_package_target_request",
        "output_desc": "Request to build a package, but fallible if determining the request metadata failed.\n\nWhen creating \"synthetic\" packages, use `GoPackageRequest` directly. This type is only intended\nfor determining the package metadata of user code, which may fail to be analyzed.",
        "output_type": "FallibleBuildGoPackageRequest",
        "provider": "pants.backend.experimental.go"
      }
    ],
    "FallibleBuiltGoPackage": [
      {
        "description": "Compile with Go",
        "help": null,
        "input_gets": [
          "Get(FallibleBuiltGoPackage, BuildGoPackageRequest, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(ImportConfig, ImportConfigRequest, ..)",
          "Get(RenderedEmbedConfig, RenderEmbedConfigRequest, ..)",
          "Get(GoCompileActionIdResult, GoCompileActionIdRequest, ..)",
          "Get(FallibleAssemblyPreCompilation, AssemblyPreCompilationRequest, ..)",
          "Get(FallibleProcessResult, GoSdkProcess, ..)",
          "Get(AssemblyPostCompilation, AssemblyPostCompilationRequest, ..)",
          "Get(Digest, AddPrefix, ..)"
        ],
        "input_types": [
          "BuildGoPackageRequest",
          "GoRoot"
        ],
        "name": "pants.backend.go.util_rules.build_pkg.build_go_package",
        "output_desc": "Fallible version of `BuiltGoPackage` with error details.",
        "output_type": "FallibleBuiltGoPackage",
        "provider": "pants.backend.experimental.go"
      }
    ],
    "FallibleClasspathEntries": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(FallibleClasspathEntry, ClasspathEntryRequest, ..)"
        ],
        "input_types": [
          "ClasspathEntryRequests"
        ],
        "name": "pants.jvm.compile.compile_classpath_entries",
        "output_desc": null,
        "output_type": "FallibleClasspathEntries",
        "provider": "pants.backend.experimental.java"
      }
    ],
    "FallibleClasspathEntry": [
      {
        "description": "Fetch with coursier",
        "help": null,
        "input_gets": [
          "Get(CoursierResolvedLockfile, CoursierResolveKey, ..)",
          "Get(ClasspathEntry, CoursierLockfileEntry, ..)",
          "Get(Digest, MergeDigests, ..)"
        ],
        "input_types": [
          "CoursierFetchRequest"
        ],
        "name": "pants.jvm.resolve.coursier_fetch.fetch_with_coursier",
        "output_desc": "FallibleClasspathEntry(description: 'str', result: 'CompileResult', output: 'ClasspathEntry | None', exit_code: 'int', stdout: 'str | None' = None, stderr: 'str | None' = None)",
        "output_type": "FallibleClasspathEntry",
        "provider": "pants.backend.experimental.java"
      },
      {
        "description": "Compile with scalac",
        "help": null,
        "input_gets": [
          "Get(FallibleClasspathEntries, ClasspathDependenciesRequest, ..)",
          "Get(SourceFiles, SourceFilesRequest, ..)",
          "Get(ScalaPluginTargetsForTarget, ScalaPluginsForTargetRequest, ..)",
          "Get(ScalaPlugins, ScalaPluginsRequest, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(ToolClasspath, ToolClasspathRequest, ..)",
          "Get(JdkEnvironment, JdkRequest, ..)",
          "Get(FallibleProcessResult, JvmProcess, ..)"
        ],
        "input_types": [
          "ScalaSubsystem",
          "Scalac",
          "CompileScalaSourceRequest"
        ],
        "name": "pants.backend.scala.compile.scalac.compile_scala_source",
        "output_desc": "FallibleClasspathEntry(description: 'str', result: 'CompileResult', output: 'ClasspathEntry | None', exit_code: 'int', stdout: 'str | None' = None, stderr: 'str | None' = None)",
        "output_type": "FallibleClasspathEntry",
        "provider": "pants.backend.experimental.scala"
      },
      {
        "description": "Compile with javac",
        "help": null,
        "input_gets": [
          "Get(FallibleClasspathEntries, ClasspathEntryRequests, ..)",
          "Get(FallibleClasspathEntries, ClasspathDependenciesRequest, ..)",
          "Get(JavaInferredDependencies, JavaInferredDependenciesAndExportsRequest, ..)",
          "Get(SourceFiles, SourceFilesRequest, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(Digest, CreateDigest, ..)",
          "Get(JdkEnvironment, JdkRequest, ..)",
          "Get(FallibleProcessResult, JvmProcess, ..)",
          "Get(Snapshot, Digest, ..)",
          "Get(ProcessResult, Process, ..)"
        ],
        "input_types": [
          "BashBinary",
          "JavacSubsystem",
          "ZipBinary",
          "CompileJavaSourceRequest"
        ],
        "name": "pants.backend.java.compile.javac.compile_java_source",
        "output_desc": "FallibleClasspathEntry(description: 'str', result: 'CompileResult', output: 'ClasspathEntry | None', exit_code: 'int', stdout: 'str | None' = None, stderr: 'str | None' = None)",
        "output_type": "FallibleClasspathEntry",
        "provider": "pants.backend.experimental.java"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(FallibleClasspathEntries, ClasspathDependenciesRequest, ..)"
        ],
        "input_types": [
          "DeployJarClasspathEntryRequest"
        ],
        "name": "pants.jvm.package.deploy_jar.deploy_jar_classpath",
        "output_desc": "FallibleClasspathEntry(description: 'str', result: 'CompileResult', output: 'ClasspathEntry | None', exit_code: 'int', stdout: 'str | None' = None, stderr: 'str | None' = None)",
        "output_type": "FallibleClasspathEntry",
        "provider": "pants.backend.experimental.java"
      },
      {
        "description": "Assemble resources",
        "help": null,
        "input_gets": [
          "Get(FallibleClasspathEntries, ClasspathEntryRequests, ..)",
          "Get(FallibleClasspathEntries, ClasspathDependenciesRequest, ..)",
          "Get(StrippedSourceFiles, SourceFilesRequest, ..)",
          "Get(ProcessResult, Process, ..)",
          "Get(Digest, MergeDigests, ..)"
        ],
        "input_types": [
          "ZipBinary",
          "JvmResourcesRequest"
        ],
        "name": "pants.jvm.resources.assemble_resources_jar",
        "output_desc": "FallibleClasspathEntry(description: 'str', result: 'CompileResult', output: 'ClasspathEntry | None', exit_code: 'int', stdout: 'str | None' = None, stderr: 'str | None' = None)",
        "output_type": "FallibleClasspathEntry",
        "provider": "pants.backend.experimental.java"
      },
      {
        "description": "Compile with kotlinc",
        "help": null,
        "input_gets": [
          "Get(FallibleClasspathEntries, ClasspathDependenciesRequest, ..)",
          "Get(SourceFiles, SourceFilesRequest, ..)",
          "Get(KotlincPluginTargetsForTarget, KotlincPluginsForTargetRequest, ..)",
          "Get(KotlincPlugins, KotlincPluginsRequest, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(ToolClasspath, ToolClasspathRequest, ..)",
          "Get(JdkEnvironment, JdkRequest, ..)",
          "Get(FallibleProcessResult, JvmProcess, ..)"
        ],
        "input_types": [
          "KotlinSubsystem",
          "KotlincSubsystem",
          "CompileKotlinSourceRequest"
        ],
        "name": "pants.backend.kotlin.compile.kotlinc.compile_kotlin_source",
        "output_desc": "FallibleClasspathEntry(description: 'str', result: 'CompileResult', output: 'ClasspathEntry | None', exit_code: 'int', stdout: 'str | None' = None, stderr: 'str | None' = None)",
        "output_type": "FallibleClasspathEntry",
        "provider": "pants.backend.experimental.kotlin"
      }
    ],
    "FallibleFirstPartyPkgAnalysis": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(WrappedTarget, Address, ..)",
          "Get(FirstPartyPkgImportPath, FirstPartyPkgImportPathRequest, ..)",
          "Get(OwningGoMod, OwningGoModRequest, ..)",
          "Get(GoModInfo, GoModInfoRequest, ..)",
          "Get(HydratedSources, HydrateSourcesRequest, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(FallibleProcessResult, Process, ..)"
        ],
        "input_types": [
          "FirstPartyPkgAnalysisRequest",
          "PackageAnalyzerSetup",
          "GolangSubsystem"
        ],
        "name": "pants.backend.go.util_rules.first_party_pkg.analyze_first_party_package",
        "output_desc": "Metadata for a Go package, but fallible if our analysis failed.",
        "output_type": "FallibleFirstPartyPkgAnalysis",
        "provider": "pants.backend.experimental.go"
      }
    ],
    "FallibleFirstPartyPkgDigest": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(LoadedGoBinary, LoadedGoBinaryRequest, ..)",
          "Get(WrappedTarget, Address, ..)",
          "Get(FallibleFirstPartyPkgAnalysis, FirstPartyPkgAnalysisRequest, ..)",
          "Get(HydratedSources, HydrateSourcesRequest, ..)",
          "Get(Targets, DependenciesRequest, ..)",
          "Get(SourceFiles, SourceFilesRequest, ..)",
          "Get(Digest, RemovePrefix, ..)",
          "Get(Digest, AddPrefix, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(Digest, CreateDigest, ..)",
          "Get(FallibleProcessResult, Process, ..)"
        ],
        "input_types": [
          "FirstPartyPkgDigestRequest"
        ],
        "name": "pants.backend.go.util_rules.first_party_pkg.setup_first_party_pkg_digest",
        "output_desc": "The source files for a Go package, but fallible if embed preparation failed.",
        "output_type": "FallibleFirstPartyPkgDigest",
        "provider": "pants.backend.experimental.go"
      }
    ],
    "FallibleJavaSourceDependencyAnalysisResult": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(GenerateJvmLockfileFromTool, JavaParserToolLockfileSentinel, ..)",
          "Get(ToolClasspath, ToolClasspathRequest, ..)",
          "Get(Digest, AddPrefix, ..)",
          "Get(FallibleProcessResult, JvmProcess, ..)"
        ],
        "input_types": [
          "JavaParserCompiledClassfiles",
          "InternalJdk",
          "JavaSourceDependencyAnalysisRequest"
        ],
        "name": "pants.backend.java.dependency_inference.java_parser.analyze_java_source_dependencies",
        "output_desc": "FallibleJavaSourceDependencyAnalysisResult(process_result: 'FallibleProcessResult')",
        "output_type": "FallibleJavaSourceDependencyAnalysisResult",
        "provider": "pants.backend.experimental.java"
      }
    ],
    "FallibleKotlinSourceDependencyAnalysisResult": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(JdkEnvironment, JdkRequest, ..)",
          "Get(GenerateJvmLockfileFromTool, KotlinParserToolLockfileSentinel, ..)",
          "Get(ToolClasspath, ToolClasspathRequest, ..)",
          "Get(Digest, AddPrefix, ..)",
          "Get(FallibleProcessResult, JvmProcess, ..)"
        ],
        "input_types": [
          "KotlinParserCompiledClassfiles",
          "SourceFiles"
        ],
        "name": "pants.backend.kotlin.dependency_inference.kotlin_parser.analyze_kotlin_source_dependencies",
        "output_desc": "FallibleKotlinSourceDependencyAnalysisResult(process_result: 'FallibleProcessResult')",
        "output_type": "FallibleKotlinSourceDependencyAnalysisResult",
        "provider": "pants.backend.experimental.kotlin"
      }
    ],
    "FallibleScalaSourceDependencyAnalysisResult": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(GenerateJvmLockfileFromTool, ScalaParserToolLockfileSentinel, ..)",
          "Get(ToolClasspath, ToolClasspathRequest, ..)",
          "Get(Digest, AddPrefix, ..)",
          "Get(FallibleProcessResult, JvmProcess, ..)"
        ],
        "input_types": [
          "InternalJdk",
          "ScalaParserCompiledClassfiles",
          "AnalyzeScalaSourceRequest"
        ],
        "name": "pants.backend.scala.dependency_inference.scala_parser.analyze_scala_source_dependencies",
        "output_desc": "FallibleScalaSourceDependencyAnalysisResult(process_result: 'FallibleProcessResult')",
        "output_type": "FallibleScalaSourceDependencyAnalysisResult",
        "provider": "pants.backend.experimental.scala"
      }
    ],
    "FallibleThirdPartyPkgAnalysis": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Digest, DigestSubset, ..)"
        ],
        "input_types": [
          "AnalyzeThirdPartyPackageRequest"
        ],
        "name": "pants.backend.go.util_rules.third_party_pkg.analyze_go_third_party_package",
        "output_desc": "Metadata for a third-party Go package, but fallible if our analysis failed.",
        "output_type": "FallibleThirdPartyPkgAnalysis",
        "provider": "pants.backend.experimental.go"
      }
    ],
    "FetchedHelmArtifacts": [
      {
        "description": "Fetch third party Helm Chart artifacts",
        "help": null,
        "input_gets": [
          "Get(Digest, CreateDigest, ..)",
          "Get(ResolvedHelmArtifact, HelmArtifact, ..)",
          "Get(ProcessResult, HelmProcess, ..)",
          "Get(Digest, RemovePrefix, ..)",
          "Get(Snapshot, DigestSubset, ..)"
        ],
        "input_types": [
          "FetchHelmArfifactsRequest"
        ],
        "name": "pants.backend.helm.resolve.fetch.fetch_helm_artifacts",
        "output_desc": null,
        "output_type": "FetchedHelmArtifacts",
        "provider": "pants.backend.experimental.helm"
      }
    ],
    "FieldDefaultFactoryResult": [
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "JvmResolveFieldDefaultFactoryRequest",
          "JvmSubsystem"
        ],
        "name": "pants.jvm.target_types.jvm_resolve_field_default_factory",
        "output_desc": "A wrapper for a function which computes the default value of a Field.",
        "output_type": "FieldDefaultFactoryResult",
        "provider": "pants.backend.experimental.java"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "PythonResolveFieldDefaultFactoryRequest",
          "PythonSetup"
        ],
        "name": "pants.backend.python.target_types_rules.python_resolve_field_default_factory",
        "output_desc": "A wrapper for a function which computes the default value of a Field.",
        "output_type": "FieldDefaultFactoryResult",
        "provider": "pants.backend.python"
      }
    ],
    "FileDigest": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Digest, DigestSubset, ..)",
          "Get(DigestEntries, Digest, ..)"
        ],
        "input_types": [
          "ExtractFileDigest"
        ],
        "name": "pants.jvm.util_rules.digest_to_file_digest",
        "output_desc": null,
        "output_type": "FileDigest",
        "provider": "pants.backend.experimental.java"
      }
    ],
    "Filedeps": [
      {
        "description": "`filedeps` goal",
        "help": null,
        "input_gets": [
          "Get(TransitiveTargets, TransitiveTargetsRequest, ..)",
          "Get(UnexpandedTargets, Addresses, ..)",
          "Get(BuildFileAddress, Address, ..)",
          "Get(HydratedSources, HydrateSourcesRequest, ..)"
        ],
        "input_types": [
          "Console",
          "FiledepsSubsystem",
          "BuildRoot",
          "Addresses"
        ],
        "name": "pants.backend.project_info.filedeps.file_deps",
        "output_desc": null,
        "output_type": "Filedeps",
        "provider": "pants.backend.project_info"
      }
    ],
    "FiledepsSubsystem": [
      {
        "description": null,
        "help": "List all source and BUILD files a target depends on.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_filedeps",
        "output_desc": null,
        "output_type": "FiledepsSubsystem",
        "provider": "pants.backend.project_info"
      }
    ],
    "FilterGoal": [
      {
        "description": "`filter` goal",
        "help": null,
        "input_gets": [],
        "input_types": [
          "UnexpandedTargets",
          "FilterSubsystem",
          "Console",
          "RegisteredTargetTypes"
        ],
        "name": "pants.backend.project_info.filter_targets.filter_targets",
        "output_desc": null,
        "output_type": "FilterGoal",
        "provider": "pants.backend.project_info"
      }
    ],
    "FilterSubsystem": [
      {
        "description": null,
        "help": "Filter the input targets based on various criteria.\n\nMost of the filtering options below are comma-separated lists of filtering criteria, with an implied logical OR between them, so that a target passes the filter if it matches any of the criteria in the list. A '-' prefix inverts the sense of the entire comma-separated list, so that a target passes the filter only if it matches none of the criteria in the list.\n\nEach of the filtering options may be specified multiple times, with an implied logical AND between them.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_filter",
        "output_desc": null,
        "output_type": "FilterSubsystem",
        "provider": "pants.backend.project_info"
      }
    ],
    "FinalizedSetupKwargs": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(ExportedTargetRequirements, DependencyOwner, ..)",
          "Get(SetupKwargs, ExportedTarget, ..)",
          "Get(DigestContents, PathGlobs, ..)",
          "Get(ResolvedPythonDistributionEntryPoints, ResolvePythonDistributionEntryPointsRequest, ..)"
        ],
        "input_types": [
          "GenerateSetupPyRequest"
        ],
        "name": "pants.backend.python.goals.setup_py.determine_finalized_setup_kwargs",
        "output_desc": "The final kwargs used for the `setup()` function, after Pants added requirements and sources\ninformation.",
        "output_type": "FinalizedSetupKwargs",
        "provider": "pants.backend.python"
      }
    ],
    "FirstPartyHelmChartMapping": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(HelmChartMetadata, HelmChartMetaSourceField, ..)"
        ],
        "input_types": [
          "AllHelmChartTargets"
        ],
        "name": "pants.backend.helm.dependency_inference.chart.first_party_helm_chart_mapping",
        "output_desc": null,
        "output_type": "FirstPartyHelmChartMapping",
        "provider": "pants.backend.experimental.helm"
      }
    ],
    "FirstPartyPkgImportPath": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(OwningGoMod, OwningGoModRequest, ..)",
          "Get(GoModInfo, GoModInfoRequest, ..)"
        ],
        "input_types": [
          "FirstPartyPkgImportPathRequest"
        ],
        "name": "pants.backend.go.util_rules.first_party_pkg.compute_first_party_package_import_path",
        "output_desc": "The derived import path of a first party package, based on its owning go.mod.\n\nUse `FirstPartyPkgAnalysis` instead for more detailed information like parsed imports. Use\n`FirstPartyPkgDigest` for source files and embed config.",
        "output_type": "FirstPartyPkgImportPath",
        "provider": "pants.backend.experimental.go"
      }
    ],
    "FirstPartyPythonMappingImpl": [
      {
        "description": "Creating map of first party Python targets to Python modules",
        "help": null,
        "input_gets": [
          "Get(StrippedFileName, StrippedFileNameRequest, ..)"
        ],
        "input_types": [
          "FirstPartyPythonTargetsMappingMarker",
          "AllPythonTargets",
          "PythonSetup"
        ],
        "name": "pants.backend.python.dependency_inference.module_mapper.map_first_party_python_targets_to_modules",
        "output_desc": "A mapping of each resolve name to the first-party module names contained and their owning\naddresses.\n\nThis contains the modules from a specific implementation, e.g. a codegen backend. All\nimplementations then get merged.",
        "output_type": "FirstPartyPythonMappingImpl",
        "provider": "pants.backend.python"
      },
      {
        "description": "Creating map of Protobuf targets to generated Python modules",
        "help": null,
        "input_gets": [
          "Get(StrippedFileName, StrippedFileNameRequest, ..)"
        ],
        "input_types": [
          "AllProtobufTargets",
          "PythonSetup",
          "PythonProtobufMappingMarker"
        ],
        "name": "pants.backend.codegen.protobuf.python.python_protobuf_module_mapper.map_protobuf_to_python_modules",
        "output_desc": "A mapping of each resolve name to the first-party module names contained and their owning\naddresses.\n\nThis contains the modules from a specific implementation, e.g. a codegen backend. All\nimplementations then get merged.",
        "output_type": "FirstPartyPythonMappingImpl",
        "provider": "pants.backend.codegen.protobuf.python"
      },
      {
        "description": "Creating map of Thrift targets to generated Python modules",
        "help": null,
        "input_gets": [
          "Get(ParsedThrift, ParsedThriftRequest, ..)"
        ],
        "input_types": [
          "AllThriftTargets",
          "PythonSetup",
          "PythonThriftMappingMarker"
        ],
        "name": "pants.backend.codegen.thrift.apache.python.python_thrift_module_mapper.map_thrift_to_python_modules",
        "output_desc": "A mapping of each resolve name to the first-party module names contained and their owning\naddresses.\n\nThis contains the modules from a specific implementation, e.g. a codegen backend. All\nimplementations then get merged.",
        "output_type": "FirstPartyPythonMappingImpl",
        "provider": "pants.backend.codegen.thrift.apache.python"
      }
    ],
    "FirstPartyPythonModuleMapping": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(FirstPartyPythonMappingImpl, FirstPartyPythonMappingImplMarker, ..)"
        ],
        "input_types": [
          "UnionMembership"
        ],
        "name": "pants.backend.python.dependency_inference.module_mapper.merge_first_party_module_mappings",
        "output_desc": "A merged mapping of each resolve name to the first-party module names contained and their\nowning addresses.\n\nThis mapping may have been constructed from multiple distinct implementations, e.g.\nimplementations for each codegen backends.",
        "output_type": "FirstPartyPythonModuleMapping",
        "provider": "pants.backend.python"
      }
    ],
    "Flake8": [
      {
        "description": null,
        "help": "The Flake8 Python linter (https://flake8.pycqa.org/).",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_flake8",
        "output_desc": null,
        "output_type": "Flake8",
        "provider": "pants.backend.python.lint.flake8"
      }
    ],
    "Flake8FirstPartyPlugins": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Addresses, UnparsedAddressInputs, ..)",
          "Get(TransitiveTargets, TransitiveTargetsRequest, ..)",
          "Get(StrippedPythonSourceFiles, PythonSourceFilesRequest, ..)",
          "Get(Digest, AddPrefix, ..)"
        ],
        "input_types": [
          "Flake8"
        ],
        "name": "pants.backend.python.lint.flake8.subsystem.flake8_first_party_plugins",
        "output_desc": "Flake8FirstPartyPlugins(requirement_strings: 'FrozenOrderedSet[str]', interpreter_constraints_fields: 'FrozenOrderedSet[InterpreterConstraintsField]', sources_digest: 'Digest')",
        "output_type": "Flake8FirstPartyPlugins",
        "provider": "pants.backend.python.lint.flake8"
      }
    ],
    "Fmt": [
      {
        "description": "`fmt` goal",
        "help": null,
        "input_gets": [
          "Get(_LanguageFmtResults, _LanguageFmtRequest, ..)",
          "Get(Digest, MergeDigests, ..)"
        ],
        "input_types": [
          "Console",
          "FilteredTargets",
          "FmtSubsystem",
          "Workspace",
          "UnionMembership"
        ],
        "name": "pants.core.goals.fmt.fmt",
        "output_desc": null,
        "output_type": "Fmt",
        "provider": "pants.core"
      }
    ],
    "FmtResult": [
      {
        "description": "Format with buf format",
        "help": null,
        "input_gets": [
          "Get(ProcessResult, BufFormatRequest, ..)",
          "Get(Snapshot, Digest, ..)"
        ],
        "input_types": [
          "BufFormatRequest",
          "BufSubsystem"
        ],
        "name": "pants.backend.codegen.protobuf.lint.buf.format_rules.run_buf_format",
        "output_desc": "FmtResult(input: 'Snapshot', output: 'Snapshot', stdout: 'str', stderr: 'str', formatter_name: 'str')",
        "output_type": "FmtResult",
        "provider": "pants.backend.codegen.protobuf.lint.buf"
      },
      {
        "description": "Format with gofmt",
        "help": null,
        "input_gets": [
          "Get(ProcessResult, Process, ..)",
          "Get(Snapshot, Digest, ..)"
        ],
        "input_types": [
          "GofmtRequest",
          "GofmtSubsystem",
          "GoRoot"
        ],
        "name": "pants.backend.go.lint.gofmt.rules.gofmt_fmt",
        "output_desc": "FmtResult(input: 'Snapshot', output: 'Snapshot', stdout: 'str', stderr: 'str', formatter_name: 'str')",
        "output_type": "FmtResult",
        "provider": "pants.backend.experimental.go"
      },
      {
        "description": "Format with Google Java Format",
        "help": null,
        "input_gets": [
          "Get(GenerateJvmLockfileFromTool, GoogleJavaFormatToolLockfileSentinel, ..)",
          "Get(ToolClasspath, ToolClasspathRequest, ..)",
          "Get(ProcessResult, JvmProcess, ..)",
          "Get(Snapshot, Digest, ..)"
        ],
        "input_types": [
          "GoogleJavaFormatRequest",
          "GoogleJavaFormatSubsystem",
          "InternalJdk"
        ],
        "name": "pants.backend.java.lint.google_java_format.rules.google_java_format_fmt",
        "output_desc": "FmtResult(input: 'Snapshot', output: 'Snapshot', stdout: 'str', stderr: 'str', formatter_name: 'str')",
        "output_type": "FmtResult",
        "provider": "pants.backend.experimental.java.lint.google_java_format"
      },
      {
        "description": "Format with Ktlint",
        "help": null,
        "input_gets": [
          "Get(GenerateJvmLockfileFromTool, KtlintToolLockfileSentinel, ..)",
          "Get(ToolClasspath, ToolClasspathRequest, ..)",
          "Get(ProcessResult, JvmProcess, ..)",
          "Get(Snapshot, Digest, ..)"
        ],
        "input_types": [
          "KtlintRequest",
          "KtlintSubsystem",
          "InternalJdk"
        ],
        "name": "pants.backend.kotlin.lint.ktlint.rules.ktlint_fmt",
        "output_desc": "FmtResult(input: 'Snapshot', output: 'Snapshot', stdout: 'str', stderr: 'str', formatter_name: 'str')",
        "output_type": "FmtResult",
        "provider": "pants.backend.experimental.kotlin.lint.ktlint"
      },
      {
        "description": "Format with Autoflake",
        "help": null,
        "input_gets": [
          "Get(VenvPex, PexRequest, ..)",
          "Get(ProcessResult, VenvPexProcess, ..)",
          "Get(Snapshot, Digest, ..)"
        ],
        "input_types": [
          "AutoflakeRequest",
          "Autoflake"
        ],
        "name": "pants.backend.python.lint.autoflake.rules.autoflake_fmt",
        "output_desc": "FmtResult(input: 'Snapshot', output: 'Snapshot', stdout: 'str', stderr: 'str', formatter_name: 'str')",
        "output_type": "FmtResult",
        "provider": "pants.backend.experimental.python.lint.autoflake"
      },
      {
        "description": "Format with pyupgrade",
        "help": null,
        "input_gets": [
          "Get(VenvPex, PexRequest, ..)",
          "Get(FallibleProcessResult, VenvPexProcess, ..)",
          "Get(Snapshot, Digest, ..)"
        ],
        "input_types": [
          "PyUpgradeRequest",
          "PyUpgrade"
        ],
        "name": "pants.backend.python.lint.pyupgrade.rules.pyupgrade_fmt",
        "output_desc": "FmtResult(input: 'Snapshot', output: 'Snapshot', stdout: 'str', stderr: 'str', formatter_name: 'str')",
        "output_type": "FmtResult",
        "provider": "pants.backend.experimental.python.lint.pyupgrade"
      },
      {
        "description": "Format with scalafmt",
        "help": null,
        "input_gets": [
          "Get(Setup, ScalafmtRequest, ..)",
          "Get(ProcessResult, JvmProcess, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(Snapshot, Digest, ..)"
        ],
        "input_types": [
          "ScalafmtRequest",
          "ScalafmtSubsystem"
        ],
        "name": "pants.backend.scala.lint.scalafmt.rules.scalafmt_fmt",
        "output_desc": "FmtResult(input: 'Snapshot', output: 'Snapshot', stdout: 'str', stderr: 'str', formatter_name: 'str')",
        "output_type": "FmtResult",
        "provider": "pants.backend.experimental.scala.lint.scalafmt"
      },
      {
        "description": "Format with `terraform fmt`",
        "help": null,
        "input_gets": [
          "Get(StyleSetup, StyleSetupRequest, ..)",
          "Get(ProcessResult, TerraformProcess, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(Snapshot, Digest, ..)"
        ],
        "input_types": [
          "TffmtRequest",
          "TfFmtSubsystem"
        ],
        "name": "pants.backend.terraform.lint.tffmt.tffmt.tffmt_fmt",
        "output_desc": "FmtResult(input: 'Snapshot', output: 'Snapshot', stdout: 'str', stderr: 'str', formatter_name: 'str')",
        "output_type": "FmtResult",
        "provider": "pants.backend.experimental.terraform"
      },
      {
        "description": "Format with Black",
        "help": null,
        "input_gets": [
          "Get(VenvPex, PexRequest, ..)",
          "Get(ConfigFiles, ConfigFilesRequest, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(ProcessResult, VenvPexProcess, ..)",
          "Get(Snapshot, Digest, ..)"
        ],
        "input_types": [
          "BlackRequest",
          "Black",
          "PythonSetup"
        ],
        "name": "pants.backend.python.lint.black.rules.black_fmt",
        "output_desc": "FmtResult(input: 'Snapshot', output: 'Snapshot', stdout: 'str', stderr: 'str', formatter_name: 'str')",
        "output_type": "FmtResult",
        "provider": "pants.backend.python.lint.black"
      },
      {
        "description": "Format with docformatter",
        "help": null,
        "input_gets": [
          "Get(VenvPex, PexRequest, ..)",
          "Get(ProcessResult, VenvPexProcess, ..)",
          "Get(Snapshot, Digest, ..)"
        ],
        "input_types": [
          "DocformatterRequest",
          "Docformatter"
        ],
        "name": "pants.backend.python.lint.docformatter.rules.docformatter_fmt",
        "output_desc": "FmtResult(input: 'Snapshot', output: 'Snapshot', stdout: 'str', stderr: 'str', formatter_name: 'str')",
        "output_type": "FmtResult",
        "provider": "pants.backend.python.lint.docformatter"
      },
      {
        "description": "Format with isort",
        "help": null,
        "input_gets": [
          "Get(VenvPex, PexRequest, ..)",
          "Get(ConfigFiles, ConfigFilesRequest, ..)",
          "Get(PexResolveInfo, VenvPex, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(ProcessResult, VenvPexProcess, ..)",
          "Get(Snapshot, Digest, ..)"
        ],
        "input_types": [
          "IsortRequest",
          "Isort"
        ],
        "name": "pants.backend.python.lint.isort.rules.isort_fmt",
        "output_desc": "FmtResult(input: 'Snapshot', output: 'Snapshot', stdout: 'str', stderr: 'str', formatter_name: 'str')",
        "output_type": "FmtResult",
        "provider": "pants.backend.python.lint.isort"
      },
      {
        "description": "Format with yapf",
        "help": null,
        "input_gets": [
          "Get(VenvPex, PexRequest, ..)",
          "Get(ConfigFiles, ConfigFilesRequest, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(ProcessResult, VenvPexProcess, ..)",
          "Get(Snapshot, Digest, ..)"
        ],
        "input_types": [
          "YapfRequest",
          "Yapf"
        ],
        "name": "pants.backend.python.lint.yapf.rules.yapf_fmt",
        "output_desc": "FmtResult(input: 'Snapshot', output: 'Snapshot', stdout: 'str', stderr: 'str', formatter_name: 'str')",
        "output_type": "FmtResult",
        "provider": "pants.backend.python.lint.yapf"
      },
      {
        "description": "Format with shfmt",
        "help": null,
        "input_gets": [
          "Get(DownloadedExternalTool, ExternalToolRequest, ..)",
          "Get(ConfigFiles, ConfigFilesRequest, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(ProcessResult, Process, ..)",
          "Get(Snapshot, Digest, ..)"
        ],
        "input_types": [
          "ShfmtRequest",
          "Shfmt"
        ],
        "name": "pants.backend.shell.lint.shfmt.rules.shfmt_fmt",
        "output_desc": "FmtResult(input: 'Snapshot', output: 'Snapshot', stdout: 'str', stderr: 'str', formatter_name: 'str')",
        "output_type": "FmtResult",
        "provider": "pants.backend.shell.lint.shfmt"
      }
    ],
    "FmtSubsystem": [
      {
        "description": null,
        "help": "Autoformat source code.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_fmt",
        "output_desc": null,
        "output_type": "FmtSubsystem",
        "provider": "pants.core"
      }
    ],
    "GenerateJvmLockfile": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(ValidateJvmArtifactsForResolveResult, ValidateJvmArtifactsForResolveRequest, ..)"
        ],
        "input_types": [
          "_ValidateJvmArtifactsRequest",
          "UnionMembership",
          "JvmSubsystem"
        ],
        "name": "pants.jvm.goals.lockfile.validate_jvm_artifacts_for_resolve",
        "output_desc": "GenerateJvmLockfile(resolve_name: 'str', lockfile_dest: 'str', artifacts: 'ArtifactRequirements')",
        "output_type": "GenerateJvmLockfile",
        "provider": "pants.backend.experimental.java"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(ArtifactRequirements, GatherJvmCoordinatesRequest, ..)"
        ],
        "input_types": [
          "GenerateJvmLockfileFromTool"
        ],
        "name": "pants.jvm.resolve.jvm_tool.setup_lockfile_request_from_tool",
        "output_desc": "GenerateJvmLockfile(resolve_name: 'str', lockfile_dest: 'str', artifacts: 'ArtifactRequirements')",
        "output_type": "GenerateJvmLockfile",
        "provider": "pants.backend.experimental.java"
      }
    ],
    "GenerateJvmLockfileFromTool": [
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "ScalapbcToolLockfileSentinel",
          "ScalaPBSubsystem"
        ],
        "name": "pants.backend.codegen.protobuf.scala.rules.generate_scalapbc_lockfile_request",
        "output_desc": "Create a `GenerateJvmLockfile` request for a JVM tool.\n\nWe allow tools to either use coordinates or addresses to `jvm_artifact` targets for the artifact\ninputs. This is a convenience to parse those artifact inputs to create a standardized\n`GenerateJvmLockfile`.",
        "output_type": "GenerateJvmLockfileFromTool",
        "provider": "pants.backend.experimental.codegen.protobuf.scala"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "JavaParserToolLockfileSentinel"
        ],
        "name": "pants.backend.java.dependency_inference.java_parser.generate_java_parser_lockfile_request",
        "output_desc": "Create a `GenerateJvmLockfile` request for a JVM tool.\n\nWe allow tools to either use coordinates or addresses to `jvm_artifact` targets for the artifact\ninputs. This is a convenience to parse those artifact inputs to create a standardized\n`GenerateJvmLockfile`.",
        "output_type": "GenerateJvmLockfileFromTool",
        "provider": "pants.backend.experimental.java"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "JunitToolLockfileSentinel",
          "JUnit"
        ],
        "name": "pants.jvm.test.junit.generate_junit_lockfile_request",
        "output_desc": "Create a `GenerateJvmLockfile` request for a JVM tool.\n\nWe allow tools to either use coordinates or addresses to `jvm_artifact` targets for the artifact\ninputs. This is a convenience to parse those artifact inputs to create a standardized\n`GenerateJvmLockfile`.",
        "output_type": "GenerateJvmLockfileFromTool",
        "provider": "pants.backend.experimental.java"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "GoogleJavaFormatToolLockfileSentinel",
          "GoogleJavaFormatSubsystem"
        ],
        "name": "pants.backend.java.lint.google_java_format.rules.generate_google_java_format_lockfile_request",
        "output_desc": "Create a `GenerateJvmLockfile` request for a JVM tool.\n\nWe allow tools to either use coordinates or addresses to `jvm_artifact` targets for the artifact\ninputs. This is a convenience to parse those artifact inputs to create a standardized\n`GenerateJvmLockfile`.",
        "output_type": "GenerateJvmLockfileFromTool",
        "provider": "pants.backend.experimental.java.lint.google_java_format"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "KotlinParserToolLockfileSentinel"
        ],
        "name": "pants.backend.kotlin.dependency_inference.kotlin_parser.generate_kotlin_parser_lockfile_request",
        "output_desc": "Create a `GenerateJvmLockfile` request for a JVM tool.\n\nWe allow tools to either use coordinates or addresses to `jvm_artifact` targets for the artifact\ninputs. This is a convenience to parse those artifact inputs to create a standardized\n`GenerateJvmLockfile`.",
        "output_type": "GenerateJvmLockfileFromTool",
        "provider": "pants.backend.experimental.kotlin"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "KtlintToolLockfileSentinel",
          "KtlintSubsystem"
        ],
        "name": "pants.backend.kotlin.lint.ktlint.rules.generate_ktlint_lockfile_request",
        "output_desc": "Create a `GenerateJvmLockfile` request for a JVM tool.\n\nWe allow tools to either use coordinates or addresses to `jvm_artifact` targets for the artifact\ninputs. This is a convenience to parse those artifact inputs to create a standardized\n`GenerateJvmLockfile`.",
        "output_type": "GenerateJvmLockfileFromTool",
        "provider": "pants.backend.experimental.kotlin.lint.ktlint"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "ScalatestToolLockfileSentinel",
          "Scalatest"
        ],
        "name": "pants.backend.scala.test.scalatest.generate_scalatest_lockfile_request",
        "output_desc": "Create a `GenerateJvmLockfile` request for a JVM tool.\n\nWe allow tools to either use coordinates or addresses to `jvm_artifact` targets for the artifact\ninputs. This is a convenience to parse those artifact inputs to create a standardized\n`GenerateJvmLockfile`.",
        "output_type": "GenerateJvmLockfileFromTool",
        "provider": "pants.backend.experimental.scala"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "ScalaParserToolLockfileSentinel"
        ],
        "name": "pants.backend.scala.dependency_inference.scala_parser.generate_scala_parser_lockfile_request",
        "output_desc": "Create a `GenerateJvmLockfile` request for a JVM tool.\n\nWe allow tools to either use coordinates or addresses to `jvm_artifact` targets for the artifact\ninputs. This is a convenience to parse those artifact inputs to create a standardized\n`GenerateJvmLockfile`.",
        "output_type": "GenerateJvmLockfileFromTool",
        "provider": "pants.backend.experimental.scala"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "ScalafmtToolLockfileSentinel",
          "ScalafmtSubsystem"
        ],
        "name": "pants.backend.scala.lint.scalafmt.rules.generate_scalafmt_lockfile_request",
        "output_desc": "Create a `GenerateJvmLockfile` request for a JVM tool.\n\nWe allow tools to either use coordinates or addresses to `jvm_artifact` targets for the artifact\ninputs. This is a convenience to parse those artifact inputs to create a standardized\n`GenerateJvmLockfile`.",
        "output_type": "GenerateJvmLockfileFromTool",
        "provider": "pants.backend.experimental.scala.lint.scalafmt"
      }
    ],
    "GenerateLockfileResult": [
      {
        "description": "Generate Python lockfile",
        "help": null,
        "input_gets": [
          "Get(Digest, CreateDigest, ..)",
          "Get(ProcessResult, PexCliProcess, ..)",
          "Get(MaybeWarnPythonRepos, MaybeWarnPythonReposRequest, ..)",
          "Get(VenvPex, PexRequest, ..)",
          "Get(ProcessResult, VenvPexProcess, ..)",
          "Get(DigestContents, Digest, ..)"
        ],
        "input_types": [
          "GeneratePythonLockfile",
          "PoetrySubsystem",
          "GenerateLockfilesSubsystem",
          "PythonRepos",
          "PythonSetup"
        ],
        "name": "pants.backend.python.goals.lockfile.generate_lockfile",
        "output_desc": "The result of generating a lockfile for a particular resolve.",
        "output_type": "GenerateLockfileResult",
        "provider": "pants.backend.docker"
      },
      {
        "description": "Generate JVM lockfile",
        "help": null,
        "input_gets": [
          "Get(CoursierResolvedLockfile, ArtifactRequirements, ..)",
          "Get(Digest, CreateDigest, ..)"
        ],
        "input_types": [
          "GenerateJvmLockfile"
        ],
        "name": "pants.jvm.goals.lockfile.generate_jvm_lockfile",
        "output_desc": "The result of generating a lockfile for a particular resolve.",
        "output_type": "GenerateLockfileResult",
        "provider": "pants.backend.experimental.java"
      }
    ],
    "GenerateLockfilesGoal": [
      {
        "description": "`generate-lockfiles` goal",
        "help": null,
        "input_gets": [
          "Get(KnownUserResolveNames, KnownUserResolveNamesRequest, ..)",
          "Get(UserGenerateLockfiles, RequestedUserResolveNames, ..)",
          "Get(WrappedGenerateLockfile, GenerateToolLockfileSentinel, ..)",
          "Get(GenerateLockfileResult, GenerateLockfile, ..)",
          "Get(Digest, MergeDigests, ..)"
        ],
        "input_types": [
          "Workspace",
          "UnionMembership",
          "GenerateLockfilesSubsystem"
        ],
        "name": "pants.core.goals.generate_lockfiles.generate_lockfiles_goal",
        "output_desc": null,
        "output_type": "GenerateLockfilesGoal",
        "provider": "pants.core"
      }
    ],
    "GenerateLockfilesSubsystem": [
      {
        "description": null,
        "help": "Generate lockfiles for Python third-party dependencies.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_generate_lockfiles",
        "output_desc": null,
        "output_type": "GenerateLockfilesSubsystem",
        "provider": "pants.core"
      }
    ],
    "GenerateOneBSPBuildTargetResult": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Targets, BSPBuildTargetInternal, ..)",
          "Get(BSPBuildTargetsMetadataResult, BSPBuildTargetsMetadataRequest, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(BSPBuildTargetSourcesInfo, BSPBuildTargetInternal, ..)"
        ],
        "input_types": [
          "GenerateOneBSPBuildTargetRequest",
          "UnionMembership",
          "BuildRoot"
        ],
        "name": "pants.bsp.util_rules.targets.generate_one_bsp_build_target_request",
        "output_desc": "GenerateOneBSPBuildTargetResult(build_target: 'BuildTarget', digest: 'Digest' = Digest('e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855', 0))",
        "output_type": "GenerateOneBSPBuildTargetResult",
        "provider": "pants.core"
      }
    ],
    "GeneratePythonLockfile": [
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "LambdexLockfileSentinel",
          "Lambdex",
          "PythonSetup"
        ],
        "name": "pants.backend.python.subsystems.lambdex.setup_lambdex_lockfile",
        "output_desc": "GeneratePythonLockfile(resolve_name: 'str', lockfile_dest: 'str', requirements: 'FrozenOrderedSet[str]', interpreter_constraints: 'InterpreterConstraints', use_pex: 'bool')",
        "output_type": "GeneratePythonLockfile",
        "provider": "pants.backend.awslambda.python"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "MypyProtobufLockfileSentinel",
          "PythonProtobufMypyPlugin",
          "PythonSetup"
        ],
        "name": "pants.backend.codegen.protobuf.python.python_protobuf_subsystem.setup_mypy_protobuf_lockfile",
        "output_desc": "GeneratePythonLockfile(resolve_name: 'str', lockfile_dest: 'str', requirements: 'FrozenOrderedSet[str]', interpreter_constraints: 'InterpreterConstraints', use_pex: 'bool')",
        "output_type": "GeneratePythonLockfile",
        "provider": "pants.backend.codegen.protobuf.python"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "DockerfileParserLockfileSentinel",
          "DockerfileParser",
          "PythonSetup"
        ],
        "name": "pants.backend.docker.subsystems.dockerfile_parser.setup_lockfile_request",
        "output_desc": "GeneratePythonLockfile(resolve_name: 'str', lockfile_dest: 'str', requirements: 'FrozenOrderedSet[str]', interpreter_constraints: 'InterpreterConstraints', use_pex: 'bool')",
        "output_type": "GeneratePythonLockfile",
        "provider": "pants.backend.docker"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "TwineLockfileSentinel",
          "TwineSubsystem",
          "PythonSetup"
        ],
        "name": "pants.backend.python.subsystems.twine.setup_twine_lockfile",
        "output_desc": "GeneratePythonLockfile(resolve_name: 'str', lockfile_dest: 'str', requirements: 'FrozenOrderedSet[str]', interpreter_constraints: 'InterpreterConstraints', use_pex: 'bool')",
        "output_type": "GeneratePythonLockfile",
        "provider": "pants.backend.experimental.python"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "AutoflakeLockfileSentinel",
          "Autoflake",
          "PythonSetup"
        ],
        "name": "pants.backend.python.lint.autoflake.subsystem.setup_autoflake_lockfile",
        "output_desc": "GeneratePythonLockfile(resolve_name: 'str', lockfile_dest: 'str', requirements: 'FrozenOrderedSet[str]', interpreter_constraints: 'InterpreterConstraints', use_pex: 'bool')",
        "output_type": "GeneratePythonLockfile",
        "provider": "pants.backend.experimental.python.lint.autoflake"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "PyUpgradeLockfileSentinel",
          "PyUpgrade",
          "PythonSetup"
        ],
        "name": "pants.backend.python.lint.pyupgrade.subsystem.setup_pyupgrade_lockfile",
        "output_desc": "GeneratePythonLockfile(resolve_name: 'str', lockfile_dest: 'str', requirements: 'FrozenOrderedSet[str]', interpreter_constraints: 'InterpreterConstraints', use_pex: 'bool')",
        "output_type": "GeneratePythonLockfile",
        "provider": "pants.backend.experimental.python.lint.pyupgrade"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "TerraformHcl2ParserLockfileSentinel",
          "TerraformHcl2Parser",
          "PythonSetup"
        ],
        "name": "pants.backend.terraform.dependency_inference.setup_lockfile_request",
        "output_desc": "GeneratePythonLockfile(resolve_name: 'str', lockfile_dest: 'str', requirements: 'FrozenOrderedSet[str]', interpreter_constraints: 'InterpreterConstraints', use_pex: 'bool')",
        "output_type": "GeneratePythonLockfile",
        "provider": "pants.backend.experimental.terraform"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "CoveragePyLockfileSentinel",
          "CoverageSubsystem",
          "PythonSetup"
        ],
        "name": "pants.backend.python.goals.coverage_py.setup_coverage_lockfile",
        "output_desc": "GeneratePythonLockfile(resolve_name: 'str', lockfile_dest: 'str', requirements: 'FrozenOrderedSet[str]', interpreter_constraints: 'InterpreterConstraints', use_pex: 'bool')",
        "output_type": "GeneratePythonLockfile",
        "provider": "pants.backend.python"
      },
      {
        "description": "Determine all Python interpreter versions used by iPython in your project (for lockfile generation)",
        "help": null,
        "input_gets": [
          "Get(AllTargets, AllTargetsRequest, ..)"
        ],
        "input_types": [
          "IPythonLockfileSentinel",
          "IPython",
          "PythonSetup"
        ],
        "name": "pants.backend.python.subsystems.ipython.setup_ipython_lockfile",
        "output_desc": "GeneratePythonLockfile(resolve_name: 'str', lockfile_dest: 'str', requirements: 'FrozenOrderedSet[str]', interpreter_constraints: 'InterpreterConstraints', use_pex: 'bool')",
        "output_type": "GeneratePythonLockfile",
        "provider": "pants.backend.python"
      },
      {
        "description": "Determine all Python interpreter versions used by Pytest in your project (for lockfile generation)",
        "help": null,
        "input_gets": [
          "Get(AllTargets, AllTargetsRequest, ..)",
          "Get(TransitiveTargets, TransitiveTargetsRequest, ..)"
        ],
        "input_types": [
          "PytestLockfileSentinel",
          "PyTest",
          "PythonSetup"
        ],
        "name": "pants.backend.python.subsystems.pytest.setup_pytest_lockfile",
        "output_desc": "GeneratePythonLockfile(resolve_name: 'str', lockfile_dest: 'str', requirements: 'FrozenOrderedSet[str]', interpreter_constraints: 'InterpreterConstraints', use_pex: 'bool')",
        "output_type": "GeneratePythonLockfile",
        "provider": "pants.backend.python"
      },
      {
        "description": "Determine all Python interpreter versions used by setuptools in your project (for lockfile generation)",
        "help": null,
        "input_gets": [
          "Get(AllTargets, AllTargetsRequest, ..)",
          "Get(TransitiveTargets, TransitiveTargetsRequest, ..)"
        ],
        "input_types": [
          "SetuptoolsLockfileSentinel",
          "Setuptools",
          "PythonSetup"
        ],
        "name": "pants.backend.python.subsystems.setuptools.setup_setuptools_lockfile",
        "output_desc": "GeneratePythonLockfile(resolve_name: 'str', lockfile_dest: 'str', requirements: 'FrozenOrderedSet[str]', interpreter_constraints: 'InterpreterConstraints', use_pex: 'bool')",
        "output_type": "GeneratePythonLockfile",
        "provider": "pants.backend.python"
      },
      {
        "description": "Determine all Python interpreter versions used by Bandit in your project (for lockfile generation)",
        "help": null,
        "input_gets": [
          "Get(AllTargets, AllTargetsRequest, ..)"
        ],
        "input_types": [
          "BanditLockfileSentinel",
          "Bandit",
          "PythonSetup"
        ],
        "name": "pants.backend.python.lint.bandit.subsystem.setup_bandit_lockfile",
        "output_desc": "GeneratePythonLockfile(resolve_name: 'str', lockfile_dest: 'str', requirements: 'FrozenOrderedSet[str]', interpreter_constraints: 'InterpreterConstraints', use_pex: 'bool')",
        "output_type": "GeneratePythonLockfile",
        "provider": "pants.backend.python.lint.bandit"
      },
      {
        "description": "Determine Black interpreter constraints (for lockfile generation)",
        "help": null,
        "input_gets": [
          "Get(AllTargets, AllTargetsRequest, ..)"
        ],
        "input_types": [
          "BlackLockfileSentinel",
          "Black",
          "PythonSetup"
        ],
        "name": "pants.backend.python.lint.black.subsystem.setup_black_lockfile",
        "output_desc": "GeneratePythonLockfile(resolve_name: 'str', lockfile_dest: 'str', requirements: 'FrozenOrderedSet[str]', interpreter_constraints: 'InterpreterConstraints', use_pex: 'bool')",
        "output_type": "GeneratePythonLockfile",
        "provider": "pants.backend.python.lint.black"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "DocformatterLockfileSentinel",
          "Docformatter",
          "PythonSetup"
        ],
        "name": "pants.backend.python.lint.docformatter.subsystem.setup_lockfile_request",
        "output_desc": "GeneratePythonLockfile(resolve_name: 'str', lockfile_dest: 'str', requirements: 'FrozenOrderedSet[str]', interpreter_constraints: 'InterpreterConstraints', use_pex: 'bool')",
        "output_type": "GeneratePythonLockfile",
        "provider": "pants.backend.python.lint.docformatter"
      },
      {
        "description": "Determine all Python interpreter versions used by Flake8 in your project (for lockfile generation)",
        "help": null,
        "input_gets": [
          "Get(AllTargets, AllTargetsRequest, ..)"
        ],
        "input_types": [
          "Flake8LockfileSentinel",
          "Flake8FirstPartyPlugins",
          "Flake8",
          "PythonSetup"
        ],
        "name": "pants.backend.python.lint.flake8.subsystem.setup_flake8_lockfile",
        "output_desc": "GeneratePythonLockfile(resolve_name: 'str', lockfile_dest: 'str', requirements: 'FrozenOrderedSet[str]', interpreter_constraints: 'InterpreterConstraints', use_pex: 'bool')",
        "output_type": "GeneratePythonLockfile",
        "provider": "pants.backend.python.lint.flake8"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "IsortLockfileSentinel",
          "Isort",
          "PythonSetup"
        ],
        "name": "pants.backend.python.lint.isort.subsystem.setup_isort_lockfile",
        "output_desc": "GeneratePythonLockfile(resolve_name: 'str', lockfile_dest: 'str', requirements: 'FrozenOrderedSet[str]', interpreter_constraints: 'InterpreterConstraints', use_pex: 'bool')",
        "output_type": "GeneratePythonLockfile",
        "provider": "pants.backend.python.lint.isort"
      },
      {
        "description": "Determine all Python interpreter versions used by Pylint in your project (for lockfile generation)",
        "help": null,
        "input_gets": [
          "Get(AllTargets, AllTargetsRequest, ..)",
          "Get(Targets, DependenciesRequest, ..)"
        ],
        "input_types": [
          "PylintLockfileSentinel",
          "PylintFirstPartyPlugins",
          "Pylint",
          "PythonSetup"
        ],
        "name": "pants.backend.python.lint.pylint.subsystem.setup_pylint_lockfile",
        "output_desc": "GeneratePythonLockfile(resolve_name: 'str', lockfile_dest: 'str', requirements: 'FrozenOrderedSet[str]', interpreter_constraints: 'InterpreterConstraints', use_pex: 'bool')",
        "output_type": "GeneratePythonLockfile",
        "provider": "pants.backend.python.lint.pylint"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "YapfLockfileSentinel",
          "Yapf",
          "PythonSetup"
        ],
        "name": "pants.backend.python.lint.yapf.subsystem.setup_yapf_lockfile",
        "output_desc": "GeneratePythonLockfile(resolve_name: 'str', lockfile_dest: 'str', requirements: 'FrozenOrderedSet[str]', interpreter_constraints: 'InterpreterConstraints', use_pex: 'bool')",
        "output_type": "GeneratePythonLockfile",
        "provider": "pants.backend.python.lint.yapf"
      },
      {
        "description": "Determine MyPy interpreter constraints (for lockfile generation)",
        "help": null,
        "input_gets": [
          "Get(AllTargets, AllTargetsRequest, ..)",
          "Get(CoarsenedTargets, CoarsenedTargetsRequest, ..)"
        ],
        "input_types": [
          "MyPyLockfileSentinel",
          "MyPyFirstPartyPlugins",
          "MyPy",
          "PythonSetup"
        ],
        "name": "pants.backend.python.typecheck.mypy.subsystem.setup_mypy_lockfile",
        "output_desc": "GeneratePythonLockfile(resolve_name: 'str', lockfile_dest: 'str', requirements: 'FrozenOrderedSet[str]', interpreter_constraints: 'InterpreterConstraints', use_pex: 'bool')",
        "output_type": "GeneratePythonLockfile",
        "provider": "pants.backend.python.typecheck.mypy"
      }
    ],
    "GeneratedSetupPy": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(FinalizedSetupKwargs, GenerateSetupPyRequest, ..)",
          "Get(Digest, CreateDigest, ..)"
        ],
        "input_types": [
          "GenerateSetupPyRequest"
        ],
        "name": "pants.backend.python.goals.setup_py.generate_setup_py",
        "output_desc": "GeneratedSetupPy(digest: 'Digest')",
        "output_type": "GeneratedSetupPy",
        "provider": "pants.backend.python"
      }
    ],
    "GeneratedSources": [
      {
        "description": "Relocating loose files for `relocated_files` targets",
        "help": null,
        "input_gets": [
          "Get(Targets, UnparsedAddressInputs, ..)",
          "Get(HydratedSources, HydrateSourcesRequest, ..)",
          "Get(Snapshot, MergeDigests, ..)",
          "Get(Snapshot, RemovePrefix, ..)",
          "Get(Snapshot, AddPrefix, ..)"
        ],
        "input_types": [
          "RelocateFilesViaCodegenRequest"
        ],
        "name": "pants.core.target_types.relocate_files",
        "output_desc": "GeneratedSources(snapshot: 'Snapshot')",
        "output_type": "GeneratedSources",
        "provider": "pants.core"
      },
      {
        "description": "Generate Python from Protobuf",
        "help": null,
        "input_gets": [
          "Get(DownloadedExternalTool, ExternalToolRequest, ..)",
          "Get(Digest, CreateDigest, ..)",
          "Get(TransitiveTargets, TransitiveTargetsRequest, ..)",
          "Get(StrippedSourceFiles, SourceFilesRequest, ..)",
          "Get(VenvPex, VenvPexRequest, ..)",
          "Get(PexResolveInfo, VenvPex, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(ProcessResult, Process, ..)",
          "Get(Digest, RemovePrefix, ..)",
          "Get(SourceRoot, SourceRootRequest, ..)",
          "Get(Snapshot, AddPrefix, ..)",
          "Get(Snapshot, Digest, ..)"
        ],
        "input_types": [
          "GeneratePythonFromProtobufRequest",
          "Protoc",
          "GrpcPythonPlugin",
          "PythonProtobufSubsystem",
          "PythonProtobufMypyPlugin",
          "PexEnvironment"
        ],
        "name": "pants.backend.codegen.protobuf.python.rules.generate_python_from_protobuf",
        "output_desc": "GeneratedSources(snapshot: 'Snapshot')",
        "output_type": "GeneratedSources",
        "provider": "pants.backend.codegen.protobuf.python"
      },
      {
        "description": "Generate Python from Thrift",
        "help": null,
        "input_gets": [
          "Get(GeneratedThriftSources, GenerateThriftSourcesRequest, ..)",
          "Get(SourceRoot, SourceRootRequest, ..)",
          "Get(Snapshot, AddPrefix, ..)",
          "Get(Snapshot, Digest, ..)"
        ],
        "input_types": [
          "GeneratePythonFromThriftRequest",
          "ThriftPythonSubsystem"
        ],
        "name": "pants.backend.codegen.thrift.apache.python.rules.generate_python_from_thrift",
        "output_desc": "GeneratedSources(snapshot: 'Snapshot')",
        "output_type": "GeneratedSources",
        "provider": "pants.backend.codegen.thrift.apache.python"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "GenerateDockerContextFiles"
        ],
        "name": "pants.backend.docker.util_rules.docker_build_context.hydrate_input_sources",
        "output_desc": "GeneratedSources(snapshot: 'Snapshot')",
        "output_type": "GeneratedSources",
        "provider": "pants.backend.docker"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Snapshot, CreateDigest, ..)"
        ],
        "input_types": [
          "GenerateDockerfileRequest"
        ],
        "name": "pants.backend.docker.util_rules.dockerfile.hydrate_dockerfile",
        "output_desc": "GeneratedSources(snapshot: 'Snapshot')",
        "output_type": "GeneratedSources",
        "provider": "pants.backend.docker"
      },
      {
        "description": "Generate Go source files from Protobuf",
        "help": null,
        "input_gets": [
          "Get(DownloadedExternalTool, ExternalToolRequest, ..)",
          "Get(Digest, CreateDigest, ..)",
          "Get(TransitiveTargets, TransitiveTargetsRequest, ..)",
          "Get(StrippedSourceFiles, SourceFilesRequest, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(ProcessResult, Process, ..)",
          "Get(Digest, RemovePrefix, ..)",
          "Get(SourceRoot, SourceRootRequest, ..)",
          "Get(Snapshot, AddPrefix, ..)",
          "Get(Snapshot, Digest, ..)"
        ],
        "input_types": [
          "GenerateGoFromProtobufRequest",
          "Protoc",
          "_SetupGoProtocPlugin"
        ],
        "name": "pants.backend.codegen.protobuf.go.rules.generate_go_from_protobuf",
        "output_desc": "GeneratedSources(snapshot: 'Snapshot')",
        "output_type": "GeneratedSources",
        "provider": "pants.backend.experimental.codegen.protobuf.go"
      },
      {
        "description": "Generate Java from Protobuf",
        "help": null,
        "input_gets": [
          "Get(DownloadedExternalTool, ExternalToolRequest, ..)",
          "Get(Digest, CreateDigest, ..)",
          "Get(TransitiveTargets, TransitiveTargetsRequest, ..)",
          "Get(StrippedSourceFiles, SourceFilesRequest, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(ProcessResult, Process, ..)",
          "Get(Digest, RemovePrefix, ..)",
          "Get(SourceRoot, SourceRootRequest, ..)",
          "Get(Snapshot, AddPrefix, ..)",
          "Get(Snapshot, Digest, ..)"
        ],
        "input_types": [
          "GenerateJavaFromProtobufRequest",
          "Protoc"
        ],
        "name": "pants.backend.codegen.protobuf.java.rules.generate_java_from_protobuf",
        "output_desc": "GeneratedSources(snapshot: 'Snapshot')",
        "output_type": "GeneratedSources",
        "provider": "pants.backend.experimental.codegen.protobuf.java"
      },
      {
        "description": "Generate Scala from Protobuf",
        "help": null,
        "input_gets": [
          "Get(GenerateJvmLockfileFromTool, ScalapbcToolLockfileSentinel, ..)",
          "Get(DownloadedExternalTool, ExternalToolRequest, ..)",
          "Get(ToolClasspath, ToolClasspathRequest, ..)",
          "Get(Digest, CreateDigest, ..)",
          "Get(TransitiveTargets, TransitiveTargetsRequest, ..)",
          "Get(Environment, EnvironmentRequest, ..)",
          "Get(StrippedSourceFiles, SourceFilesRequest, ..)",
          "Get(MaterializedJvmPlugins, MaterializeJvmPluginsRequest, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(ProcessResult, JvmProcess, ..)",
          "Get(Digest, RemovePrefix, ..)",
          "Get(SourceRoot, SourceRootRequest, ..)",
          "Get(Snapshot, AddPrefix, ..)",
          "Get(Snapshot, Digest, ..)"
        ],
        "input_types": [
          "GenerateScalaFromProtobufRequest",
          "Protoc",
          "ScalaPBSubsystem",
          "ScalaPBShimCompiledClassfiles",
          "InternalJdk"
        ],
        "name": "pants.backend.codegen.protobuf.scala.rules.generate_scala_from_protobuf",
        "output_desc": "GeneratedSources(snapshot: 'Snapshot')",
        "output_type": "GeneratedSources",
        "provider": "pants.backend.experimental.codegen.protobuf.scala"
      },
      {
        "description": "Running shell command",
        "help": null,
        "input_gets": [
          "Get(ProcessResult, ShellCommandProcessRequest, ..)",
          "Get(Snapshot, AddPrefix, ..)"
        ],
        "input_types": [
          "GenerateFilesFromShellCommandRequest"
        ],
        "name": "pants.backend.shell.shell_command.run_shell_command",
        "output_desc": "GeneratedSources(snapshot: 'Snapshot')",
        "output_type": "GeneratedSources",
        "provider": "pants.backend.shell"
      }
    ],
    "GeneratedTargets": [
      {
        "description": "Generate `go_third_party_package` targets from `go_mod` target",
        "help": null,
        "input_gets": [
          "Get(GoModInfo, GoModInfoRequest, ..)",
          "Get(AllThirdPartyPackages, AllThirdPartyPackagesRequest, ..)"
        ],
        "input_types": [
          "GenerateTargetsFromGoModRequest",
          "UnionMembership"
        ],
        "name": "pants.backend.go.target_type_rules.generate_targets_from_go_mod",
        "output_desc": "A mapping of the address of generated targets to the targets themselves.",
        "output_type": "GeneratedTargets",
        "provider": "pants.backend.experimental.go"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "GenerateFromPantsRequirementsRequest"
        ],
        "name": "pants.backend.plugin_development.pants_requirements.generate_from_pants_requirements",
        "output_desc": "A mapping of the address of generated targets to the targets themselves.",
        "output_type": "GeneratedTargets",
        "provider": "pants.backend.plugin_development"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "GenerateTargetsFromPexBinaries",
          "UnionMembership"
        ],
        "name": "pants.backend.python.target_types_rules.generate_targets_from_pex_binaries",
        "output_desc": "A mapping of the address of generated targets to the targets themselves.",
        "output_type": "GeneratedTargets",
        "provider": "pants.backend.python"
      },
      {
        "description": "Generate `python_requirement` targets from Pipfile.lock",
        "help": null,
        "input_gets": [
          "Get(DigestContents, PathGlobs, ..)"
        ],
        "input_types": [
          "GenerateFromPipenvRequirementsRequest",
          "PythonSetup"
        ],
        "name": "pants.backend.python.macros.pipenv_requirements.generate_from_pipenv_requirement",
        "output_desc": "A mapping of the address of generated targets to the targets themselves.",
        "output_type": "GeneratedTargets",
        "provider": "pants.backend.python"
      },
      {
        "description": "Generate `python_requirement` targets from Poetry pyproject.toml",
        "help": null,
        "input_gets": [
          "Get(DigestContents, PathGlobs, ..)"
        ],
        "input_types": [
          "GenerateFromPoetryRequirementsRequest",
          "BuildRoot",
          "PythonSetup"
        ],
        "name": "pants.backend.python.macros.poetry_requirements.generate_from_python_requirement",
        "output_desc": "A mapping of the address of generated targets to the targets themselves.",
        "output_type": "GeneratedTargets",
        "provider": "pants.backend.python"
      },
      {
        "description": "Generate `python_requirement` targets from requirements.txt",
        "help": null,
        "input_gets": [
          "Get(DigestContents, PathGlobs, ..)"
        ],
        "input_types": [
          "GenerateFromPythonRequirementsRequest",
          "PythonSetup"
        ],
        "name": "pants.backend.python.macros.python_requirements.generate_from_python_requirement",
        "output_desc": "A mapping of the address of generated targets to the targets themselves.",
        "output_type": "GeneratedTargets",
        "provider": "pants.backend.python"
      }
    ],
    "GeneratedTestMain": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(LoadedGoBinary, LoadedGoBinaryRequest, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(FallibleProcessResult, Process, ..)"
        ],
        "input_types": [
          "GenerateTestMainRequest"
        ],
        "name": "pants.backend.go.util_rules.tests_analysis.generate_testmain",
        "output_desc": "GeneratedTestMain(digest: 'Digest', has_tests: 'bool', has_xtests: 'bool', failed_exit_code_and_stderr: 'tuple[int, str] | None')",
        "output_type": "GeneratedTestMain",
        "provider": "pants.backend.experimental.go"
      }
    ],
    "GeneratedThriftSources": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(TransitiveTargets, TransitiveTargetsRequest, ..)",
          "Get(Digest, CreateDigest, ..)",
          "Get(SourceFiles, SourceFilesRequest, ..)",
          "Get(SourceRootsResult, SourceRootsRequest, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(ProcessResult, Process, ..)",
          "Get(Snapshot, RemovePrefix, ..)"
        ],
        "input_types": [
          "GenerateThriftSourcesRequest",
          "ApacheThriftSetup"
        ],
        "name": "pants.backend.codegen.thrift.apache.rules.generate_apache_thrift_sources",
        "output_desc": "GeneratedThriftSources(snapshot: 'Snapshot')",
        "output_type": "GeneratedThriftSources",
        "provider": "pants.backend.codegen.thrift.apache.python"
      }
    ],
    "GitBinary": [
      {
        "description": "Finding the `git` binary",
        "help": null,
        "input_gets": [
          "Get(BinaryPaths, BinaryPathRequest, ..)"
        ],
        "input_types": [],
        "name": "pants.core.util_rules.system_binaries.find_git",
        "output_desc": null,
        "output_type": "GitBinary",
        "provider": "pants.core"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "GitBinaryRequest",
          "GitBinary"
        ],
        "name": "pants.core.util_rules.system_binaries.find_git_wrapper",
        "output_desc": null,
        "output_type": "GitBinary",
        "provider": "pants.core"
      }
    ],
    "GlobalOptions": [
      {
        "description": null,
        "help": "Options to control the overall behavior of Pants.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_",
        "output_desc": null,
        "output_type": "GlobalOptions",
        "provider": "pants.core"
      }
    ],
    "GlobalRequirementConstraints": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(DigestContents, PathGlobs, ..)"
        ],
        "input_types": [
          "PythonSetup"
        ],
        "name": "pants.backend.python.util_rules.pex_from_targets.determine_global_requirement_constraints",
        "output_desc": "Global constraints specified by the `[python].requirement_constraints` setting, if any.",
        "output_type": "GlobalRequirementConstraints",
        "provider": "pants.backend.python"
      }
    ],
    "GoBinaryMainPackage": [
      {
        "description": "Determine first-party package used by `go_binary` target",
        "help": null,
        "input_gets": [
          "Get(WrappedTarget, AddressInput, ..)",
          "Get(Targets, AddressSpecs, ..)",
          "Get(WrappedTarget, Address, ..)"
        ],
        "input_types": [
          "GoBinaryMainPackageRequest"
        ],
        "name": "pants.backend.go.target_type_rules.determine_main_pkg_for_go_binary",
        "output_desc": "GoBinaryMainPackage(address: 'Address')",
        "output_type": "GoBinaryMainPackage",
        "provider": "pants.backend.experimental.go"
      }
    ],
    "GoCompileActionIdResult": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(GoSdkToolIDResult, GoSdkToolIDRequest, ..)"
        ],
        "input_types": [
          "GoCompileActionIdRequest",
          "GoRoot"
        ],
        "name": "pants.backend.go.util_rules.build_pkg.compute_compile_action_id",
        "output_desc": "GoCompileActionIdResult(action_id: 'str')",
        "output_type": "GoCompileActionIdResult",
        "provider": "pants.backend.experimental.go"
      }
    ],
    "GoModInfo": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(WrappedTarget, Address, ..)",
          "Get(HydratedSources, HydrateSourcesRequest, ..)",
          "Get(ProcessResult, GoSdkProcess, ..)"
        ],
        "input_types": [
          "GoModInfoRequest"
        ],
        "name": "pants.backend.go.util_rules.go_mod.determine_go_mod_info",
        "output_desc": "GoModInfo(import_path: 'str', digest: 'Digest', mod_path: 'str', minimum_go_version: 'str | None')",
        "output_type": "GoModInfo",
        "provider": "pants.backend.experimental.go"
      }
    ],
    "GoProtobufImportPathMapping": [
      {
        "description": "Map import paths for all Go Protobuf targets.",
        "help": null,
        "input_gets": [
          "Get(HydratedSources, HydrateSourcesRequest, ..)",
          "Get(DigestContents, Digest, ..)"
        ],
        "input_types": [
          "AllProtobufTargets"
        ],
        "name": "pants.backend.codegen.protobuf.go.rules.map_import_paths_of_all_go_protobuf_targets",
        "output_desc": "Maps import paths of Go Protobuf packages to the addresses.",
        "output_type": "GoProtobufImportPathMapping",
        "provider": "pants.backend.experimental.codegen.protobuf.go"
      }
    ],
    "GoRoot": [
      {
        "description": "Find Go binary",
        "help": null,
        "input_gets": [
          "Get(Environment, EnvironmentRequest, ..)",
          "Get(BinaryPaths, BinaryPathRequest, ..)",
          "Get(ProcessResult, Process, ..)"
        ],
        "input_types": [
          "GolangSubsystem"
        ],
        "name": "pants.backend.go.subsystems.golang.setup_goroot",
        "output_desc": "Path to the Go installation (the `GOROOT`).",
        "output_type": "GoRoot",
        "provider": "pants.backend.experimental.go"
      }
    ],
    "GoSdkRunSetup": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Digest, CreateDigest, ..)"
        ],
        "input_types": [
          "GoRoot"
        ],
        "name": "pants.backend.go.util_rules.sdk.go_sdk_invoke_setup",
        "output_desc": "GoSdkRunSetup(digest: 'Digest', script: 'FileContent')",
        "output_type": "GoSdkRunSetup",
        "provider": "pants.backend.experimental.go"
      }
    ],
    "GoSdkToolIDResult": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(ProcessResult, GoSdkProcess, ..)"
        ],
        "input_types": [
          "GoSdkToolIDRequest"
        ],
        "name": "pants.backend.go.util_rules.sdk.compute_go_tool_id",
        "output_desc": "GoSdkToolIDResult(tool_name: 'str', tool_id: 'str')",
        "output_type": "GoSdkToolIDResult",
        "provider": "pants.backend.experimental.go"
      }
    ],
    "GoStdLibImports": [
      {
        "description": "Determine Go std lib's imports",
        "help": null,
        "input_gets": [
          "Get(ProcessResult, GoSdkProcess, ..)"
        ],
        "input_types": [],
        "name": "pants.backend.go.util_rules.import_analysis.determine_go_std_lib_imports",
        "output_desc": "A mapping of standard library import paths to the `.a` static file paths for that import\npath.\n\nFor example, \"net/smtp\": \"/absolute_path_to_goroot/pkg/darwin_arm64/net/smtp.a\".",
        "output_type": "GoStdLibImports",
        "provider": "pants.backend.experimental.go"
      }
    ],
    "GoTestSubsystem": [
      {
        "description": null,
        "help": "Options for Go tests.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_go_test",
        "output_desc": null,
        "output_type": "GoTestSubsystem",
        "provider": "pants.backend.experimental.go"
      }
    ],
    "GofmtSubsystem": [
      {
        "description": null,
        "help": "Gofmt-specific options.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_gofmt",
        "output_desc": null,
        "output_type": "GofmtSubsystem",
        "provider": "pants.backend.experimental.go"
      }
    ],
    "GolangSubsystem": [
      {
        "description": null,
        "help": "Options for Golang support.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_golang",
        "output_desc": null,
        "output_type": "GolangSubsystem",
        "provider": "pants.backend.experimental.go"
      }
    ],
    "GoogleJavaFormatSubsystem": [
      {
        "description": null,
        "help": "Google Java Format (https://github.com/google/google-java-format)",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_google_java_format",
        "output_desc": null,
        "output_type": "GoogleJavaFormatSubsystem",
        "provider": "pants.backend.experimental.java.lint.google_java_format"
      }
    ],
    "GrpcPythonPlugin": [
      {
        "description": null,
        "help": "The gRPC Protobuf plugin for Python.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_grpc_python_plugin",
        "output_desc": null,
        "output_type": "GrpcPythonPlugin",
        "provider": "pants.backend.codegen.protobuf.python"
      }
    ],
    "GunzipBinary": [
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "PythonBinary"
        ],
        "name": "pants.core.util_rules.system_binaries.find_gunzip",
        "output_desc": "GunzipBinary(python: 'PythonBinary')",
        "output_type": "GunzipBinary",
        "provider": "pants.core"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "GunzipBinaryRequest",
          "GunzipBinary"
        ],
        "name": "pants.core.util_rules.system_binaries.find_gunzip_wrapper",
        "output_desc": "GunzipBinary(python: 'PythonBinary')",
        "output_type": "GunzipBinary",
        "provider": "pants.core"
      }
    ],
    "Hadolint": [
      {
        "description": null,
        "help": "A linter for Dockerfiles.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_hadolint",
        "output_desc": null,
        "output_type": "Hadolint",
        "provider": "pants.backend.docker.lint.hadolint"
      }
    ],
    "HandleJavacOptionsResult": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Targets, BuildTargetIdentifier, ..)",
          "Get(CoarsenedTargets, Addresses, ..)",
          "Get(CoursierResolveKey, CoarsenedTargets, ..)"
        ],
        "input_types": [
          "HandleJavacOptionsRequest",
          "BuildRoot"
        ],
        "name": "pants.backend.java.bsp.rules.handle_bsp_java_options_request",
        "output_desc": "HandleJavacOptionsResult(item: pants.backend.java.bsp.spec.JavacOptionsItem)",
        "output_type": "HandleJavacOptionsResult",
        "provider": "pants.backend.experimental.java"
      }
    ],
    "HandleScalacOptionsResult": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Targets, BuildTargetIdentifier, ..)",
          "Get(CoarsenedTargets, Addresses, ..)",
          "Get(CoursierResolveKey, CoarsenedTargets, ..)",
          "Get(CoursierResolvedLockfile, CoursierResolveKey, ..)",
          "Get(Digest, CreateDigest, ..)",
          "Get(Digest, AddPrefix, ..)"
        ],
        "input_types": [
          "HandleScalacOptionsRequest",
          "BuildRoot",
          "Workspace"
        ],
        "name": "pants.backend.scala.bsp.rules.handle_bsp_scalac_options_request",
        "output_desc": "HandleScalacOptionsResult(item: 'ScalacOptionsItem')",
        "output_type": "HandleScalacOptionsResult",
        "provider": "pants.backend.experimental.scala"
      }
    ],
    "HelmBinary": [
      {
        "description": "Download and configure Helm",
        "help": null,
        "input_gets": [
          "Get(DownloadedExternalTool, ExternalToolRequest, ..)",
          "Get(Digest, CreateDigest, ..)",
          "Get(Digest, AddPrefix, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(Digest, DigestSubset, ..)",
          "Get(Digest, RemovePrefix, ..)",
          "Get(Environment, EnvironmentRequest, ..)"
        ],
        "input_types": [
          "HelmSubsystem",
          "HelmPlugins"
        ],
        "name": "pants.backend.helm.util_rules.tool.setup_helm",
        "output_desc": "HelmBinary(path: 'str', *, helm_env: 'Mapping[str, str]', local_env: 'Mapping[str, str]', immutable_input_digests: 'Mapping[str, Digest]') -> 'None'",
        "output_type": "HelmBinary",
        "provider": "pants.backend.experimental.helm"
      }
    ],
    "HelmChart": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(HelmChartMetadata, ParseHelmChartMetadataDigest, ..)"
        ],
        "input_types": [
          "FetchedHelmArtifact"
        ],
        "name": "pants.backend.helm.util_rules.chart.create_chart_from_artifact",
        "output_desc": "HelmChart(address: 'Address', metadata: 'HelmChartMetadata', snapshot: 'Snapshot', artifact: 'ResolvedHelmArtifact | None' = None)",
        "output_type": "HelmChart",
        "provider": "pants.backend.experimental.helm"
      },
      {
        "description": "Collect all source code and subcharts of a Helm Chart",
        "help": null,
        "input_gets": [
          "Get(Targets, DependenciesRequest, ..)",
          "Get(HelmChartSourceFiles, HelmChartSourceFilesRequest, ..)",
          "Get(HelmChartMetadata, HelmChartMetaSourceField, ..)",
          "Get(FetchedHelmArtifacts, FetchHelmArfifactsRequest, ..)",
          "Get(HelmChart, HelmChartRequest, ..)",
          "Get(HelmChart, FetchedHelmArtifact, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(Digest, AddPrefix, ..)",
          "Get(Digest, HelmChartMetadata, ..)",
          "Get(Digest, DigestSubset, ..)",
          "Get(Snapshot, AddPrefix, ..)"
        ],
        "input_types": [
          "HelmChartRequest",
          "HelmSubsystem"
        ],
        "name": "pants.backend.helm.util_rules.chart.get_helm_chart",
        "output_desc": "HelmChart(address: 'Address', metadata: 'HelmChartMetadata', snapshot: 'Snapshot', artifact: 'ResolvedHelmArtifact | None' = None)",
        "output_type": "HelmChart",
        "provider": "pants.backend.experimental.helm"
      }
    ],
    "HelmChartMetadata": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Digest, DigestSubset, ..)",
          "Get(DigestContents, Digest, ..)"
        ],
        "input_types": [
          "ParseHelmChartMetadataDigest"
        ],
        "name": "pants.backend.helm.util_rules.chart_metadata.parse_chart_metadata_from_digest",
        "output_desc": "HelmChartMetadata(name: 'str', version: 'str', api_version: 'str' = 'v2', type: 'ChartType' = <ChartType.APPLICATION: 'application'>, kube_version: 'str | None' = None, app_version: 'str | None' = None, icon: 'str | None' = None, description: 'str | None' = None, dependencies: 'tuple[HelmChartDependency, ...]' = <factory>, keywords: 'tuple[str, ...]' = <factory>, sources: 'tuple[str, ...]' = <factory>, home: 'str | None' = None, maintainers: 'tuple[HelmChartMaintainer, ...]' = <factory>, deprecated: 'bool | None' = None, annotations: 'FrozenDict[str, str]' = <factory>)",
        "output_type": "HelmChartMetadata",
        "provider": "pants.backend.experimental.helm"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(HydratedSources, HydrateSourcesRequest, ..)",
          "Get(HelmChartMetadata, ParseHelmChartMetadataDigest, ..)"
        ],
        "input_types": [
          "HelmChartMetaSourceField"
        ],
        "name": "pants.backend.helm.util_rules.chart_metadata.parse_chart_metadata_from_field",
        "output_desc": "HelmChartMetadata(name: 'str', version: 'str', api_version: 'str' = 'v2', type: 'ChartType' = <ChartType.APPLICATION: 'application'>, kube_version: 'str | None' = None, app_version: 'str | None' = None, icon: 'str | None' = None, description: 'str | None' = None, dependencies: 'tuple[HelmChartDependency, ...]' = <factory>, keywords: 'tuple[str, ...]' = <factory>, sources: 'tuple[str, ...]' = <factory>, home: 'str | None' = None, maintainers: 'tuple[HelmChartMaintainer, ...]' = <factory>, deprecated: 'bool | None' = None, annotations: 'FrozenDict[str, str]' = <factory>)",
        "output_type": "HelmChartMetadata",
        "provider": "pants.backend.experimental.helm"
      }
    ],
    "HelmChartSourceFiles": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Targets, DependenciesRequest, ..)",
          "Get(StrippedSourceFiles, SourceFilesRequest, ..)",
          "Get(Snapshot, MergeDigests, ..)"
        ],
        "input_types": [
          "HelmChartSourceFilesRequest"
        ],
        "name": "pants.backend.helm.util_rules.sources.get_helm_source_files",
        "output_desc": "HelmChartSourceFiles(snapshot: 'Snapshot')",
        "output_type": "HelmChartSourceFiles",
        "provider": "pants.backend.experimental.helm"
      }
    ],
    "HelmPlugin": [
      {
        "description": "Download an external Helm plugin",
        "help": null,
        "input_gets": [
          "Get(DownloadedExternalTool, ExternalToolRequest, ..)",
          "Get(Digest, DigestSubset, ..)",
          "Get(DigestContents, Digest, ..)"
        ],
        "input_types": [
          "ExternalHelmPluginRequest"
        ],
        "name": "pants.backend.helm.util_rules.plugins.download_external_helm_plugin",
        "output_desc": "HelmPlugin(metadata: 'HelmPluginMetadata', digest: 'Digest')",
        "output_type": "HelmPlugin",
        "provider": "pants.backend.experimental.helm"
      }
    ],
    "HelmPlugins": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(HelmPlugin, ExternalHelmPluginBinding, ..)"
        ],
        "input_types": [
          "UnionMembership"
        ],
        "name": "pants.backend.helm.util_rules.plugins.all_helm_plugins",
        "output_desc": null,
        "output_type": "HelmPlugins",
        "provider": "pants.backend.experimental.helm"
      }
    ],
    "HelmSubsystem": [
      {
        "description": null,
        "help": "The Helm command line (https://helm.sh)",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_helm",
        "output_desc": null,
        "output_type": "HelmSubsystem",
        "provider": "pants.backend.experimental.helm"
      }
    ],
    "HelmUnitTestSubsystem": [
      {
        "description": null,
        "help": "BDD styled unit test framework for Kubernetes Helm charts as a Helm plugin. (https://github.com/quintush/helm-unittest)",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_helm_unittest",
        "output_desc": null,
        "output_type": "HelmUnitTestSubsystem",
        "provider": "pants.backend.experimental.helm"
      }
    ],
    "IPython": [
      {
        "description": null,
        "help": "The IPython enhanced REPL (https://ipython.org/).",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_ipython",
        "output_desc": null,
        "output_type": "IPython",
        "provider": "pants.backend.python"
      }
    ],
    "ImportConfig": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Digest, CreateDigest, ..)"
        ],
        "input_types": [
          "ImportConfigRequest",
          "GoStdLibImports"
        ],
        "name": "pants.backend.go.util_rules.import_analysis.generate_import_config",
        "output_desc": "An `importcfg` file associating import paths to their `__pkg__.a` files.",
        "output_type": "ImportConfig",
        "provider": "pants.backend.experimental.go"
      }
    ],
    "ImportPathToPackages": [
      {
        "description": "Map all Go targets to their import paths",
        "help": null,
        "input_gets": [
          "Get(FirstPartyPkgImportPath, FirstPartyPkgImportPathRequest, ..)"
        ],
        "input_types": [
          "AllGoTargets"
        ],
        "name": "pants.backend.go.target_type_rules.map_import_paths_to_packages",
        "output_desc": "ImportPathToPackages(mapping: 'FrozenDict[str, tuple[Address, ...]]')",
        "output_type": "ImportPathToPackages",
        "provider": "pants.backend.experimental.go"
      }
    ],
    "InferredDependencies": [
      {
        "description": "Inferring Python dependencies by analyzing source",
        "help": null,
        "input_gets": [
          "Get(WrappedTarget, Address, ..)",
          "Get(ParsedPythonDependencies, ParsePythonDependenciesRequest, ..)",
          "Get(ExplicitlyProvidedDependencies, DependenciesRequest, ..)",
          "Get(PythonModuleOwners, PythonModuleOwnersRequest, ..)",
          "Get(AllAssetTargets, AllAssetTargetsRequest, ..)",
          "Get(AllAssetTargetsByPath, AllAssetTargets, ..)",
          "Get(Targets, Addresses, ..)"
        ],
        "input_types": [
          "InferPythonImportDependencies",
          "PythonInferSubsystem",
          "PythonSetup"
        ],
        "name": "pants.backend.python.dependency_inference.rules.infer_python_dependencies_via_source",
        "output_desc": "InferredDependencies(dependencies: 'Iterable[Address]') -> 'None'",
        "output_type": "InferredDependencies",
        "provider": "pants.backend.python"
      },
      {
        "description": "Inferring Protobuf dependencies by analyzing imports",
        "help": null,
        "input_gets": [
          "Get(WrappedTarget, Address, ..)",
          "Get(ExplicitlyProvidedDependencies, DependenciesRequest, ..)",
          "Get(HydratedSources, HydrateSourcesRequest, ..)",
          "Get(DigestContents, Digest, ..)"
        ],
        "input_types": [
          "InferProtobufDependencies",
          "ProtobufMapping",
          "Protoc"
        ],
        "name": "pants.backend.codegen.protobuf.protobuf_dependency_inference.infer_protobuf_dependencies",
        "output_desc": "InferredDependencies(dependencies: 'Iterable[Address]') -> 'None'",
        "output_type": "InferredDependencies",
        "provider": "pants.backend.codegen.protobuf.python"
      },
      {
        "description": "Inferring Thrift dependencies by analyzing imports",
        "help": null,
        "input_gets": [
          "Get(WrappedTarget, Address, ..)",
          "Get(ExplicitlyProvidedDependencies, DependenciesRequest, ..)",
          "Get(ParsedThrift, ParsedThriftRequest, ..)"
        ],
        "input_types": [
          "InferThriftDependencies",
          "ThriftMapping",
          "ThriftSubsystem"
        ],
        "name": "pants.backend.codegen.thrift.dependency_inference.infer_thrift_dependencies",
        "output_desc": "InferredDependencies(dependencies: 'Iterable[Address]') -> 'None'",
        "output_type": "InferredDependencies",
        "provider": "pants.backend.codegen.thrift.apache.python"
      },
      {
        "description": "Infer dependencies on Protobuf sources for first-party Go packages",
        "help": null,
        "input_gets": [
          "Get(FallibleFirstPartyPkgAnalysis, FirstPartyPkgAnalysisRequest, ..)"
        ],
        "input_types": [
          "InferGoProtobufDependenciesRequest",
          "GoProtobufImportPathMapping"
        ],
        "name": "pants.backend.codegen.protobuf.go.rules.infer_go_dependencies",
        "output_desc": "InferredDependencies(dependencies: 'Iterable[Address]') -> 'None'",
        "output_type": "InferredDependencies",
        "provider": "pants.backend.experimental.codegen.protobuf.go"
      },
      {
        "description": "Infer dependencies for first-party Go packages",
        "help": null,
        "input_gets": [
          "Get(FallibleFirstPartyPkgAnalysis, FirstPartyPkgAnalysisRequest, ..)"
        ],
        "input_types": [
          "InferGoPackageDependenciesRequest",
          "GoStdLibImports",
          "ImportPathToPackages"
        ],
        "name": "pants.backend.go.target_type_rules.infer_go_dependencies",
        "output_desc": "InferredDependencies(dependencies: 'Iterable[Address]') -> 'None'",
        "output_type": "InferredDependencies",
        "provider": "pants.backend.experimental.go"
      },
      {
        "description": "Inferring Helm chart dependencies",
        "help": null,
        "input_gets": [
          "Get(WrappedTarget, Address, ..)",
          "Get(ExplicitlyProvidedDependencies, DependenciesRequest, ..)",
          "Get(HelmChartMetadata, HelmChartMetaSourceField, ..)"
        ],
        "input_types": [
          "InferHelmChartDependenciesRequest",
          "FirstPartyHelmChartMapping",
          "ThirdPartyHelmArtifactMapping",
          "HelmSubsystem"
        ],
        "name": "pants.backend.helm.dependency_inference.chart.infer_chart_dependencies_via_metadata",
        "output_desc": "InferredDependencies(dependencies: 'Iterable[Address]') -> 'None'",
        "output_type": "InferredDependencies",
        "provider": "pants.backend.experimental.helm"
      },
      {
        "description": "Inferring Java dependencies by source analysis",
        "help": null,
        "input_gets": [
          "Get(JavaInferredDependencies, JavaInferredDependenciesAndExportsRequest, ..)"
        ],
        "input_types": [
          "InferJavaSourceDependencies"
        ],
        "name": "pants.backend.java.dependency_inference.rules.infer_java_dependencies_via_source_analysis",
        "output_desc": "InferredDependencies(dependencies: 'Iterable[Address]') -> 'None'",
        "output_type": "InferredDependencies",
        "provider": "pants.backend.experimental.java"
      },
      {
        "description": "Inferring Kotlin dependencies by analyzing sources",
        "help": null,
        "input_gets": [
          "Get(WrappedTarget, Address, ..)",
          "Get(ExplicitlyProvidedDependencies, DependenciesRequest, ..)",
          "Get(KotlinSourceDependencyAnalysis, SourceFilesRequest, ..)"
        ],
        "input_types": [
          "InferKotlinSourceDependencies",
          "KotlinInferSubsystem",
          "JvmSubsystem",
          "SymbolMapping"
        ],
        "name": "pants.backend.kotlin.dependency_inference.rules.infer_kotlin_dependencies_via_source_analysis",
        "output_desc": "InferredDependencies(dependencies: 'Iterable[Address]') -> 'None'",
        "output_type": "InferredDependencies",
        "provider": "pants.backend.experimental.kotlin"
      },
      {
        "description": "Inferring Scala dependencies by analyzing sources",
        "help": null,
        "input_gets": [
          "Get(WrappedTarget, Address, ..)",
          "Get(ExplicitlyProvidedDependencies, DependenciesRequest, ..)",
          "Get(ScalaSourceDependencyAnalysis, SourceFilesRequest, ..)"
        ],
        "input_types": [
          "InferScalaSourceDependencies",
          "ScalaInferSubsystem",
          "JvmSubsystem",
          "SymbolMapping"
        ],
        "name": "pants.backend.scala.dependency_inference.rules.infer_scala_dependencies_via_source_analysis",
        "output_desc": "InferredDependencies(dependencies: 'Iterable[Address]') -> 'None'",
        "output_type": "InferredDependencies",
        "provider": "pants.backend.experimental.scala"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(HydratedSources, HydrateSourcesRequest, ..)",
          "Get(ProcessResult, ParseTerraformModuleSources, ..)",
          "Get(Targets, AddressSpecs, ..)"
        ],
        "input_types": [
          "InferTerraformModuleDependenciesRequest"
        ],
        "name": "pants.backend.terraform.dependency_inference.infer_terraform_module_dependencies",
        "output_desc": "InferredDependencies(dependencies: 'Iterable[Address]') -> 'None'",
        "output_type": "InferredDependencies",
        "provider": "pants.backend.experimental.terraform"
      },
      {
        "description": "Inferring dependencies on `__init__.py` files",
        "help": null,
        "input_gets": [
          "Get(AncestorFiles, AncestorFilesRequest, ..)",
          "Get(Owners, OwnersRequest, ..)",
          "Get(WrappedTarget, Address, ..)",
          "Get(Targets, Addresses, ..)"
        ],
        "input_types": [
          "InferInitDependencies",
          "PythonInferSubsystem",
          "PythonSetup"
        ],
        "name": "pants.backend.python.dependency_inference.rules.infer_python_init_dependencies",
        "output_desc": "InferredDependencies(dependencies: 'Iterable[Address]') -> 'None'",
        "output_type": "InferredDependencies",
        "provider": "pants.backend.python"
      },
      {
        "description": "Inferring dependencies on `conftest.py` files",
        "help": null,
        "input_gets": [
          "Get(AncestorFiles, AncestorFilesRequest, ..)",
          "Get(Owners, OwnersRequest, ..)",
          "Get(WrappedTarget, Address, ..)",
          "Get(Targets, Addresses, ..)"
        ],
        "input_types": [
          "InferConftestDependencies",
          "PythonInferSubsystem",
          "PythonSetup"
        ],
        "name": "pants.backend.python.dependency_inference.rules.infer_python_conftest_dependencies",
        "output_desc": "InferredDependencies(dependencies: 'Iterable[Address]') -> 'None'",
        "output_type": "InferredDependencies",
        "provider": "pants.backend.python"
      },
      {
        "description": "Inferring Shell dependencies by analyzing imports",
        "help": null,
        "input_gets": [
          "Get(WrappedTarget, Address, ..)",
          "Get(ExplicitlyProvidedDependencies, DependenciesRequest, ..)",
          "Get(HydratedSources, HydrateSourcesRequest, ..)",
          "Get(ParsedShellImports, ParseShellImportsRequest, ..)"
        ],
        "input_types": [
          "InferShellDependencies",
          "ShellMapping",
          "ShellSetup"
        ],
        "name": "pants.backend.shell.dependency_inference.infer_shell_dependencies",
        "output_desc": "InferredDependencies(dependencies: 'Iterable[Address]') -> 'None'",
        "output_type": "InferredDependencies",
        "provider": "pants.backend.shell"
      }
    ],
    "InitializeBuildResult": [
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "InitializeBuildParams",
          "UnionMembership"
        ],
        "name": "pants.bsp.util_rules.lifecycle.bsp_build_initialize",
        "output_desc": "InitializeBuildResult(display_name: 'str', version: 'str', bsp_version: 'str', capabilities: 'BuildServerCapabilities', data: 'Any | None')",
        "output_type": "InitializeBuildResult",
        "provider": "pants.core"
      }
    ],
    "InjectedDependencies": [
      {
        "description": "Inferring dependency from the python_awslambda `handler` field",
        "help": null,
        "input_gets": [
          "Get(WrappedTarget, Address, ..)",
          "Get(ExplicitlyProvidedDependencies, DependenciesRequest, ..)",
          "Get(ResolvedPythonAwsHandler, ResolvePythonAwsHandlerRequest, ..)",
          "Get(PythonModuleOwners, PythonModuleOwnersRequest, ..)"
        ],
        "input_types": [
          "InjectPythonLambdaHandlerDependency",
          "PythonInferSubsystem",
          "PythonSetup"
        ],
        "name": "pants.backend.awslambda.python.target_types.inject_lambda_handler_dependency",
        "output_desc": null,
        "output_type": "InjectedDependencies",
        "provider": "pants.backend.awslambda.python"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(WrappedTarget, Address, ..)"
        ],
        "input_types": [
          "InjectPythonProtobufDependencies",
          "PythonProtobufSubsystem",
          "PythonSetup",
          "ThirdPartyPythonModuleMapping"
        ],
        "name": "pants.backend.codegen.protobuf.python.python_protobuf_subsystem.inject_dependencies",
        "output_desc": null,
        "output_type": "InjectedDependencies",
        "provider": "pants.backend.codegen.protobuf.python"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(WrappedTarget, Address, ..)"
        ],
        "input_types": [
          "InjectApacheThriftPythonDependencies",
          "ThriftPythonSubsystem",
          "PythonSetup",
          "ThirdPartyPythonModuleMapping"
        ],
        "name": "pants.backend.codegen.thrift.apache.python.rules.find_apache_thrift_python_requirement",
        "output_desc": null,
        "output_type": "InjectedDependencies",
        "provider": "pants.backend.codegen.thrift.apache.python"
      },
      {
        "description": null,
        "help": "Inspects COPY instructions in the Dockerfile for references to known packagable targets.",
        "input_gets": [
          "Get(DockerfileInfo, DockerfileInfoRequest, ..)",
          "Get(Addresses, UnparsedAddressInputs, ..)",
          "Get(Addresses, AddressSpecs, ..)",
          "Get(Targets, Addresses, ..)",
          "Get(FieldSetsPerTarget, FieldSetsPerTargetRequest, ..)"
        ],
        "input_types": [
          "InjectDockerDependencies"
        ],
        "name": "pants.backend.docker.util_rules.dependencies.inject_docker_dependencies",
        "output_desc": null,
        "output_type": "InjectedDependencies",
        "provider": "pants.backend.docker"
      },
      {
        "description": "Infer dependencies for third-party Go packages",
        "help": null,
        "input_gets": [
          "Get(WrappedTarget, Address, ..)",
          "Get(GoModInfo, GoModInfoRequest, ..)",
          "Get(ThirdPartyPkgAnalysis, ThirdPartyPkgAnalysisRequest, ..)"
        ],
        "input_types": [
          "InjectGoThirdPartyPackageDependenciesRequest",
          "GoStdLibImports",
          "ImportPathToPackages"
        ],
        "name": "pants.backend.go.target_type_rules.inject_go_third_party_package_dependencies",
        "output_desc": null,
        "output_type": "InjectedDependencies",
        "provider": "pants.backend.experimental.go"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(WrappedTarget, Address, ..)",
          "Get(GoBinaryMainPackage, GoBinaryMainPackageRequest, ..)"
        ],
        "input_types": [
          "InjectGoBinaryMainDependencyRequest"
        ],
        "name": "pants.backend.go.target_type_rules.inject_go_binary_main_dependency",
        "output_desc": null,
        "output_type": "InjectedDependencies",
        "provider": "pants.backend.experimental.go"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(WrappedTarget, Address, ..)",
          "Get(ScalaPBRuntimeForResolve, ScalaPBRuntimeForResolveRequest, ..)"
        ],
        "input_types": [
          "InjectScalaPBRuntimeDependencyRequest",
          "JvmSubsystem"
        ],
        "name": "pants.backend.codegen.protobuf.scala.dependency_inference.inject_scalapb_runtime_dependency",
        "output_desc": null,
        "output_type": "InjectedDependencies",
        "provider": "pants.backend.experimental.codegen.protobuf.scala"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(ExplicitlyProvidedDependencies, DependenciesRequest, ..)"
        ],
        "input_types": [
          "InjectHelmUnitTestChartDependencyRequest",
          "AllHelmChartTargets"
        ],
        "name": "pants.backend.helm.dependency_inference.unittest.inject_chart_dependency_into_unittests",
        "output_desc": null,
        "output_type": "InjectedDependencies",
        "provider": "pants.backend.experimental.helm"
      },
      {
        "description": "Inject dependency on Kotlin runtime artifacts for Kotlin targets.",
        "help": null,
        "input_gets": [
          "Get(WrappedTarget, Address, ..)",
          "Get(KotlinRuntimeForResolve, KotlinRuntimeForResolveRequest, ..)"
        ],
        "input_types": [
          "InjectKotlinRuntimeDependencyRequest",
          "JvmSubsystem"
        ],
        "name": "pants.backend.kotlin.dependency_inference.rules.inject_kotlin_stdlib_dependency",
        "output_desc": null,
        "output_type": "InjectedDependencies",
        "provider": "pants.backend.experimental.kotlin"
      },
      {
        "description": "Inject dependency on scala-library artifact for Scala target.",
        "help": null,
        "input_gets": [
          "Get(WrappedTarget, Address, ..)",
          "Get(ScalaRuntimeForResolve, ScalaRuntimeForResolveRequest, ..)"
        ],
        "input_types": [
          "InjectScalaLibraryDependencyRequest",
          "JvmSubsystem"
        ],
        "name": "pants.backend.scala.dependency_inference.rules.inject_scala_library_dependency",
        "output_desc": null,
        "output_type": "InjectedDependencies",
        "provider": "pants.backend.experimental.scala"
      },
      {
        "description": "Inject dependency on scala plugin artifacts for Scala target.",
        "help": "Adds dependencies on plugins for scala source files, so that they get included in the\ntarget's resolve.",
        "input_gets": [
          "Get(WrappedTarget, Address, ..)",
          "Get(ScalaPluginTargetsForTarget, ScalaPluginsForTargetWithoutResolveRequest, ..)"
        ],
        "input_types": [
          "InjectScalaPluginDependenciesRequest"
        ],
        "name": "pants.backend.scala.dependency_inference.rules.inject_scala_plugin_dependencies",
        "output_desc": null,
        "output_type": "InjectedDependencies",
        "provider": "pants.backend.experimental.scala"
      },
      {
        "description": "Inferring dependency from the python_google_cloud_function `handler` field",
        "help": null,
        "input_gets": [
          "Get(WrappedTarget, Address, ..)",
          "Get(ExplicitlyProvidedDependencies, DependenciesRequest, ..)",
          "Get(ResolvedPythonGoogleHandler, ResolvePythonGoogleHandlerRequest, ..)",
          "Get(PythonModuleOwners, PythonModuleOwnersRequest, ..)"
        ],
        "input_types": [
          "InjectPythonCloudFunctionHandlerDependency",
          "PythonInferSubsystem",
          "PythonSetup"
        ],
        "name": "pants.backend.google_cloud_function.python.target_types.inject_cloud_function_handler_dependency",
        "output_desc": null,
        "output_type": "InjectedDependencies",
        "provider": "pants.backend.google_cloud_function.python"
      },
      {
        "description": "Inferring dependency from the pex_binary `entry_point` field",
        "help": null,
        "input_gets": [
          "Get(WrappedTarget, Address, ..)",
          "Get(ExplicitlyProvidedDependencies, DependenciesRequest, ..)",
          "Get(ResolvedPexEntryPoint, ResolvePexEntryPointRequest, ..)",
          "Get(PythonModuleOwners, PythonModuleOwnersRequest, ..)"
        ],
        "input_types": [
          "InjectPexBinaryEntryPointDependency",
          "PythonInferSubsystem",
          "PythonSetup"
        ],
        "name": "pants.backend.python.target_types_rules.inject_pex_binary_entry_point_dependency",
        "output_desc": null,
        "output_type": "InjectedDependencies",
        "provider": "pants.backend.python"
      },
      {
        "description": null,
        "help": "Inject dependencies that we can infer from entry points in the distribution.",
        "input_gets": [
          "Get(WrappedTarget, Address, ..)",
          "Get(ExplicitlyProvidedDependencies, DependenciesRequest, ..)",
          "Get(ResolvedPythonDistributionEntryPoints, ResolvePythonDistributionEntryPointsRequest, ..)",
          "Get(PythonModuleOwners, PythonModuleOwnersRequest, ..)"
        ],
        "input_types": [
          "InjectPythonDistributionDependencies",
          "PythonInferSubsystem"
        ],
        "name": "pants.backend.python.target_types_rules.inject_python_distribution_dependencies",
        "output_desc": null,
        "output_type": "InjectedDependencies",
        "provider": "pants.backend.python"
      }
    ],
    "InternalJdk": [
      {
        "description": null,
        "help": "Creates a `JdkEnvironment` object based on the JVM subsystem options.\n\nThis is used for providing a predictable JDK version for Pants' internal usage rather than for\nmatching compatibility with source files (e.g. compilation/testing).",
        "input_gets": [
          "Get(JdkEnvironment, JdkRequest, ..)"
        ],
        "input_types": [
          "JvmSubsystem"
        ],
        "name": "pants.jvm.jdk_rules.internal_jdk",
        "output_desc": "The JDK configured for internal Pants usage, rather than for matching source compatibility.\n\nThe InternalJdk should only be used in situations where no classfiles are required for a user's\nfirstparty or thirdparty code (such as for codegen, or analysis of source files).",
        "output_type": "InternalJdk",
        "provider": "pants.backend.experimental.java"
      }
    ],
    "InterpreterConstraints": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(TransitiveTargets, TransitiveTargetsRequest, ..)"
        ],
        "input_types": [
          "InterpreterConstraintsRequest",
          "PythonSetup"
        ],
        "name": "pants.backend.python.util_rules.pex_from_targets.interpreter_constraints_for_targets",
        "output_desc": null,
        "output_type": "InterpreterConstraints",
        "provider": "pants.backend.python"
      }
    ],
    "Isort": [
      {
        "description": null,
        "help": "The Python import sorter tool (https://pycqa.github.io/isort/).",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_isort",
        "output_desc": null,
        "output_type": "Isort",
        "provider": "pants.backend.python.lint.isort"
      }
    ],
    "JUnit": [
      {
        "description": null,
        "help": "The JUnit test framework (https://junit.org)",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_junit",
        "output_desc": null,
        "output_type": "JUnit",
        "provider": "pants.backend.experimental.java"
      }
    ],
    "JavaInferSubsystem": [
      {
        "description": null,
        "help": "Options controlling which dependencies will be inferred for Java targets.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_java_infer",
        "output_desc": null,
        "output_type": "JavaInferSubsystem",
        "provider": "pants.backend.experimental.java"
      }
    ],
    "JavaInferredDependencies": [
      {
        "description": "Inferring Java dependencies and exports by source analysis",
        "help": null,
        "input_gets": [
          "Get(WrappedTarget, Address, ..)",
          "Get(SourceFiles, SourceFilesRequest, ..)",
          "Get(ExplicitlyProvidedDependencies, DependenciesRequest, ..)",
          "Get(JavaSourceDependencyAnalysis, JavaSourceDependencyAnalysisRequest, ..)"
        ],
        "input_types": [
          "JavaInferredDependenciesAndExportsRequest",
          "JavaInferSubsystem",
          "JvmSubsystem",
          "SymbolMapping"
        ],
        "name": "pants.backend.java.dependency_inference.rules.infer_java_dependencies_and_exports_via_source_analysis",
        "output_desc": "JavaInferredDependencies(dependencies: 'FrozenOrderedSet[Address]', exports: 'FrozenOrderedSet[Address]')",
        "output_type": "JavaInferredDependencies",
        "provider": "pants.backend.experimental.java"
      }
    ],
    "JavaParserCompiledClassfiles": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(GenerateJvmLockfileFromTool, JavaParserToolLockfileSentinel, ..)",
          "Get(ToolClasspath, ToolClasspathRequest, ..)",
          "Get(Digest, CreateDigest, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(ProcessResult, JvmProcess, ..)",
          "Get(Digest, RemovePrefix, ..)"
        ],
        "input_types": [
          "InternalJdk"
        ],
        "name": "pants.backend.java.dependency_inference.java_parser.build_processors",
        "output_desc": "JavaParserCompiledClassfiles(digest: 'Digest')",
        "output_type": "JavaParserCompiledClassfiles",
        "provider": "pants.backend.experimental.java"
      }
    ],
    "JavaSourceDependencyAnalysis": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(DigestContents, Digest, ..)"
        ],
        "input_types": [
          "FallibleJavaSourceDependencyAnalysisResult",
          "ProcessCleanupOption"
        ],
        "name": "pants.backend.java.dependency_inference.java_parser.resolve_fallible_result_to_analysis",
        "output_desc": "JavaSourceDependencyAnalysis(declared_package: 'str | None', imports: 'Sequence[JavaImport]', top_level_types: 'Sequence[str]', consumed_types: 'Sequence[str]', export_types: 'Sequence[str]')",
        "output_type": "JavaSourceDependencyAnalysis",
        "provider": "pants.backend.experimental.java"
      }
    ],
    "JavaSourceDependencyAnalysisRequest": [
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "SourceFiles"
        ],
        "name": "pants.backend.java.dependency_inference.java_parser.make_analysis_request_from_source_files",
        "output_desc": "JavaSourceDependencyAnalysisRequest(source_files: 'SourceFiles')",
        "output_type": "JavaSourceDependencyAnalysisRequest",
        "provider": "pants.backend.experimental.java"
      }
    ],
    "JavacOptionsResult": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(HandleJavacOptionsResult, HandleJavacOptionsRequest, ..)"
        ],
        "input_types": [
          "JavacOptionsParams"
        ],
        "name": "pants.backend.java.bsp.rules.bsp_javac_options_request",
        "output_desc": "JavacOptionsResult(items: 'tuple[JavacOptionsItem, ...]')",
        "output_type": "JavacOptionsResult",
        "provider": "pants.backend.experimental.java"
      }
    ],
    "JavacSubsystem": [
      {
        "description": null,
        "help": "The javac Java source compiler.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_javac",
        "output_desc": null,
        "output_type": "JavacSubsystem",
        "provider": "pants.backend.experimental.java"
      }
    ],
    "JdkEnvironment": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(FallibleProcessResult, Process, ..)",
          "Get(Digest, CreateDigest, ..)",
          "Get(Digest, MergeDigests, ..)"
        ],
        "input_types": [
          "JvmSubsystem",
          "Coursier",
          "Nailgun",
          "BashBinary",
          "JdkRequest"
        ],
        "name": "pants.jvm.jdk_rules.prepare_jdk_environment",
        "output_desc": "JdkEnvironment(_digest: 'Digest', nailgun_jar: 'str', coursier: 'Coursier', jre_major_version: 'int', global_jvm_options: 'tuple[str, ...]')",
        "output_type": "JdkEnvironment",
        "provider": "pants.backend.experimental.java"
      }
    ],
    "JvmSubsystem": [
      {
        "description": null,
        "help": "Options for general JVM functionality.\n\nJDK strings will be passed directly to Coursier's `--jvm` parameter. Run `cs java --available` to see a list of available JVM versions on your platform.\n\nIf the string 'system' is passed, Coursier's `--system-jvm` option will be used instead, but note that this can lead to inconsistent behavior since the JVM version will be whatever happens to be found first on the system's PATH.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_jvm",
        "output_desc": null,
        "output_type": "JvmSubsystem",
        "provider": "pants.backend.experimental.java"
      }
    ],
    "KnownUserResolveNames": [
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "KnownPythonUserResolveNamesRequest",
          "PythonSetup"
        ],
        "name": "pants.backend.python.goals.lockfile.determine_python_user_resolves",
        "output_desc": "All defined user resolves for a particular language ecosystem.\n\nSee KnownUserResolveNamesRequest for how to use this type. `option_name` should be formatted\nlike `[options-scope].resolves`",
        "output_type": "KnownUserResolveNames",
        "provider": "pants.backend.docker"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "KnownJVMUserResolveNamesRequest",
          "JvmSubsystem"
        ],
        "name": "pants.jvm.goals.lockfile.determine_jvm_user_resolves",
        "output_desc": "All defined user resolves for a particular language ecosystem.\n\nSee KnownUserResolveNamesRequest for how to use this type. `option_name` should be formatted\nlike `[options-scope].resolves`",
        "output_type": "KnownUserResolveNames",
        "provider": "pants.backend.experimental.java"
      }
    ],
    "KotlinInferSubsystem": [
      {
        "description": null,
        "help": "Options controlling which dependencies will be inferred for Kotlin targets.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_kotlin_infer",
        "output_desc": null,
        "output_type": "KotlinInferSubsystem",
        "provider": "pants.backend.experimental.kotlin"
      }
    ],
    "KotlinParserCompiledClassfiles": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(GenerateJvmLockfileFromTool, KotlinParserToolLockfileSentinel, ..)",
          "Get(ToolClasspath, ToolClasspathRequest, ..)",
          "Get(Digest, CreateDigest, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(ProcessResult, JvmProcess, ..)",
          "Get(Digest, RemovePrefix, ..)"
        ],
        "input_types": [
          "InternalJdk"
        ],
        "name": "pants.backend.kotlin.dependency_inference.kotlin_parser.setup_kotlin_parser_classfiles",
        "output_desc": null,
        "output_type": "KotlinParserCompiledClassfiles",
        "provider": "pants.backend.experimental.kotlin"
      }
    ],
    "KotlinRuntimeForResolve": [
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "KotlinRuntimeForResolveRequest",
          "AllJvmArtifactTargets",
          "JvmSubsystem",
          "KotlinSubsystem"
        ],
        "name": "pants.backend.kotlin.dependency_inference.rules.resolve_kotlin_runtime_for_resolve",
        "output_desc": "KotlinRuntimeForResolve(addresses: 'frozenset[Address]')",
        "output_type": "KotlinRuntimeForResolve",
        "provider": "pants.backend.experimental.kotlin"
      }
    ],
    "KotlinSourceDependencyAnalysis": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(DigestContents, Digest, ..)"
        ],
        "input_types": [
          "FallibleKotlinSourceDependencyAnalysisResult",
          "ProcessCleanupOption"
        ],
        "name": "pants.backend.kotlin.dependency_inference.kotlin_parser.resolve_fallible_result_to_analysis",
        "output_desc": "KotlinSourceDependencyAnalysis(package: 'str', imports: 'frozenset[KotlinImport]', named_declarations: 'frozenset[str]', consumed_symbols_by_scope: 'FrozenDict[str, frozenset[str]]', scopes: 'frozenset[str]')",
        "output_type": "KotlinSourceDependencyAnalysis",
        "provider": "pants.backend.experimental.kotlin"
      }
    ],
    "KotlinSubsystem": [
      {
        "description": null,
        "help": "The Kotlin programming language (https://kotlinlang.org/).",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_kotlin",
        "output_desc": null,
        "output_type": "KotlinSubsystem",
        "provider": "pants.backend.experimental.kotlin"
      }
    ],
    "KotlincPluginTargetsForTarget": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Address, AddressInput, ..)",
          "Get(Targets, Addresses, ..)"
        ],
        "input_types": [
          "KotlincPluginsForTargetRequest",
          "AllKotlincPluginTargets",
          "JvmSubsystem",
          "KotlincSubsystem"
        ],
        "name": "pants.backend.kotlin.compile.kotlinc_plugins.resolve_kotlinc_plugins_for_target",
        "output_desc": "KotlincPluginTargetsForTarget(plugins: 'Targets', artifacts: 'Targets')",
        "output_type": "KotlincPluginTargetsForTarget",
        "provider": "pants.backend.experimental.kotlin"
      }
    ],
    "KotlincPlugins": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(CoarsenedTargets, Addresses, ..)",
          "Get(FallibleClasspathEntry, CoursierFetchRequest, ..)",
          "Get(Digest, MergeDigests, ..)"
        ],
        "input_types": [
          "KotlincPluginsRequest"
        ],
        "name": "pants.backend.kotlin.compile.kotlinc_plugins.fetch_kotlinc_plugins",
        "output_desc": "KotlincPlugins(ids: 'tuple[str, ...]', classpath: 'ClasspathEntry', plugin_args: 'FrozenDict[str, tuple[str, ...]]')",
        "output_type": "KotlincPlugins",
        "provider": "pants.backend.experimental.kotlin"
      }
    ],
    "KotlincPluginsForTargetRequest": [
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "KotlincPluginsForTargetWithoutResolveRequest",
          "JvmSubsystem"
        ],
        "name": "pants.backend.kotlin.compile.kotlinc_plugins.add_resolve_name_to_plugin_request",
        "output_desc": "KotlincPluginsForTargetRequest(target: 'Target', resolve_name: 'str')",
        "output_type": "KotlincPluginsForTargetRequest",
        "provider": "pants.backend.experimental.kotlin"
      }
    ],
    "KotlincSubsystem": [
      {
        "description": null,
        "help": "The Kotlin programming language (https://kotlinlang.org/).",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_kotlinc",
        "output_desc": null,
        "output_type": "KotlincSubsystem",
        "provider": "pants.backend.experimental.kotlin"
      }
    ],
    "KtlintSubsystem": [
      {
        "description": null,
        "help": "Ktlint, the anti-bikeshedding Kotlin linter with built-in formatter (https://ktlint.github.io/)",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_ktlint",
        "output_desc": null,
        "output_type": "KtlintSubsystem",
        "provider": "pants.backend.experimental.kotlin.lint.ktlint"
      }
    ],
    "Lambdex": [
      {
        "description": null,
        "help": "A tool for turning .pex files into Function-as-a-Service artifacts (https://github.com/pantsbuild/lambdex).",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_lambdex",
        "output_desc": null,
        "output_type": "Lambdex",
        "provider": "pants.backend.awslambda.python"
      }
    ],
    "LinkedGoBinary": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(GoSdkToolIDResult, GoSdkToolIDRequest, ..)",
          "Get(ProcessResult, GoSdkProcess, ..)"
        ],
        "input_types": [
          "LinkGoBinaryRequest"
        ],
        "name": "pants.backend.go.util_rules.link.link_go_binary",
        "output_desc": "A linked Go binary stored in a `Digest`.",
        "output_type": "LinkedGoBinary",
        "provider": "pants.backend.experimental.go"
      }
    ],
    "Lint": [
      {
        "description": "`lint` goal",
        "help": null,
        "input_gets": [
          "Get(FilteredTargets, Specs, ..)",
          "Get(SpecsSnapshot, Specs, ..)",
          "Get(SourceFiles, SourceFilesRequest, ..)",
          "Get(LintResults, LintTargetsRequest, ..)",
          "Get(FmtResult, FmtRequest, ..)",
          "Get(LintResults, LintFilesRequest, ..)"
        ],
        "input_types": [
          "Console",
          "Workspace",
          "Specs",
          "LintSubsystem",
          "UnionMembership",
          "DistDir"
        ],
        "name": "pants.core.goals.lint.lint",
        "output_desc": null,
        "output_type": "Lint",
        "provider": "pants.core"
      }
    ],
    "LintResult": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(VenvPex, PexRequest, ..)",
          "Get(ConfigFiles, ConfigFilesRequest, ..)",
          "Get(SourceFiles, SourceFilesRequest, ..)",
          "Get(Digest, CreateDigest, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(FallibleProcessResult, VenvPexProcess, ..)",
          "Get(Digest, RemovePrefix, ..)"
        ],
        "input_types": [
          "BanditPartition",
          "Bandit"
        ],
        "name": "pants.backend.python.lint.bandit.rules.bandit_lint_partition",
        "output_desc": "LintResult(exit_code: 'int', stdout: 'str', stderr: 'str', partition_description: 'str | None' = None, report: 'Digest' = Digest('e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855', 0))",
        "output_type": "LintResult",
        "provider": "pants.backend.python.lint.bandit"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(VenvPex, PexRequest, ..)",
          "Get(ConfigFiles, ConfigFilesRequest, ..)",
          "Get(SourceFiles, SourceFilesRequest, ..)",
          "Get(Digest, CreateDigest, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(FallibleProcessResult, VenvPexProcess, ..)",
          "Get(Digest, RemovePrefix, ..)"
        ],
        "input_types": [
          "Flake8Partition",
          "Flake8",
          "Flake8FirstPartyPlugins"
        ],
        "name": "pants.backend.python.lint.flake8.rules.flake8_lint_partition",
        "output_desc": "LintResult(exit_code: 'int', stdout: 'str', stderr: 'str', partition_description: 'str | None' = None, report: 'Digest' = Digest('e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855', 0))",
        "output_type": "LintResult",
        "provider": "pants.backend.python.lint.flake8"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Pex, RequirementsPexRequest, ..)",
          "Get(Pex, PexRequest, ..)",
          "Get(PythonSourceFiles, PythonSourceFilesRequest, ..)",
          "Get(SourceFiles, SourceFilesRequest, ..)",
          "Get(Digest, CreateDigest, ..)",
          "Get(VenvPex, VenvPexRequest, ..)",
          "Get(ConfigFiles, ConfigFilesRequest, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(FallibleProcessResult, VenvPexProcess, ..)",
          "Get(Digest, RemovePrefix, ..)"
        ],
        "input_types": [
          "PylintPartition",
          "Pylint",
          "PylintFirstPartyPlugins"
        ],
        "name": "pants.backend.python.lint.pylint.rules.pylint_lint_partition",
        "output_desc": "LintResult(exit_code: 'int', stdout: 'str', stderr: 'str', partition_description: 'str | None' = None, report: 'Digest' = Digest('e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855', 0))",
        "output_type": "LintResult",
        "provider": "pants.backend.python.lint.pylint"
      }
    ],
    "LintResults": [
      {
        "description": "Lint with regex patterns",
        "help": null,
        "input_gets": [
          "Get(DigestContents, PathGlobs, ..)"
        ],
        "input_types": [
          "RegexLintRequest",
          "RegexLintSubsystem"
        ],
        "name": "pants.backend.project_info.regex_lint.lint_with_regex_patterns",
        "output_desc": "Zero or more LintResult objects for a single linter.\n\nTypically, linters will return one result. If they no-oped, they will return zero results.\nHowever, some linters may need to partition their input and thus may need to return multiple\nresults. For example, many Python linters will need to group by interpreter compatibility.",
        "output_type": "LintResults",
        "provider": "pants.backend.project_info"
      },
      {
        "description": "Lint with buf lint",
        "help": null,
        "input_gets": [
          "Get(TransitiveTargets, TransitiveTargetsRequest, ..)",
          "Get(StrippedSourceFiles, SourceFilesRequest, ..)",
          "Get(DownloadedExternalTool, ExternalToolRequest, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(FallibleProcessResult, Process, ..)"
        ],
        "input_types": [
          "BufLintRequest",
          "BufSubsystem"
        ],
        "name": "pants.backend.codegen.protobuf.lint.buf.lint_rules.run_buf",
        "output_desc": "Zero or more LintResult objects for a single linter.\n\nTypically, linters will return one result. If they no-oped, they will return zero results.\nHowever, some linters may need to partition their input and thus may need to return multiple\nresults. For example, many Python linters will need to group by interpreter compatibility.",
        "output_type": "LintResults",
        "provider": "pants.backend.codegen.protobuf.lint.buf"
      },
      {
        "description": "Lint with Hadolint",
        "help": null,
        "input_gets": [
          "Get(DownloadedExternalTool, ExternalToolRequest, ..)",
          "Get(ConfigFiles, ConfigFilesRequest, ..)",
          "Get(DockerfileInfo, DockerfileInfoRequest, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(FallibleProcessResult, Process, ..)"
        ],
        "input_types": [
          "HadolintRequest",
          "Hadolint"
        ],
        "name": "pants.backend.docker.lint.hadolint.rules.run_hadolint",
        "output_desc": "Zero or more LintResult objects for a single linter.\n\nTypically, linters will return one result. If they no-oped, they will return zero results.\nHowever, some linters may need to partition their input and thus may need to return multiple\nresults. For example, many Python linters will need to group by interpreter compatibility.",
        "output_type": "LintResults",
        "provider": "pants.backend.docker.lint.hadolint"
      },
      {
        "description": "Lint Helm charts",
        "help": null,
        "input_gets": [
          "Get(HelmChart, HelmChartRequest, ..)",
          "Get(FallibleProcessResult, HelmProcess, ..)"
        ],
        "input_types": [
          "HelmLintRequest",
          "HelmSubsystem"
        ],
        "name": "pants.backend.helm.goals.lint.run_helm_lint",
        "output_desc": "Zero or more LintResult objects for a single linter.\n\nTypically, linters will return one result. If they no-oped, they will return zero results.\nHowever, some linters may need to partition their input and thus may need to return multiple\nresults. For example, many Python linters will need to group by interpreter compatibility.",
        "output_type": "LintResults",
        "provider": "pants.backend.experimental.helm"
      },
      {
        "description": "Lint with Bandit",
        "help": null,
        "input_gets": [
          "Get(LintResult, BanditPartition, ..)"
        ],
        "input_types": [
          "BanditRequest",
          "Bandit",
          "PythonSetup"
        ],
        "name": "pants.backend.python.lint.bandit.rules.bandit_lint",
        "output_desc": "Zero or more LintResult objects for a single linter.\n\nTypically, linters will return one result. If they no-oped, they will return zero results.\nHowever, some linters may need to partition their input and thus may need to return multiple\nresults. For example, many Python linters will need to group by interpreter compatibility.",
        "output_type": "LintResults",
        "provider": "pants.backend.python.lint.bandit"
      },
      {
        "description": "Lint with Flake8",
        "help": null,
        "input_gets": [
          "Get(LintResult, Flake8Partition, ..)"
        ],
        "input_types": [
          "Flake8Request",
          "Flake8",
          "PythonSetup",
          "Flake8FirstPartyPlugins"
        ],
        "name": "pants.backend.python.lint.flake8.rules.flake8_lint",
        "output_desc": "Zero or more LintResult objects for a single linter.\n\nTypically, linters will return one result. If they no-oped, they will return zero results.\nHowever, some linters may need to partition their input and thus may need to return multiple\nresults. For example, many Python linters will need to group by interpreter compatibility.",
        "output_type": "LintResults",
        "provider": "pants.backend.python.lint.flake8"
      },
      {
        "description": "Lint using Pylint",
        "help": null,
        "input_gets": [
          "Get(PylintPartitions, PylintRequest, ..)",
          "Get(LintResult, PylintPartition, ..)"
        ],
        "input_types": [
          "PylintRequest",
          "Pylint"
        ],
        "name": "pants.backend.python.lint.pylint.rules.pylint_lint",
        "output_desc": "Zero or more LintResult objects for a single linter.\n\nTypically, linters will return one result. If they no-oped, they will return zero results.\nHowever, some linters may need to partition their input and thus may need to return multiple\nresults. For example, many Python linters will need to group by interpreter compatibility.",
        "output_type": "LintResults",
        "provider": "pants.backend.python.lint.pylint"
      },
      {
        "description": "Lint with Shellcheck",
        "help": null,
        "input_gets": [
          "Get(Targets, DependenciesRequest, ..)",
          "Get(SourceFiles, SourceFilesRequest, ..)",
          "Get(DownloadedExternalTool, ExternalToolRequest, ..)",
          "Get(ConfigFiles, ConfigFilesRequest, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(FallibleProcessResult, Process, ..)"
        ],
        "input_types": [
          "ShellcheckRequest",
          "Shellcheck"
        ],
        "name": "pants.backend.shell.lint.shellcheck.rules.run_shellcheck",
        "output_desc": "Zero or more LintResult objects for a single linter.\n\nTypically, linters will return one result. If they no-oped, they will return zero results.\nHowever, some linters may need to partition their input and thus may need to return multiple\nresults. For example, many Python linters will need to group by interpreter compatibility.",
        "output_type": "LintResults",
        "provider": "pants.backend.shell.lint.shellcheck"
      }
    ],
    "LintSubsystem": [
      {
        "description": null,
        "help": "Run all linters and/or formatters in check mode.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_lint",
        "output_desc": null,
        "output_type": "LintSubsystem",
        "provider": "pants.core"
      }
    ],
    "List": [
      {
        "description": "`list` goal",
        "help": null,
        "input_gets": [
          "Get(UnexpandedTargets, Addresses, ..)"
        ],
        "input_types": [
          "Addresses",
          "ListSubsystem",
          "Console"
        ],
        "name": "pants.backend.project_info.list_targets.list_targets",
        "output_desc": null,
        "output_type": "List",
        "provider": "pants.backend.project_info"
      }
    ],
    "ListSubsystem": [
      {
        "description": null,
        "help": "Lists all targets matching the file or target arguments.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_list",
        "output_desc": null,
        "output_type": "ListSubsystem",
        "provider": "pants.backend.project_info"
      }
    ],
    "LoadedGoBinary": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Digest, CreateDigest, ..)",
          "Get(ImportConfig, ImportConfigRequest, ..)",
          "Get(BuiltGoPackage, BuildGoPackageRequest, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(LinkedGoBinary, LinkGoBinaryRequest, ..)"
        ],
        "input_types": [
          "LoadedGoBinaryRequest"
        ],
        "name": "pants.backend.go.go_sources.load_go_binary.setup_go_binary",
        "output_desc": "LoadedGoBinary(digest: 'Digest')",
        "output_type": "LoadedGoBinary",
        "provider": "pants.backend.experimental.go"
      }
    ],
    "LoadedLockfile": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Digest, PathGlobs, ..)",
          "Get(DigestContents, Digest, ..)",
          "Get(Digest, CreateDigest, ..)"
        ],
        "input_types": [
          "LoadedLockfileRequest",
          "PythonSetup"
        ],
        "name": "pants.backend.python.util_rules.pex_requirements.load_lockfile",
        "output_desc": "A lockfile after loading and header stripping.\n\nValidation is deferred until consumption time, because each consumed subset (in the case of a\nPEX-native lockfile) can be individually validated.",
        "output_type": "LoadedLockfile",
        "provider": "pants.core"
      }
    ],
    "LocalDistWheels": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(BuiltPackage, PackageFieldSet, ..)",
          "Get(Snapshot, DigestSubset, ..)",
          "Get(WrappedTarget, Address, ..)",
          "Get(ProcessResult, Process, ..)"
        ],
        "input_types": [
          "PythonDistributionFieldSet",
          "BashBinary",
          "UnzipBinary"
        ],
        "name": "pants.backend.python.util_rules.local_dists.isolate_local_dist_wheels",
        "output_desc": "Contains the wheels isolated from a single local Python distribution.",
        "output_type": "LocalDistWheels",
        "provider": "pants.backend.python"
      }
    ],
    "LocalDistsPex": [
      {
        "description": "Building local distributions",
        "help": null,
        "input_gets": [
          "Get(TransitiveTargets, TransitiveTargetsRequest, ..)",
          "Get(LocalDistWheels, PythonDistributionFieldSet, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(Pex, PexRequest, ..)",
          "Get(Snapshot, DigestSubset, ..)"
        ],
        "input_types": [
          "LocalDistsPexRequest"
        ],
        "name": "pants.backend.python.util_rules.local_dists.build_local_dists",
        "output_desc": "A PEX file containing locally-built dists.\n\nCan be consumed from another PEX, e.g., by adding to PEX_PATH.\n\nThe PEX will only contain locally built dists and not their dependencies. For Pants generated\n`setup.py` / `pyproject.toml`, the dependencies will be included in the standard resolve process\nthat the locally-built dists PEX is adjoined to via PEX_PATH. For hand-made `setup.py` /\n`pyproject.toml` with 3rdparty dependencies not hand-mirrored into BUILD file dependencies, this\nwill lead to issues. See https://github.com/pantsbuild/pants/issues/13587#issuecomment-974863636\nfor one way to fix this corner which is intentionally punted on for now.\n\nLists the files provided by the dists on sys.path, so they can be subtracted from\nsources digests, to prevent the same file ending up on sys.path twice.",
        "output_type": "LocalDistsPex",
        "provider": "pants.backend.python"
      }
    ],
    "MaterializeBuildTargetSourcesResult": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(BSPBuildTargetInternal, BuildTargetIdentifier, ..)",
          "Get(BSPBuildTargetSourcesInfo, BSPBuildTargetInternal, ..)"
        ],
        "input_types": [
          "MaterializeBuildTargetSourcesRequest",
          "BuildRoot"
        ],
        "name": "pants.bsp.util_rules.targets.materialize_bsp_build_target_sources",
        "output_desc": "MaterializeBuildTargetSourcesResult(sources_item: 'SourcesItem')",
        "output_type": "MaterializeBuildTargetSourcesResult",
        "provider": "pants.core"
      }
    ],
    "MaterializeScalaRuntimeJarsResult": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(ToolClasspath, ToolClasspathRequest, ..)",
          "Get(Digest, AddPrefix, ..)",
          "Get(Snapshot, Digest, ..)"
        ],
        "input_types": [
          "MaterializeScalaRuntimeJarsRequest"
        ],
        "name": "pants.backend.scala.bsp.rules.materialize_scala_runtime_jars",
        "output_desc": "MaterializeScalaRuntimeJarsResult(content: 'Snapshot')",
        "output_type": "MaterializeScalaRuntimeJarsResult",
        "provider": "pants.backend.experimental.scala"
      }
    ],
    "MaterializedJvmPlugin": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(ArtifactRequirements, GatherJvmCoordinatesRequest, ..)",
          "Get(ToolClasspath, ToolClasspathRequest, ..)"
        ],
        "input_types": [
          "MaterializeJvmPluginRequest"
        ],
        "name": "pants.backend.codegen.protobuf.scala.rules.materialize_jvm_plugin",
        "output_desc": "MaterializedJvmPlugin(name: 'str', classpath: 'ToolClasspath')",
        "output_type": "MaterializedJvmPlugin",
        "provider": "pants.backend.experimental.codegen.protobuf.scala"
      }
    ],
    "MaterializedJvmPlugins": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(MaterializedJvmPlugin, MaterializeJvmPluginRequest, ..)",
          "Get(Digest, AddPrefix, ..)",
          "Get(Digest, MergeDigests, ..)"
        ],
        "input_types": [
          "MaterializeJvmPluginsRequest"
        ],
        "name": "pants.backend.codegen.protobuf.scala.rules.materialize_jvm_plugins",
        "output_desc": "MaterializedJvmPlugins(digest: 'Digest', plugins: 'tuple[MaterializedJvmPlugin, ...]')",
        "output_type": "MaterializedJvmPlugins",
        "provider": "pants.backend.experimental.codegen.protobuf.scala"
      }
    ],
    "MaybeExtractArchiveRequest": [
      {
        "description": null,
        "help": "Backwards-compatibility helper.",
        "input_gets": [],
        "input_types": [
          "Digest"
        ],
        "name": "pants.core.util_rules.archive.convert_digest_to_MaybeExtractArchiveRequest",
        "output_desc": "A request to extract a single archive file (otherwise returns the input digest).\n\n:param digest: The digest of the archive to maybe extract. If the archive contains a single file\n    which matches a known suffix, the `ExtractedArchive` will contain the extracted digest.\n    Otherwise the `ExtractedArchive` will contain this digest.\n:param use_suffix: If provided, extracts the single file archive as if it had this suffix.\n    Useful in situations where the file is archived then renamed.\n    (E.g. A Python `.whl` is a renamed `.zip`, so the client should provide `\".zip\"`)",
        "output_type": "MaybeExtractArchiveRequest",
        "provider": "pants.core"
      }
    ],
    "MaybeGitBinary": [
      {
        "description": "Finding the `git` binary",
        "help": null,
        "input_gets": [
          "Get(BinaryPaths, BinaryPathRequest, ..)"
        ],
        "input_types": [],
        "name": "pants.core.util_rules.system_binaries.maybe_find_git",
        "output_desc": "MaybeGitBinary(git_binary: 'GitBinary | None' = None)",
        "output_type": "MaybeGitBinary",
        "provider": "pants.core"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "MaybeGitBinaryRequest",
          "MaybeGitBinary"
        ],
        "name": "pants.core.util_rules.system_binaries.maybe_find_git_wrapper",
        "output_desc": "MaybeGitBinary(git_binary: 'GitBinary | None' = None)",
        "output_type": "MaybeGitBinary",
        "provider": "pants.core"
      }
    ],
    "MaybeGitWorktree": [
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "GitWorktreeRequest",
          "MaybeGitBinary"
        ],
        "name": "pants.vcs.git.get_git_worktree",
        "output_desc": "MaybeGitWorktree(git_worktree: 'GitWorktree | None' = None)",
        "output_type": "MaybeGitWorktree",
        "provider": "pants.core"
      }
    ],
    "MaybeWarnPythonRepos": [
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "MaybeWarnPythonReposRequest",
          "PythonRepos"
        ],
        "name": "pants.backend.python.goals.lockfile.maybe_warn_python_repos",
        "output_desc": null,
        "output_type": "MaybeWarnPythonRepos",
        "provider": "pants.backend.docker"
      }
    ],
    "MergedCoverageData": [
      {
        "description": "Merge Pytest coverage data",
        "help": null,
        "input_gets": [
          "Get(Digest, AddPrefix, ..)",
          "Get(DigestContents, Digest, ..)",
          "Get(Digest, PathGlobs, ..)",
          "Get(Digest, CreateDigest, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(ProcessResult, VenvPexProcess, ..)"
        ],
        "input_types": [
          "PytestCoverageDataCollection",
          "CoverageSetup",
          "CoverageConfig",
          "CoverageSubsystem",
          "AllSourceRoots"
        ],
        "name": "pants.backend.python.goals.coverage_py.merge_coverage_data",
        "output_desc": "MergedCoverageData(coverage_data: 'Digest', addresses: 'tuple[Address, ...]')",
        "output_type": "MergedCoverageData",
        "provider": "pants.backend.python"
      }
    ],
    "MkdirBinary": [
      {
        "description": "Finding the `mkdir` binary",
        "help": null,
        "input_gets": [
          "Get(BinaryPaths, BinaryPathRequest, ..)"
        ],
        "input_types": [],
        "name": "pants.core.util_rules.system_binaries.find_mkdir",
        "output_desc": null,
        "output_type": "MkdirBinary",
        "provider": "pants.core"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "MkdirBinaryRequest",
          "MkdirBinary"
        ],
        "name": "pants.core.util_rules.system_binaries.find_mkdir_wrapper",
        "output_desc": null,
        "output_type": "MkdirBinary",
        "provider": "pants.core"
      }
    ],
    "ModuleDescriptors": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(ProcessResult, GoSdkProcess, ..)"
        ],
        "input_types": [
          "ModuleDescriptorsRequest"
        ],
        "name": "pants.backend.go.util_rules.third_party_pkg.analyze_module_dependencies",
        "output_desc": "ModuleDescriptors(modules: 'FrozenOrderedSet[ModuleDescriptor]', go_mods_digest: 'Digest')",
        "output_type": "ModuleDescriptors",
        "provider": "pants.backend.experimental.go"
      }
    ],
    "MyPy": [
      {
        "description": null,
        "help": "The MyPy Python type checker (http://mypy-lang.org/).",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_mypy",
        "output_desc": null,
        "output_type": "MyPy",
        "provider": "pants.backend.python.typecheck.mypy"
      }
    ],
    "MyPyConfigFile": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(ConfigFiles, ConfigFilesRequest, ..)",
          "Get(DigestContents, Digest, ..)"
        ],
        "input_types": [
          "MyPy"
        ],
        "name": "pants.backend.python.typecheck.mypy.subsystem.setup_mypy_config",
        "output_desc": "MyPyConfigFile(digest: 'Digest', _python_version_configured: 'bool')",
        "output_type": "MyPyConfigFile",
        "provider": "pants.backend.python.typecheck.mypy"
      }
    ],
    "MyPyFirstPartyPlugins": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Addresses, UnparsedAddressInputs, ..)",
          "Get(TransitiveTargets, TransitiveTargetsRequest, ..)",
          "Get(PythonSourceFiles, PythonSourceFilesRequest, ..)"
        ],
        "input_types": [
          "MyPy"
        ],
        "name": "pants.backend.python.typecheck.mypy.subsystem.mypy_first_party_plugins",
        "output_desc": "MyPyFirstPartyPlugins(requirement_strings: 'FrozenOrderedSet[str]', sources_digest: 'Digest', source_roots: 'tuple[str, ...]')",
        "output_type": "MyPyFirstPartyPlugins",
        "provider": "pants.backend.python.typecheck.mypy"
      }
    ],
    "MyPyPartitions": [
      {
        "description": "Determine if necessary to partition MyPy input",
        "help": null,
        "input_gets": [
          "Get(CoarsenedTargets, CoarsenedTargetsRequest, ..)"
        ],
        "input_types": [
          "MyPyRequest",
          "MyPy",
          "PythonSetup"
        ],
        "name": "pants.backend.python.typecheck.mypy.rules.mypy_determine_partitions",
        "output_desc": null,
        "output_type": "MyPyPartitions",
        "provider": "pants.backend.python.typecheck.mypy"
      }
    ],
    "Nailgun": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(ClasspathEntry, CoursierLockfileEntry, ..)"
        ],
        "input_types": [],
        "name": "pants.jvm.jdk_rules.fetch_nailgun",
        "output_desc": "Nailgun(classpath_entry: 'ClasspathEntry')",
        "output_type": "Nailgun",
        "provider": "pants.backend.experimental.java"
      }
    ],
    "OptionalPex": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Pex, PexRequest, ..)"
        ],
        "input_types": [
          "OptionalPexRequest"
        ],
        "name": "pants.backend.python.util_rules.pex.create_optional_pex",
        "output_desc": "OptionalPex(maybe_pex: 'Pex | None')",
        "output_type": "OptionalPex",
        "provider": "pants.core"
      }
    ],
    "OptionalPexRequest": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(InterpreterConstraints, InterpreterConstraintsRequest, ..)",
          "Get(OptionalPexRequest, _ConstraintsRepositoryPexRequest, ..)",
          "Get(ChosenPythonResolve, ChosenPythonResolveRequest, ..)"
        ],
        "input_types": [
          "_RepositoryPexRequest",
          "PythonSetup"
        ],
        "name": "pants.backend.python.util_rules.pex_from_targets.get_repository_pex",
        "output_desc": "OptionalPexRequest(maybe_pex_request: 'PexRequest | None')",
        "output_type": "OptionalPexRequest",
        "provider": "pants.backend.python"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(TransitiveTargets, TransitiveTargetsRequest, ..)",
          "Get(InterpreterConstraints, InterpreterConstraintsRequest, ..)"
        ],
        "input_types": [
          "_ConstraintsRepositoryPexRequest",
          "PythonSetup",
          "GlobalRequirementConstraints"
        ],
        "name": "pants.backend.python.util_rules.pex_from_targets._setup_constraints_repository_pex",
        "output_desc": "OptionalPexRequest(maybe_pex_request: 'PexRequest | None')",
        "output_type": "OptionalPexRequest",
        "provider": "pants.backend.python"
      }
    ],
    "OptionalSourceRoot": [
      {
        "description": null,
        "help": "Rule to request a SourceRoot that may not exist.",
        "input_gets": [
          "Get(Paths, PathGlobs, ..)",
          "Get(OptionalSourceRoot, SourceRootRequest, ..)"
        ],
        "input_types": [
          "SourceRootRequest",
          "SourceRootConfig"
        ],
        "name": "pants.source.source_root.get_optional_source_root",
        "output_desc": "OptionalSourceRoot(source_root: 'SourceRoot | None')",
        "output_type": "OptionalSourceRoot",
        "provider": "pants.core"
      }
    ],
    "OptionalSourceRootsResult": [
      {
        "description": null,
        "help": "Rule to request source roots that may not exist.",
        "input_gets": [
          "Get(OptionalSourceRoot, SourceRootRequest, ..)"
        ],
        "input_types": [
          "SourceRootsRequest"
        ],
        "name": "pants.source.source_root.get_optional_source_roots",
        "output_desc": "OptionalSourceRootsResult(path_to_optional_root: 'FrozenDict[PurePath, OptionalSourceRoot]')",
        "output_type": "OptionalSourceRootsResult",
        "provider": "pants.core"
      }
    ],
    "OwnedDependencies": [
      {
        "description": "Find all code to be published in the distribution",
        "help": "Find the dependencies of dependency_owner that are owned by it.\n\nIncludes dependency_owner itself.",
        "input_gets": [
          "Get(TransitiveTargets, TransitiveTargetsRequest, ..)",
          "Get(ExportedTarget, OwnedDependency, ..)"
        ],
        "input_types": [
          "DependencyOwner",
          "UnionMembership"
        ],
        "name": "pants.backend.python.goals.setup_py.get_owned_dependencies",
        "output_desc": null,
        "output_type": "OwnedDependencies",
        "provider": "pants.backend.python"
      }
    ],
    "OwningGoMod": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(UnexpandedTargets, AddressSpecs, ..)"
        ],
        "input_types": [
          "OwningGoModRequest"
        ],
        "name": "pants.backend.go.util_rules.go_mod.find_nearest_go_mod",
        "output_desc": "OwningGoMod(address: 'Address')",
        "output_type": "OwningGoMod",
        "provider": "pants.backend.experimental.go"
      }
    ],
    "Package": [
      {
        "description": "`package` goal",
        "help": null,
        "input_gets": [
          "Get(TargetRootsToFieldSets, TargetRootsToFieldSetsRequest, ..)",
          "Get(BuiltPackage, PackageFieldSet, ..)",
          "Get(Digest, MergeDigests, ..)"
        ],
        "input_types": [
          "Workspace",
          "DistDir"
        ],
        "name": "pants.core.goals.package.package_asset",
        "output_desc": null,
        "output_type": "Package",
        "provider": "pants.core"
      }
    ],
    "PackageAnalyzerSetup": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(LoadedGoBinary, LoadedGoBinaryRequest, ..)"
        ],
        "input_types": [
          "GoRoot"
        ],
        "name": "pants.backend.go.util_rules.pkg_analyzer.setup_go_package_analyzer",
        "output_desc": "PackageAnalyzerSetup(digest: Digest, path: str)",
        "output_type": "PackageAnalyzerSetup",
        "provider": "pants.backend.experimental.go"
      }
    ],
    "PackageSubsystem": [
      {
        "description": null,
        "help": "Create a distributable package.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_package",
        "output_desc": null,
        "output_type": "PackageSubsystem",
        "provider": "pants.core"
      }
    ],
    "ParsedPythonDependencies": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(PythonExecutable, InterpreterConstraints, ..)",
          "Get(StrippedSourceFiles, SourceFilesRequest, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(ProcessResult, Process, ..)"
        ],
        "input_types": [
          "ParsePythonDependenciesRequest",
          "ParserScript"
        ],
        "name": "pants.backend.python.dependency_inference.parse_python_dependencies.parse_python_dependencies",
        "output_desc": "ParsedPythonDependencies(imports: pants.backend.python.dependency_inference.parse_python_dependencies.ParsedPythonImports, assets: pants.backend.python.dependency_inference.parse_python_dependencies.ParsedPythonAssetPaths)",
        "output_type": "ParsedPythonDependencies",
        "provider": "pants.backend.python"
      }
    ],
    "ParsedShellImports": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(DownloadedExternalTool, ExternalToolRequest, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(FallibleProcessResult, Process, ..)"
        ],
        "input_types": [
          "ParseShellImportsRequest",
          "Shellcheck"
        ],
        "name": "pants.backend.shell.dependency_inference.parse_shell_imports",
        "output_desc": null,
        "output_type": "ParsedShellImports",
        "provider": "pants.backend.shell"
      }
    ],
    "ParsedThrift": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(HydratedSources, HydrateSourcesRequest, ..)",
          "Get(DigestContents, Digest, ..)"
        ],
        "input_types": [
          "ParsedThriftRequest"
        ],
        "name": "pants.backend.codegen.thrift.thrift_parser.parse_thrift_file",
        "output_desc": "ParsedThrift(imports: 'FrozenOrderedSet[str]', namespaces: 'FrozenDict[str, str]')",
        "output_type": "ParsedThrift",
        "provider": "pants.backend.codegen.thrift.apache.python"
      }
    ],
    "ParserScript": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Digest, CreateDigest, ..)"
        ],
        "input_types": [],
        "name": "pants.backend.python.dependency_inference.parse_python_dependencies.parser_script",
        "output_desc": "ParserScript(digest: Digest)",
        "output_type": "ParserScript",
        "provider": "pants.backend.python"
      }
    ],
    "ParserSetup": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Digest, CreateDigest, ..)",
          "Get(VenvPex, PexRequest, ..)"
        ],
        "input_types": [
          "DockerfileParser"
        ],
        "name": "pants.backend.docker.subsystems.dockerfile_parser.setup_parser",
        "output_desc": "ParserSetup(pex: 'VenvPex')",
        "output_type": "ParserSetup",
        "provider": "pants.backend.docker"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Digest, CreateDigest, ..)",
          "Get(VenvPex, PexRequest, ..)"
        ],
        "input_types": [
          "TerraformHcl2Parser"
        ],
        "name": "pants.backend.terraform.dependency_inference.setup_parser",
        "output_desc": "ParserSetup(pex: 'VenvPex')",
        "output_type": "ParserSetup",
        "provider": "pants.backend.experimental.terraform"
      }
    ],
    "Partition": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Digest, DigestSubset, ..)"
        ],
        "input_types": [
          "SetupScalafmtPartition",
          "InternalJdk"
        ],
        "name": "pants.backend.scala.lint.scalafmt.rules.setup_scalafmt_partition",
        "output_desc": "Partition(process: 'JvmProcess', description: 'str')",
        "output_type": "Partition",
        "provider": "pants.backend.experimental.scala.lint.scalafmt"
      }
    ],
    "PathsGoal": [
      {
        "description": "`paths` goal",
        "help": null,
        "input_gets": [
          "Get(Targets, Specs, ..)",
          "Get(TransitiveTargets, TransitiveTargetsRequest, ..)",
          "Get(Targets, DependenciesRequest, ..)"
        ],
        "input_types": [
          "Console",
          "PathsSubsystem"
        ],
        "name": "pants.backend.project_info.paths.paths",
        "output_desc": null,
        "output_type": "PathsGoal",
        "provider": "pants.backend.project_info"
      }
    ],
    "PathsSubsystem": [
      {
        "description": null,
        "help": "List the paths between two addresses.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_paths",
        "output_desc": null,
        "output_type": "PathsSubsystem",
        "provider": "pants.backend.project_info"
      }
    ],
    "Peek": [
      {
        "description": "`peek` goal",
        "help": null,
        "input_gets": [
          "Get(TargetDatas, UnexpandedTargets, ..)"
        ],
        "input_types": [
          "Console",
          "PeekSubsystem",
          "UnexpandedTargets"
        ],
        "name": "pants.backend.project_info.peek.peek",
        "output_desc": null,
        "output_type": "Peek",
        "provider": "pants.backend.project_info"
      }
    ],
    "PeekSubsystem": [
      {
        "description": null,
        "help": "Display BUILD target info",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_peek",
        "output_desc": "Display detailed target information in JSON form.",
        "output_type": "PeekSubsystem",
        "provider": "pants.backend.project_info"
      }
    ],
    "Pex": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(BuildPexResult, PexRequest, ..)"
        ],
        "input_types": [
          "PexRequest"
        ],
        "name": "pants.backend.python.util_rules.pex.create_pex",
        "output_desc": "Wrapper for a digest containing a pex file created with some filename.",
        "output_type": "Pex",
        "provider": "pants.core"
      }
    ],
    "PexBinaryDefaults": [
      {
        "description": null,
        "help": "Default settings for creating PEX executables.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_pex_binary_defaults",
        "output_desc": null,
        "output_type": "PexBinaryDefaults",
        "provider": "pants.backend.python"
      }
    ],
    "PexCli": [
      {
        "description": null,
        "help": "The PEX (Python EXecutable) tool (https://github.com/pantsbuild/pex).",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_pex_cli",
        "output_desc": null,
        "output_type": "PexCli",
        "provider": "pants.core"
      }
    ],
    "PexEnvironment": [
      {
        "description": "Prepare environment for running PEXes",
        "help": null,
        "input_gets": [],
        "input_types": [
          "PythonBootstrap",
          "PythonBinary",
          "PexRuntimeEnvironment",
          "SubprocessEnvironmentVars",
          "NamedCachesDirOption"
        ],
        "name": "pants.backend.python.util_rules.pex_environment.find_pex_python",
        "output_desc": "PexEnvironment(path: 'tuple[str, ...]', interpreter_search_paths: 'tuple[str, ...]', subprocess_environment_dict: 'FrozenDict[str, str]', named_caches_dir: 'PurePath', bootstrap_python: 'PythonExecutable | None' = None, venv_use_symlinks: 'bool' = False)",
        "output_type": "PexEnvironment",
        "provider": "pants.core"
      }
    ],
    "PexFromTargetsRequest": [
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "RequirementsPexRequest"
        ],
        "name": "pants.backend.python.util_rules.pex_from_targets.generalize_requirementspexrequest",
        "output_desc": "PexFromTargetsRequest(addresses: 'Iterable[Address]', *, output_filename: 'str', internal_only: 'bool', layout: 'PexLayout | None' = None, main: 'MainSpecification | None' = None, platforms: 'PexPlatforms' = PexPlatforms([]), complete_platforms: 'CompletePlatforms' = CompletePlatforms([]), additional_args: 'Iterable[str]' = (), additional_lockfile_args: 'Iterable[str]' = (), include_source_files: 'bool' = True, include_requirements: 'bool' = True, include_local_dists: 'bool' = False, additional_sources: 'Digest | None' = None, additional_inputs: 'Digest | None' = None, hardcoded_interpreter_constraints: 'InterpreterConstraints | None' = None, description: 'str | None' = None) -> 'None'",
        "output_type": "PexFromTargetsRequest",
        "provider": "pants.backend.python"
      }
    ],
    "PexPEX": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(DownloadedExternalTool, ExternalToolRequest, ..)"
        ],
        "input_types": [
          "PexCli"
        ],
        "name": "pants.backend.python.util_rules.pex_cli.download_pex_pex",
        "output_desc": "The Pex PEX binary.",
        "output_type": "PexPEX",
        "provider": "pants.core"
      }
    ],
    "PexRequest": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(PexRequirements, _PexRequirementsRequest, ..)",
          "Get(ChosenPythonResolve, ChosenPythonResolveRequest, ..)",
          "Get(LoadedLockfile, LoadedLockfileRequest, ..)",
          "Get(OptionalPexRequest, _RepositoryPexRequest, ..)",
          "Get(OptionalPex, OptionalPexRequest, ..)",
          "Get(InterpreterConstraints, InterpreterConstraintsRequest, ..)",
          "Get(TransitiveTargets, TransitiveTargetsRequest, ..)",
          "Get(PythonSourceFiles, PythonSourceFilesRequest, ..)",
          "Get(LocalDistsPex, LocalDistsPexRequest, ..)",
          "Get(StrippedPythonSourceFiles, PythonSourceFiles, ..)",
          "Get(Digest, MergeDigests, ..)"
        ],
        "input_types": [
          "PexFromTargetsRequest",
          "PythonSetup"
        ],
        "name": "pants.backend.python.util_rules.pex_from_targets.create_pex_from_targets",
        "output_desc": "PexRequest(*, output_filename: 'str', internal_only: 'bool', layout: 'PexLayout | None' = None, python: 'PythonExecutable | None' = None, requirements: 'PexRequirements | EntireLockfile' = PexRequirements(req_strings=FrozenOrderedSet(), constraints_strings=FrozenOrderedSet(), from_superset=None), interpreter_constraints=InterpreterConstraints(), platforms=PexPlatforms([]), complete_platforms=CompletePlatforms([]), sources: 'Digest | None' = None, additional_inputs: 'Digest | None' = None, main: 'MainSpecification | None' = None, additional_args: 'Iterable[str]' = (), pex_path: 'Iterable[Pex]' = (), description: 'str | None' = None) -> 'None'",
        "output_type": "PexRequest",
        "provider": "pants.backend.python"
      }
    ],
    "PexRequirements": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(TransitiveTargets, TransitiveTargetsRequest, ..)"
        ],
        "input_types": [
          "_PexRequirementsRequest",
          "GlobalRequirementConstraints"
        ],
        "name": "pants.backend.python.util_rules.pex_from_targets.determine_requirement_strings_in_closure",
        "output_desc": "A request to resolve a series of requirements (optionally from a \"superset\" resolve).",
        "output_type": "PexRequirements",
        "provider": "pants.backend.python"
      }
    ],
    "PexResolveInfo": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(ProcessResult, VenvPexProcess, ..)"
        ],
        "input_types": [
          "VenvPex"
        ],
        "name": "pants.backend.python.util_rules.pex.determine_venv_pex_resolve_info",
        "output_desc": "Information about all distributions resolved in a PEX file, as reported by `PEX_TOOLS=1\nrepository info -v`.",
        "output_type": "PexResolveInfo",
        "provider": "pants.core"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(ProcessResult, PexProcess, ..)"
        ],
        "input_types": [
          "PexPEX",
          "Pex"
        ],
        "name": "pants.backend.python.util_rules.pex.determine_pex_resolve_info",
        "output_desc": "Information about all distributions resolved in a PEX file, as reported by `PEX_TOOLS=1\nrepository info -v`.",
        "output_type": "PexResolveInfo",
        "provider": "pants.core"
      }
    ],
    "PexRuntimeEnvironment": [
      {
        "description": null,
        "help": "How Pants uses Pex to run Python subprocesses.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_pex",
        "output_desc": null,
        "output_type": "PexRuntimeEnvironment",
        "provider": "pants.core"
      }
    ],
    "PoetrySubsystem": [
      {
        "description": null,
        "help": "Used to generate lockfiles for third-party Python dependencies.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_poetry",
        "output_desc": null,
        "output_type": "PoetrySubsystem",
        "provider": "pants.backend.docker"
      }
    ],
    "Process": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Digest, MergeDigests, ..)"
        ],
        "input_types": [
          "PexProcess",
          "PexEnvironment"
        ],
        "name": "pants.backend.python.util_rules.pex.setup_pex_process",
        "output_desc": "Process(argv: 'Iterable[str]', *, description: 'str', level: 'LogLevel' = <LogLevel.INFO: 'info'>, input_digest: 'Digest' = Digest('e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855', 0), immutable_input_digests: 'Mapping[str, Digest] | None' = None, use_nailgun: 'Iterable[str]' = (), working_directory: 'str | None' = None, env: 'Mapping[str, str] | None' = None, append_only_caches: 'Mapping[str, str] | None' = None, output_files: 'Iterable[str] | None' = None, output_directories: 'Iterable[str] | None' = None, timeout_seconds: 'int | float | None' = None, jdk_home: 'str | None' = None, execution_slot_variable: 'str | None' = None, concurrency_available: 'int' = 0, cache_scope: 'ProcessCacheScope' = <ProcessCacheScope.SUCCESSFUL: 'successful'>, platform: 'Platform | None' = None) -> 'None'",
        "output_type": "Process",
        "provider": "pants.core"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Digest, MergeDigests, ..)"
        ],
        "input_types": [
          "VenvPexProcess",
          "PexEnvironment"
        ],
        "name": "pants.backend.python.util_rules.pex.setup_venv_pex_process",
        "output_desc": "Process(argv: 'Iterable[str]', *, description: 'str', level: 'LogLevel' = <LogLevel.INFO: 'info'>, input_digest: 'Digest' = Digest('e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855', 0), immutable_input_digests: 'Mapping[str, Digest] | None' = None, use_nailgun: 'Iterable[str]' = (), working_directory: 'str | None' = None, env: 'Mapping[str, str] | None' = None, append_only_caches: 'Mapping[str, str] | None' = None, output_files: 'Iterable[str] | None' = None, output_directories: 'Iterable[str] | None' = None, timeout_seconds: 'int | float | None' = None, jdk_home: 'str | None' = None, execution_slot_variable: 'str | None' = None, concurrency_available: 'int' = 0, cache_scope: 'ProcessCacheScope' = <ProcessCacheScope.SUCCESSFUL: 'successful'>, platform: 'Platform | None' = None) -> 'None'",
        "output_type": "Process",
        "provider": "pants.core"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Digest, CreateDigest, ..)",
          "Get(Digest, MergeDigests, ..)"
        ],
        "input_types": [
          "PexCliProcess",
          "PexPEX",
          "PexEnvironment",
          "PythonNativeCode",
          "GlobalOptions",
          "PexRuntimeEnvironment"
        ],
        "name": "pants.backend.python.util_rules.pex_cli.setup_pex_cli_process",
        "output_desc": "Process(argv: 'Iterable[str]', *, description: 'str', level: 'LogLevel' = <LogLevel.INFO: 'info'>, input_digest: 'Digest' = Digest('e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855', 0), immutable_input_digests: 'Mapping[str, Digest] | None' = None, use_nailgun: 'Iterable[str]' = (), working_directory: 'str | None' = None, env: 'Mapping[str, str] | None' = None, append_only_caches: 'Mapping[str, str] | None' = None, output_files: 'Iterable[str] | None' = None, output_directories: 'Iterable[str] | None' = None, timeout_seconds: 'int | float | None' = None, jdk_home: 'str | None' = None, execution_slot_variable: 'str | None' = None, concurrency_available: 'int' = 0, cache_scope: 'ProcessCacheScope' = <ProcessCacheScope.SUCCESSFUL: 'successful'>, platform: 'Platform | None' = None) -> 'None'",
        "output_type": "Process",
        "provider": "pants.core"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(DiffBinary, DiffBinaryRequest, ..)",
          "Get(DownloadedExternalTool, ExternalToolRequest, ..)",
          "Get(BinaryShims, BinaryShimsRequest, ..)",
          "Get(Digest, MergeDigests, ..)"
        ],
        "input_types": [
          "BufFormatRequest",
          "BufSubsystem"
        ],
        "name": "pants.backend.codegen.protobuf.lint.buf.format_rules.setup_buf_format",
        "output_desc": "Process(argv: 'Iterable[str]', *, description: 'str', level: 'LogLevel' = <LogLevel.INFO: 'info'>, input_digest: 'Digest' = Digest('e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855', 0), immutable_input_digests: 'Mapping[str, Digest] | None' = None, use_nailgun: 'Iterable[str]' = (), working_directory: 'str | None' = None, env: 'Mapping[str, str] | None' = None, append_only_caches: 'Mapping[str, str] | None' = None, output_files: 'Iterable[str] | None' = None, output_directories: 'Iterable[str] | None' = None, timeout_seconds: 'int | float | None' = None, jdk_home: 'str | None' = None, execution_slot_variable: 'str | None' = None, concurrency_available: 'int' = 0, cache_scope: 'ProcessCacheScope' = <ProcessCacheScope.SUCCESSFUL: 'successful'>, platform: 'Platform | None' = None) -> 'None'",
        "output_type": "Process",
        "provider": "pants.backend.codegen.protobuf.lint.buf"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Process, VenvPexProcess, ..)"
        ],
        "input_types": [
          "DockerfileParseRequest",
          "ParserSetup"
        ],
        "name": "pants.backend.docker.subsystems.dockerfile_parser.setup_process_for_parse_dockerfile",
        "output_desc": "Process(argv: 'Iterable[str]', *, description: 'str', level: 'LogLevel' = <LogLevel.INFO: 'info'>, input_digest: 'Digest' = Digest('e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855', 0), immutable_input_digests: 'Mapping[str, Digest] | None' = None, use_nailgun: 'Iterable[str]' = (), working_directory: 'str | None' = None, env: 'Mapping[str, str] | None' = None, append_only_caches: 'Mapping[str, str] | None' = None, output_files: 'Iterable[str] | None' = None, output_directories: 'Iterable[str] | None' = None, timeout_seconds: 'int | float | None' = None, jdk_home: 'str | None' = None, execution_slot_variable: 'str | None' = None, concurrency_available: 'int' = 0, cache_scope: 'ProcessCacheScope' = <ProcessCacheScope.SUCCESSFUL: 'successful'>, platform: 'Platform | None' = None) -> 'None'",
        "output_type": "Process",
        "provider": "pants.backend.docker"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Digest, MergeDigests, ..)",
          "Get(Environment, EnvironmentRequest, ..)"
        ],
        "input_types": [
          "GoSdkProcess",
          "GoSdkRunSetup",
          "BashBinary",
          "GolangSubsystem",
          "GoRoot"
        ],
        "name": "pants.backend.go.util_rules.sdk.setup_go_sdk_process",
        "output_desc": "Process(argv: 'Iterable[str]', *, description: 'str', level: 'LogLevel' = <LogLevel.INFO: 'info'>, input_digest: 'Digest' = Digest('e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855', 0), immutable_input_digests: 'Mapping[str, Digest] | None' = None, use_nailgun: 'Iterable[str]' = (), working_directory: 'str | None' = None, env: 'Mapping[str, str] | None' = None, append_only_caches: 'Mapping[str, str] | None' = None, output_files: 'Iterable[str] | None' = None, output_directories: 'Iterable[str] | None' = None, timeout_seconds: 'int | float | None' = None, jdk_home: 'str | None' = None, execution_slot_variable: 'str | None' = None, concurrency_available: 'int' = 0, cache_scope: 'ProcessCacheScope' = <ProcessCacheScope.SUCCESSFUL: 'successful'>, platform: 'Platform | None' = None) -> 'None'",
        "output_type": "Process",
        "provider": "pants.backend.experimental.go"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "BashBinary",
          "Coursier",
          "CoursierFetchProcess"
        ],
        "name": "pants.jvm.resolve.coursier_setup.invoke_coursier_wrapper",
        "output_desc": "Process(argv: 'Iterable[str]', *, description: 'str', level: 'LogLevel' = <LogLevel.INFO: 'info'>, input_digest: 'Digest' = Digest('e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855', 0), immutable_input_digests: 'Mapping[str, Digest] | None' = None, use_nailgun: 'Iterable[str]' = (), working_directory: 'str | None' = None, env: 'Mapping[str, str] | None' = None, append_only_caches: 'Mapping[str, str] | None' = None, output_files: 'Iterable[str] | None' = None, output_directories: 'Iterable[str] | None' = None, timeout_seconds: 'int | float | None' = None, jdk_home: 'str | None' = None, execution_slot_variable: 'str | None' = None, concurrency_available: 'int' = 0, cache_scope: 'ProcessCacheScope' = <ProcessCacheScope.SUCCESSFUL: 'successful'>, platform: 'Platform | None' = None) -> 'None'",
        "output_type": "Process",
        "provider": "pants.backend.experimental.java"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "BashBinary",
          "JvmProcess",
          "GlobalOptions"
        ],
        "name": "pants.jvm.jdk_rules.jvm_process",
        "output_desc": "Process(argv: 'Iterable[str]', *, description: 'str', level: 'LogLevel' = <LogLevel.INFO: 'info'>, input_digest: 'Digest' = Digest('e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855', 0), immutable_input_digests: 'Mapping[str, Digest] | None' = None, use_nailgun: 'Iterable[str]' = (), working_directory: 'str | None' = None, env: 'Mapping[str, str] | None' = None, append_only_caches: 'Mapping[str, str] | None' = None, output_files: 'Iterable[str] | None' = None, output_directories: 'Iterable[str] | None' = None, timeout_seconds: 'int | float | None' = None, jdk_home: 'str | None' = None, execution_slot_variable: 'str | None' = None, concurrency_available: 'int' = 0, cache_scope: 'ProcessCacheScope' = <ProcessCacheScope.SUCCESSFUL: 'successful'>, platform: 'Platform | None' = None) -> 'None'",
        "output_type": "Process",
        "provider": "pants.backend.experimental.java"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "HelmProcess",
          "HelmBinary"
        ],
        "name": "pants.backend.helm.util_rules.tool.helm_process",
        "output_desc": "Process(argv: 'Iterable[str]', *, description: 'str', level: 'LogLevel' = <LogLevel.INFO: 'info'>, input_digest: 'Digest' = Digest('e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855', 0), immutable_input_digests: 'Mapping[str, Digest] | None' = None, use_nailgun: 'Iterable[str]' = (), working_directory: 'str | None' = None, env: 'Mapping[str, str] | None' = None, append_only_caches: 'Mapping[str, str] | None' = None, output_files: 'Iterable[str] | None' = None, output_directories: 'Iterable[str] | None' = None, timeout_seconds: 'int | float | None' = None, jdk_home: 'str | None' = None, execution_slot_variable: 'str | None' = None, concurrency_available: 'int' = 0, cache_scope: 'ProcessCacheScope' = <ProcessCacheScope.SUCCESSFUL: 'successful'>, platform: 'Platform | None' = None) -> 'None'",
        "output_type": "Process",
        "provider": "pants.backend.experimental.helm"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Process, VenvPexProcess, ..)"
        ],
        "input_types": [
          "ParseTerraformModuleSources",
          "ParserSetup"
        ],
        "name": "pants.backend.terraform.dependency_inference.setup_process_for_parse_terraform_module_sources",
        "output_desc": "Process(argv: 'Iterable[str]', *, description: 'str', level: 'LogLevel' = <LogLevel.INFO: 'info'>, input_digest: 'Digest' = Digest('e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855', 0), immutable_input_digests: 'Mapping[str, Digest] | None' = None, use_nailgun: 'Iterable[str]' = (), working_directory: 'str | None' = None, env: 'Mapping[str, str] | None' = None, append_only_caches: 'Mapping[str, str] | None' = None, output_files: 'Iterable[str] | None' = None, output_directories: 'Iterable[str] | None' = None, timeout_seconds: 'int | float | None' = None, jdk_home: 'str | None' = None, execution_slot_variable: 'str | None' = None, concurrency_available: 'int' = 0, cache_scope: 'ProcessCacheScope' = <ProcessCacheScope.SUCCESSFUL: 'successful'>, platform: 'Platform | None' = None) -> 'None'",
        "output_type": "Process",
        "provider": "pants.backend.experimental.terraform"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(DownloadedExternalTool, ExternalToolRequest, ..)",
          "Get(Digest, MergeDigests, ..)"
        ],
        "input_types": [
          "TerraformProcess",
          "TerraformTool"
        ],
        "name": "pants.backend.terraform.tool.setup_terraform_process",
        "output_desc": "Process(argv: 'Iterable[str]', *, description: 'str', level: 'LogLevel' = <LogLevel.INFO: 'info'>, input_digest: 'Digest' = Digest('e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855', 0), immutable_input_digests: 'Mapping[str, Digest] | None' = None, use_nailgun: 'Iterable[str]' = (), working_directory: 'str | None' = None, env: 'Mapping[str, str] | None' = None, append_only_caches: 'Mapping[str, str] | None' = None, output_files: 'Iterable[str] | None' = None, output_directories: 'Iterable[str] | None' = None, timeout_seconds: 'int | float | None' = None, jdk_home: 'str | None' = None, execution_slot_variable: 'str | None' = None, concurrency_available: 'int' = 0, cache_scope: 'ProcessCacheScope' = <ProcessCacheScope.SUCCESSFUL: 'successful'>, platform: 'Platform | None' = None) -> 'None'",
        "output_type": "Process",
        "provider": "pants.backend.experimental.terraform"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Environment, EnvironmentRequest, ..)",
          "Get(BinaryPaths, BinaryPathRequest, ..)",
          "Get(TransitiveTargets, TransitiveTargetsRequest, ..)",
          "Get(SourceFiles, SourceFilesRequest, ..)",
          "Get(FieldSetsPerTarget, FieldSetsPerTargetRequest, ..)",
          "Get(BuiltPackage, PackageFieldSet, ..)",
          "Get(Digest, CreateDigest, ..)",
          "Get(Digest, MergeDigests, ..)"
        ],
        "input_types": [
          "ShellCommandProcessRequest",
          "ShellSetup",
          "BashBinary"
        ],
        "name": "pants.backend.shell.shell_command.prepare_shell_command_process",
        "output_desc": "Process(argv: 'Iterable[str]', *, description: 'str', level: 'LogLevel' = <LogLevel.INFO: 'info'>, input_digest: 'Digest' = Digest('e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855', 0), immutable_input_digests: 'Mapping[str, Digest] | None' = None, use_nailgun: 'Iterable[str]' = (), working_directory: 'str | None' = None, env: 'Mapping[str, str] | None' = None, append_only_caches: 'Mapping[str, str] | None' = None, output_files: 'Iterable[str] | None' = None, output_directories: 'Iterable[str] | None' = None, timeout_seconds: 'int | float | None' = None, jdk_home: 'str | None' = None, execution_slot_variable: 'str | None' = None, concurrency_available: 'int' = 0, cache_scope: 'ProcessCacheScope' = <ProcessCacheScope.SUCCESSFUL: 'successful'>, platform: 'Platform | None' = None) -> 'None'",
        "output_type": "Process",
        "provider": "pants.backend.shell"
      }
    ],
    "ProtobufMapping": [
      {
        "description": "Creating map of Protobuf file names to Protobuf targets",
        "help": null,
        "input_gets": [
          "Get(StrippedFileName, StrippedFileNameRequest, ..)"
        ],
        "input_types": [
          "AllProtobufTargets"
        ],
        "name": "pants.backend.codegen.protobuf.protobuf_dependency_inference.map_protobuf_files",
        "output_desc": "A mapping of stripped .proto file names to their owning file address.",
        "output_type": "ProtobufMapping",
        "provider": "pants.backend.codegen.protobuf.python"
      }
    ],
    "Protoc": [
      {
        "description": null,
        "help": "The protocol buffer compiler (https://developers.google.com/protocol-buffers).",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_protoc",
        "output_desc": null,
        "output_type": "Protoc",
        "provider": "pants.backend.codegen.protobuf.python"
      }
    ],
    "Publish": [
      {
        "description": "`publish` goal",
        "help": null,
        "input_gets": [
          "Get(TargetRootsToFieldSets, TargetRootsToFieldSetsRequest, ..)",
          "Get(PublishProcesses, PublishProcessesRequest, ..)",
          "Effect(InteractiveProcessResult, InteractiveProcess, ..)"
        ],
        "input_types": [
          "Console",
          "PublishSubsystem"
        ],
        "name": "pants.core.goals.publish.run_publish",
        "output_desc": null,
        "output_type": "Publish",
        "provider": "pants.core"
      }
    ],
    "PublishProcesses": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(BuiltPackage, PackageFieldSet, ..)",
          "Get(PublishProcesses, PublishRequest, ..)"
        ],
        "input_types": [
          "PublishProcessesRequest"
        ],
        "name": "pants.core.goals.publish.package_for_publish",
        "output_desc": "Collection of what processes to run for all built packages.\n\nThis is returned from implementing rules in response to a PublishRequest.\n\nDepending on the capabilities of the publishing tool, the work may be partitioned based on\nnumber of artifacts and/or repositories to publish to.",
        "output_type": "PublishProcesses",
        "provider": "pants.core"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Environment, EnvironmentRequest, ..)",
          "Get(InteractiveProcess, InteractiveProcessRequest, ..)"
        ],
        "input_types": [
          "PublishDockerImageRequest",
          "DockerBinary",
          "DockerOptions"
        ],
        "name": "pants.backend.docker.goals.publish.push_docker_images",
        "output_desc": "Collection of what processes to run for all built packages.\n\nThis is returned from implementing rules in response to a PublishRequest.\n\nDepending on the capabilities of the publishing tool, the work may be partitioned based on\nnumber of artifacts and/or repositories to publish to.",
        "output_type": "PublishProcesses",
        "provider": "pants.backend.docker"
      },
      {
        "description": "Push Helm chart to OCI registries",
        "help": null,
        "input_gets": [
          "Get(Process, HelmProcess, ..)",
          "Get(InteractiveProcess, InteractiveProcessRequest, ..)"
        ],
        "input_types": [
          "PublishHelmChartRequest",
          "HelmSubsystem"
        ],
        "name": "pants.backend.helm.goals.publish.publish_helm_chart",
        "output_desc": "Collection of what processes to run for all built packages.\n\nThis is returned from implementing rules in response to a PublishRequest.\n\nDepending on the capabilities of the publishing tool, the work may be partitioned based on\nnumber of artifacts and/or repositories to publish to.",
        "output_type": "PublishProcesses",
        "provider": "pants.backend.experimental.helm"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(VenvPex, PexRequest, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(ConfigFiles, ConfigFilesRequest, ..)",
          "Get(Snapshot, CreateDigest, ..)",
          "Get(Environment, EnvironmentRequest, ..)",
          "Get(Process, VenvPexProcess, ..)"
        ],
        "input_types": [
          "PublishPythonPackageRequest",
          "TwineSubsystem",
          "GlobalOptions"
        ],
        "name": "pants.backend.python.goals.publish.twine_upload",
        "output_desc": "Collection of what processes to run for all built packages.\n\nThis is returned from implementing rules in response to a PublishRequest.\n\nDepending on the capabilities of the publishing tool, the work may be partitioned based on\nnumber of artifacts and/or repositories to publish to.",
        "output_type": "PublishProcesses",
        "provider": "pants.backend.experimental.python"
      }
    ],
    "PublishSubsystem": [
      {
        "description": null,
        "help": "Publish deliverables (assets, distributions, images, etc).",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_publish",
        "output_desc": null,
        "output_type": "PublishSubsystem",
        "provider": "pants.core"
      }
    ],
    "PutativeTargets": [
      {
        "description": "Determine candidate Protobuf targets to create",
        "help": null,
        "input_gets": [
          "Get(Paths, PathGlobs, ..)"
        ],
        "input_types": [
          "PutativeProtobufTargetsRequest",
          "AllOwnedSources"
        ],
        "name": "pants.backend.codegen.protobuf.tailor.find_putative_targets",
        "output_desc": null,
        "output_type": "PutativeTargets",
        "provider": "pants.backend.codegen.protobuf.python"
      },
      {
        "description": "Determine candidate Thrift targets to create",
        "help": null,
        "input_gets": [
          "Get(Paths, PathGlobs, ..)"
        ],
        "input_types": [
          "PutativeThriftTargetsRequest",
          "AllOwnedSources"
        ],
        "name": "pants.backend.codegen.thrift.tailor.find_putative_thrift_targets",
        "output_desc": null,
        "output_type": "PutativeTargets",
        "provider": "pants.backend.codegen.thrift.apache.python"
      },
      {
        "description": "Determine candidate Docker targets to create",
        "help": null,
        "input_gets": [
          "Get(Paths, PathGlobs, ..)"
        ],
        "input_types": [
          "PutativeDockerTargetsRequest",
          "AllOwnedSources"
        ],
        "name": "pants.backend.docker.goals.tailor.find_putative_targets",
        "output_desc": null,
        "output_type": "PutativeTargets",
        "provider": "pants.backend.docker"
      },
      {
        "description": "Determine candidate Go targets to create",
        "help": null,
        "input_gets": [
          "Get(Paths, PathGlobs, ..)",
          "Get(DigestContents, PathGlobs, ..)",
          "Get(UnexpandedTargets, AddressSpecs, ..)",
          "Get(GoBinaryMainPackage, GoBinaryMainPackageRequest, ..)"
        ],
        "input_types": [
          "PutativeGoTargetsRequest",
          "AllOwnedSources"
        ],
        "name": "pants.backend.go.goals.tailor.find_putative_go_targets",
        "output_desc": null,
        "output_type": "PutativeTargets",
        "provider": "pants.backend.experimental.go"
      },
      {
        "description": "Determine candidate Helm chart targets to create",
        "help": null,
        "input_gets": [
          "Get(Paths, PathGlobs, ..)"
        ],
        "input_types": [
          "PutativeHelmChartTargetsRequest",
          "AllOwnedSources"
        ],
        "name": "pants.backend.helm.goals.tailor.find_putative_helm_targets",
        "output_desc": null,
        "output_type": "PutativeTargets",
        "provider": "pants.backend.experimental.helm"
      },
      {
        "description": "Determine candidate Java targets to create",
        "help": null,
        "input_gets": [
          "Get(Paths, PathGlobs, ..)"
        ],
        "input_types": [
          "PutativeJavaTargetsRequest",
          "AllOwnedSources"
        ],
        "name": "pants.backend.java.goals.tailor.find_putative_targets",
        "output_desc": null,
        "output_type": "PutativeTargets",
        "provider": "pants.backend.experimental.java"
      },
      {
        "description": "Determine candidate Kotlin targets to create",
        "help": null,
        "input_gets": [
          "Get(Paths, PathGlobs, ..)"
        ],
        "input_types": [
          "PutativeKotlinTargetsRequest",
          "AllOwnedSources"
        ],
        "name": "pants.backend.kotlin.goals.tailor.find_putative_targets",
        "output_desc": null,
        "output_type": "PutativeTargets",
        "provider": "pants.backend.experimental.kotlin"
      },
      {
        "description": "Determine candidate Scala targets to create",
        "help": null,
        "input_gets": [
          "Get(Paths, PathGlobs, ..)"
        ],
        "input_types": [
          "PutativeScalaTargetsRequest",
          "AllOwnedSources"
        ],
        "name": "pants.backend.scala.goals.tailor.find_putative_targets",
        "output_desc": null,
        "output_type": "PutativeTargets",
        "provider": "pants.backend.experimental.scala"
      },
      {
        "description": "Determine candidate Terraform targets to create",
        "help": null,
        "input_gets": [
          "Get(Paths, PathGlobs, ..)"
        ],
        "input_types": [
          "PutativeTerraformTargetsRequest",
          "AllOwnedSources"
        ],
        "name": "pants.backend.terraform.goals.tailor.find_putative_terrform_module_targets",
        "output_desc": null,
        "output_type": "PutativeTargets",
        "provider": "pants.backend.experimental.terraform"
      },
      {
        "description": "Determine candidate Python targets to create",
        "help": null,
        "input_gets": [
          "Get(Paths, PathGlobs, ..)",
          "Get(DigestContents, PathGlobs, ..)",
          "Get(SourceRootsResult, SourceRootsRequest, ..)",
          "Get(UnexpandedTargets, AddressSpecs, ..)",
          "Get(ResolvedPexEntryPoint, ResolvePexEntryPointRequest, ..)"
        ],
        "input_types": [
          "PutativePythonTargetsRequest",
          "AllOwnedSources",
          "PythonSetup"
        ],
        "name": "pants.backend.python.goals.tailor.find_putative_targets",
        "output_desc": null,
        "output_type": "PutativeTargets",
        "provider": "pants.backend.python"
      },
      {
        "description": "Determine candidate shell targets to create",
        "help": null,
        "input_gets": [
          "Get(Paths, PathGlobs, ..)"
        ],
        "input_types": [
          "PutativeShellTargetsRequest",
          "AllOwnedSources"
        ],
        "name": "pants.backend.shell.tailor.find_putative_targets",
        "output_desc": null,
        "output_type": "PutativeTargets",
        "provider": "pants.backend.shell"
      }
    ],
    "PyConstraintsGoal": [
      {
        "description": "`py-constraints` goal",
        "help": null,
        "input_gets": [
          "Get(AllTargets, AllTargetsRequest, ..)",
          "Get(TransitiveTargets, TransitiveTargetsRequest, ..)",
          "Get(Dependees, DependeesRequest, ..)"
        ],
        "input_types": [
          "Addresses",
          "Console",
          "PyConstraintsSubsystem",
          "PythonSetup",
          "RegisteredTargetTypes",
          "UnionMembership"
        ],
        "name": "pants.backend.python.mixed_interpreter_constraints.py_constraints.py_constraints",
        "output_desc": null,
        "output_type": "PyConstraintsGoal",
        "provider": "pants.backend.python.mixed_interpreter_constraints"
      }
    ],
    "PyConstraintsSubsystem": [
      {
        "description": null,
        "help": "Determine what Python interpreter constraints are used by files/targets.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_py_constraints",
        "output_desc": null,
        "output_type": "PyConstraintsSubsystem",
        "provider": "pants.backend.python.mixed_interpreter_constraints"
      }
    ],
    "PyOxidizer": [
      {
        "description": null,
        "help": "The PyOxidizer utility for packaging Python code in a Rust binary (https://pyoxidizer.readthedocs.io/en/stable/pyoxidizer.html).\n\nUsed with the `pyoxidizer_binary` target.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_pyoxidizer",
        "output_desc": null,
        "output_type": "PyOxidizer",
        "provider": "pants.backend.experimental.python.packaging.pyoxidizer"
      }
    ],
    "PyTest": [
      {
        "description": null,
        "help": "The pytest Python test framework (https://docs.pytest.org/).",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_pytest",
        "output_desc": null,
        "output_type": "PyTest",
        "provider": "pants.backend.python"
      }
    ],
    "PyUpgrade": [
      {
        "description": null,
        "help": "Upgrade syntax for newer versions of the language (https://github.com/asottile/pyupgrade).",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_pyupgrade",
        "output_desc": null,
        "output_type": "PyUpgrade",
        "provider": "pants.backend.experimental.python.lint.pyupgrade"
      }
    ],
    "Pylint": [
      {
        "description": null,
        "help": "The Pylint linter for Python code (https://www.pylint.org/).",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_pylint",
        "output_desc": null,
        "output_type": "Pylint",
        "provider": "pants.backend.python.lint.pylint"
      }
    ],
    "PylintFirstPartyPlugins": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Addresses, UnparsedAddressInputs, ..)",
          "Get(TransitiveTargets, TransitiveTargetsRequest, ..)",
          "Get(StrippedPythonSourceFiles, PythonSourceFilesRequest, ..)",
          "Get(Digest, AddPrefix, ..)"
        ],
        "input_types": [
          "Pylint"
        ],
        "name": "pants.backend.python.lint.pylint.subsystem.pylint_first_party_plugins",
        "output_desc": "PylintFirstPartyPlugins(requirement_strings: 'FrozenOrderedSet[str]', interpreter_constraints_fields: 'FrozenOrderedSet[InterpreterConstraintsField]', sources_digest: 'Digest')",
        "output_type": "PylintFirstPartyPlugins",
        "provider": "pants.backend.python.lint.pylint"
      }
    ],
    "PylintPartitions": [
      {
        "description": "Determine if necessary to partition Pylint input",
        "help": null,
        "input_gets": [
          "Get(CoarsenedTargets, CoarsenedTargetsRequest, ..)"
        ],
        "input_types": [
          "PylintRequest",
          "PythonSetup",
          "PylintFirstPartyPlugins"
        ],
        "name": "pants.backend.python.lint.pylint.rules.pylint_determine_partitions",
        "output_desc": null,
        "output_type": "PylintPartitions",
        "provider": "pants.backend.python.lint.pylint"
      }
    ],
    "PyoxidizerRunnerScript": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Digest, CreateDigest, ..)"
        ],
        "input_types": [],
        "name": "pants.backend.python.packaging.pyoxidizer.rules.create_pyoxidizer_runner_script",
        "output_desc": "PyoxidizerRunnerScript(digest: 'Digest', path: 'str')",
        "output_type": "PyoxidizerRunnerScript",
        "provider": "pants.backend.experimental.python.packaging.pyoxidizer"
      }
    ],
    "PytestPluginSetup": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(BuiltPackageDependencies, BuildPackageDependenciesRequest, ..)",
          "Get(Digest, MergeDigests, ..)"
        ],
        "input_types": [
          "RuntimePackagesPluginRequest"
        ],
        "name": "pants.backend.python.goals.pytest_runner.setup_runtime_packages",
        "output_desc": "The result of custom set up logic before Pytest runs.\n\nPlease reach out it if you would like certain functionality, such as allowing your plugin to set\nenvironment variables.",
        "output_type": "PytestPluginSetup",
        "provider": "pants.backend.python"
      }
    ],
    "PythonBinary": [
      {
        "description": "Finding a `python` binary",
        "help": null,
        "input_gets": [
          "Get(BinaryPaths, BinaryPathRequest, ..)"
        ],
        "input_types": [
          "PythonBootstrap"
        ],
        "name": "pants.core.util_rules.system_binaries.find_python",
        "output_desc": "A Python3 interpreter for use by `@rule` code as an alternative to BashBinary scripts.\n\nPython is usable for `@rule` scripting independently of `pants.backend.python`, but currently\nthirdparty dependencies are not supported, because PEX lives in that backend.\n\nTODO: Consider extracting PEX out into the core in order to support thirdparty dependencies.",
        "output_type": "PythonBinary",
        "provider": "pants.core"
      }
    ],
    "PythonBootstrap": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Environment, EnvironmentRequest, ..)"
        ],
        "input_types": [
          "PythonBootstrapSubsystem"
        ],
        "name": "pants.core.subsystems.python_bootstrap.python_bootstrap",
        "output_desc": "PythonBootstrap(environment: 'Environment', options: 'OptionValueContainer')",
        "output_type": "PythonBootstrap",
        "provider": "pants.core"
      }
    ],
    "PythonBootstrapSubsystem": [
      {
        "description": null,
        "help": "Options used to locate Python interpreters used by all Pants backends.\n\nThis subsystem controls where and how Pants will locate Python, but beyond that it does not control which Python interpreter versions are actually used for your code: see the `python` subsystem for that.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_python_bootstrap",
        "output_desc": null,
        "output_type": "PythonBootstrapSubsystem",
        "provider": "pants.core"
      }
    ],
    "PythonExecutable": [
      {
        "description": "Find Python interpreter for constraints",
        "help": null,
        "input_gets": [
          "Get(ProcessResult, PexCliProcess, ..)"
        ],
        "input_types": [
          "InterpreterConstraints",
          "PexRuntimeEnvironment"
        ],
        "name": "pants.backend.python.util_rules.pex.find_interpreter",
        "output_desc": "The BinaryPath of a Python executable.",
        "output_type": "PythonExecutable",
        "provider": "pants.core"
      }
    ],
    "PythonInferSubsystem": [
      {
        "description": null,
        "help": "Options controlling which dependencies will be inferred for Python targets.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_python_infer",
        "output_desc": null,
        "output_type": "PythonInferSubsystem",
        "provider": "pants.backend.python"
      }
    ],
    "PythonModuleOwners": [
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "PythonModuleOwnersRequest",
          "FirstPartyPythonModuleMapping",
          "ThirdPartyPythonModuleMapping"
        ],
        "name": "pants.backend.python.dependency_inference.module_mapper.map_module_to_address",
        "output_desc": "The target(s) that own a Python module.\n\nIf >1 targets own the same module, and they're implementations (vs .pyi type stubs), they will\nbe put into `ambiguous` instead of `unambiguous`. `unambiguous` should never be > 2.",
        "output_type": "PythonModuleOwners",
        "provider": "pants.backend.python"
      }
    ],
    "PythonNativeCode": [
      {
        "description": null,
        "help": "Options for building native code using Python, e.g. when resolving distributions.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_python_native_code",
        "output_desc": null,
        "output_type": "PythonNativeCode",
        "provider": "pants.core"
      }
    ],
    "PythonProtobufMypyPlugin": [
      {
        "description": null,
        "help": "Configuration of the mypy-protobuf type stub generation plugin.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_mypy_protobuf",
        "output_desc": null,
        "output_type": "PythonProtobufMypyPlugin",
        "provider": "pants.backend.codegen.protobuf.python"
      }
    ],
    "PythonProtobufSubsystem": [
      {
        "description": null,
        "help": "Options related to the Protobuf Python backend.\n\nSee https://www.pantsbuild.org/v2.12/docs/protobuf-python.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_python_protobuf",
        "output_desc": null,
        "output_type": "PythonProtobufSubsystem",
        "provider": "pants.backend.codegen.protobuf.python"
      }
    ],
    "PythonRepos": [
      {
        "description": null,
        "help": "External Python code repositories, such as PyPI.\n\nThese options may be used to point to custom cheeseshops when resolving requirements.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_python_repos",
        "output_desc": null,
        "output_type": "PythonRepos",
        "provider": "pants.core"
      }
    ],
    "PythonSetup": [
      {
        "description": null,
        "help": "Options for Pants's Python backend.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_python",
        "output_desc": null,
        "output_type": "PythonSetup",
        "provider": "pants.core"
      }
    ],
    "PythonSourceFiles": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(SourceFiles, SourceFilesRequest, ..)",
          "Get(AncestorFiles, AncestorFilesRequest, ..)",
          "Get(Snapshot, MergeDigests, ..)",
          "Get(HydratedSources, HydrateSourcesRequest, ..)",
          "Get(SourceRoot, SourceRootRequest, ..)"
        ],
        "input_types": [
          "PythonSourceFilesRequest",
          "UnionMembership"
        ],
        "name": "pants.backend.python.util_rules.python_sources.prepare_python_sources",
        "output_desc": "Sources that can be introspected by Python, relative to a set of source roots.\n\nSpecifically, this will filter out to only have Python, and, optionally, resource and\nfile targets; and will add any missing `__init__.py` files to ensure that modules are\nrecognized correctly.\n\nUse-cases that introspect Python source code (e.g., the `test, `lint`, `fmt` goals) can\nrequest this type to get relevant sources that are still relative to their source roots.\nThat way the paths they report are the unstripped ones the user is familiar with.\n\nThe sources can also be imported and used by Python (e.g., for the `test` goal), but only\nif sys.path is modified to include the source roots.",
        "output_type": "PythonSourceFiles",
        "provider": "pants.backend.python"
      }
    ],
    "RegexLintSubsystem": [
      {
        "description": null,
        "help": "Lint your code using regex patterns, e.g. to check for copyright headers.\n\nTo activate this with the `lint` goal, you must set `[regex-lint].config`.\n\nUnlike other linters, this can run on files not owned by targets, such as BUILD files. To run on those, use `lint '**'` rather than `lint ::`, for example. Unfortunately, `--changed-since=<sha>` does not yet cause this linter to run. We are exploring how to improve both these gotchas.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_regex_lint",
        "output_desc": null,
        "output_type": "RegexLintSubsystem",
        "provider": "pants.backend.project_info"
      }
    ],
    "RenamedFieldTypes": [
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "RegisteredTargetTypes",
          "UnionMembership"
        ],
        "name": "pants.core.goals.update_build_files.determine_renamed_field_types",
        "output_desc": "Map deprecated field names to their new name, per target.",
        "output_type": "RenamedFieldTypes",
        "provider": "pants.core"
      }
    ],
    "RenamedTargetTypes": [
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "RegisteredTargetTypes"
        ],
        "name": "pants.core.goals.update_build_files.determine_renamed_target_types",
        "output_desc": "Deprecated target type names to new names.",
        "output_type": "RenamedTargetTypes",
        "provider": "pants.core"
      }
    ],
    "RenderedEmbedConfig": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Digest, CreateDigest, ..)"
        ],
        "input_types": [
          "RenderEmbedConfigRequest"
        ],
        "name": "pants.backend.go.util_rules.build_pkg.render_embed_config",
        "output_desc": "RenderedEmbedConfig(digest: 'Digest')",
        "output_type": "RenderedEmbedConfig",
        "provider": "pants.backend.experimental.go"
      }
    ],
    "RenderedWarContent": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Addresses, UnparsedAddressInputs, ..)",
          "Get(Targets, Addresses, ..)",
          "Get(SourceFiles, SourceFilesRequest, ..)",
          "Get(Digest, AddPrefix, ..)"
        ],
        "input_types": [
          "RenderWarContentRequest"
        ],
        "name": "pants.jvm.package.war.render_war_content",
        "output_desc": "RenderedWarContent(digest: Digest)",
        "output_type": "RenderedWarContent",
        "provider": "pants.backend.experimental.java"
      }
    ],
    "RenderedWarDeploymentDescriptor": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(HydratedSources, HydrateSourcesRequest, ..)",
          "Get(DigestEntries, Digest, ..)",
          "Get(Digest, CreateDigest, ..)"
        ],
        "input_types": [
          "RenderWarDeploymentDescriptorRequest"
        ],
        "name": "pants.jvm.package.war.render_war_deployment_descriptor",
        "output_desc": "RenderedWarDeploymentDescriptor(digest: Digest)",
        "output_type": "RenderedWarDeploymentDescriptor",
        "provider": "pants.backend.experimental.java"
      }
    ],
    "Repl": [
      {
        "description": "`repl` goal",
        "help": null,
        "input_gets": [
          "Get(ReplRequest, ReplImplementation, ..)",
          "Effect(InteractiveProcessResult, InteractiveProcess, ..)"
        ],
        "input_types": [
          "Console",
          "Workspace",
          "ReplSubsystem",
          "FilteredTargets",
          "BuildRoot",
          "UnionMembership",
          "GlobalOptions",
          "CompleteEnvironment"
        ],
        "name": "pants.core.goals.repl.run_repl",
        "output_desc": null,
        "output_type": "Repl",
        "provider": "pants.core"
      }
    ],
    "ReplRequest": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Classpath, Addresses, ..)",
          "Get(CoarsenedTargets, Addresses, ..)",
          "Get(JdkEnvironment, JdkRequest, ..)",
          "Get(ToolClasspath, ToolClasspathRequest, ..)",
          "Get(Digest, AddPrefix, ..)",
          "Get(Digest, MergeDigests, ..)"
        ],
        "input_types": [
          "ScalaRepl",
          "BashBinary",
          "ScalaSubsystem"
        ],
        "name": "pants.backend.scala.goals.repl.create_scala_repl_request",
        "output_desc": "ReplRequest(*, digest: 'Digest', args: 'Iterable[str]', extra_env: 'Optional[Mapping[str, str]]' = None, append_only_caches: 'Mapping[str, str] | None' = None, run_in_workspace: 'bool' = True) -> 'None'",
        "output_type": "ReplRequest",
        "provider": "pants.backend.experimental.scala"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(InterpreterConstraints, InterpreterConstraintsRequest, ..)",
          "Get(TransitiveTargets, TransitiveTargetsRequest, ..)",
          "Get(Pex, RequirementsPexRequest, ..)",
          "Get(LocalDistsPex, LocalDistsPexRequest, ..)",
          "Get(PythonSourceFiles, PythonSourceFilesRequest, ..)",
          "Get(Digest, MergeDigests, ..)"
        ],
        "input_types": [
          "PythonRepl",
          "PexEnvironment",
          "PythonSetup"
        ],
        "name": "pants.backend.python.goals.repl.create_python_repl_request",
        "output_desc": "ReplRequest(*, digest: 'Digest', args: 'Iterable[str]', extra_env: 'Optional[Mapping[str, str]]' = None, append_only_caches: 'Mapping[str, str] | None' = None, run_in_workspace: 'bool' = True) -> 'None'",
        "output_type": "ReplRequest",
        "provider": "pants.backend.python"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(InterpreterConstraints, InterpreterConstraintsRequest, ..)",
          "Get(TransitiveTargets, TransitiveTargetsRequest, ..)",
          "Get(Pex, RequirementsPexRequest, ..)",
          "Get(PythonSourceFiles, PythonSourceFilesRequest, ..)",
          "Get(Pex, PexRequest, ..)",
          "Get(LocalDistsPex, LocalDistsPexRequest, ..)",
          "Get(Digest, MergeDigests, ..)"
        ],
        "input_types": [
          "IPythonRepl",
          "IPython",
          "PexEnvironment",
          "PythonSetup"
        ],
        "name": "pants.backend.python.goals.repl.create_ipython_repl_request",
        "output_desc": "ReplRequest(*, digest: 'Digest', args: 'Iterable[str]', extra_env: 'Optional[Mapping[str, str]]' = None, append_only_caches: 'Mapping[str, str] | None' = None, run_in_workspace: 'bool' = True) -> 'None'",
        "output_type": "ReplRequest",
        "provider": "pants.backend.python"
      }
    ],
    "ReplSubsystem": [
      {
        "description": null,
        "help": "Open a REPL with the specified code loadable.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_repl",
        "output_desc": null,
        "output_type": "ReplSubsystem",
        "provider": "pants.core"
      }
    ],
    "ResolveOneDependencyModuleResult": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Targets, BuildTargetIdentifier, ..)",
          "Get(BSPDependencyModulesResult, BSPDependencyModulesRequest, ..)",
          "Get(Digest, MergeDigests, ..)"
        ],
        "input_types": [
          "ResolveOneDependencyModuleRequest",
          "UnionMembership"
        ],
        "name": "pants.bsp.util_rules.targets.resolve_one_dependency_module",
        "output_desc": "ResolveOneDependencyModuleResult(bsp_target_id: 'BuildTargetIdentifier', modules: 'tuple[DependencyModule, ...]' = (), digest: 'Digest' = Digest('e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855', 0))",
        "output_type": "ResolveOneDependencyModuleResult",
        "provider": "pants.core"
      }
    ],
    "ResolvedClasspathEntries": [
      {
        "description": null,
        "help": "Fetch every artifact in a lockfile.",
        "input_gets": [
          "Get(ClasspathEntry, CoursierLockfileEntry, ..)"
        ],
        "input_types": [
          "CoursierResolvedLockfile"
        ],
        "name": "pants.jvm.resolve.coursier_fetch.coursier_fetch_lockfile",
        "output_desc": "A collection of resolved classpath entries.",
        "output_type": "ResolvedClasspathEntries",
        "provider": "pants.backend.experimental.java"
      }
    ],
    "ResolvedHelmArtifact": [
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "HelmArtifact",
          "HelmSubsystem"
        ],
        "name": "pants.backend.helm.resolve.artifacts.resolved_helm_artifact",
        "output_desc": "ResolvedHelmArtifact(requirement: 'HelmArtifactRequirement', address: 'Address', location_url: 'str')",
        "output_type": "ResolvedHelmArtifact",
        "provider": "pants.backend.experimental.helm"
      }
    ],
    "ResolvedPexEntryPoint": [
      {
        "description": "Determining the entry point for a `pex_binary` target",
        "help": null,
        "input_gets": [
          "Get(Paths, PathGlobs, ..)",
          "Get(SourceRoot, SourceRootRequest, ..)"
        ],
        "input_types": [
          "ResolvePexEntryPointRequest"
        ],
        "name": "pants.backend.python.target_types_rules.resolve_pex_entry_point",
        "output_desc": "ResolvedPexEntryPoint(val: 'EntryPoint | None', file_name_used: 'bool')",
        "output_type": "ResolvedPexEntryPoint",
        "provider": "pants.backend.python"
      }
    ],
    "ResolvedPythonAwsHandler": [
      {
        "description": "Determining the handler for a `python_awslambda` target",
        "help": null,
        "input_gets": [
          "Get(Paths, PathGlobs, ..)",
          "Get(SourceRoot, SourceRootRequest, ..)"
        ],
        "input_types": [
          "ResolvePythonAwsHandlerRequest"
        ],
        "name": "pants.backend.awslambda.python.target_types.resolve_python_aws_handler",
        "output_desc": "ResolvedPythonAwsHandler(val: str, file_name_used: bool)",
        "output_type": "ResolvedPythonAwsHandler",
        "provider": "pants.backend.awslambda.python"
      }
    ],
    "ResolvedPythonDistributionEntryPoints": [
      {
        "description": "Determining the entry points for a `python_distribution` target",
        "help": null,
        "input_gets": [
          "Get(Addresses, UnparsedAddressInputs, ..)",
          "Get(Targets, Addresses, ..)",
          "Get(ResolvedPexEntryPoint, ResolvePexEntryPointRequest, ..)"
        ],
        "input_types": [
          "ResolvePythonDistributionEntryPointsRequest"
        ],
        "name": "pants.backend.python.target_types_rules.resolve_python_distribution_entry_points",
        "output_desc": "ResolvedPythonDistributionEntryPoints(val: 'FrozenDict[str, FrozenDict[str, PythonDistributionEntryPoint]]' = FrozenDict({}))",
        "output_type": "ResolvedPythonDistributionEntryPoints",
        "provider": "pants.backend.python"
      }
    ],
    "ResolvedPythonGoogleHandler": [
      {
        "description": "Determining the handler for a `python_google_cloud_function` target",
        "help": null,
        "input_gets": [
          "Get(Paths, PathGlobs, ..)",
          "Get(SourceRoot, SourceRootRequest, ..)"
        ],
        "input_types": [
          "ResolvePythonGoogleHandlerRequest"
        ],
        "name": "pants.backend.google_cloud_function.python.target_types.resolve_python_google_cloud_function_handler",
        "output_desc": "ResolvedPythonGoogleHandler(val: str, file_name_used: bool)",
        "output_type": "ResolvedPythonGoogleHandler",
        "provider": "pants.backend.google_cloud_function.python"
      }
    ],
    "RewrittenBuildFile": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(VenvPex, PexRequest, ..)",
          "Get(Digest, CreateDigest, ..)",
          "Get(ConfigFiles, ConfigFilesRequest, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(ProcessResult, VenvPexProcess, ..)",
          "Get(DigestContents, Digest, ..)"
        ],
        "input_types": [
          "FormatWithYapfRequest",
          "Yapf"
        ],
        "name": "pants.core.goals.update_build_files.format_build_file_with_yapf",
        "output_desc": "RewrittenBuildFile(path: 'str', lines: 'tuple[str, ...]', change_descriptions: 'tuple[str, ...]')",
        "output_type": "RewrittenBuildFile",
        "provider": "pants.core"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(VenvPex, PexRequest, ..)",
          "Get(Digest, CreateDigest, ..)",
          "Get(ConfigFiles, ConfigFilesRequest, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(ProcessResult, VenvPexProcess, ..)",
          "Get(DigestContents, Digest, ..)"
        ],
        "input_types": [
          "FormatWithBlackRequest",
          "Black"
        ],
        "name": "pants.core.goals.update_build_files.format_build_file_with_black",
        "output_desc": "RewrittenBuildFile(path: 'str', lines: 'tuple[str, ...]', change_descriptions: 'tuple[str, ...]')",
        "output_type": "RewrittenBuildFile",
        "provider": "pants.core"
      },
      {
        "description": "Check for deprecated target type names",
        "help": null,
        "input_gets": [],
        "input_types": [
          "RenameDeprecatedTargetsRequest",
          "RenamedTargetTypes"
        ],
        "name": "pants.core.goals.update_build_files.maybe_rename_deprecated_targets",
        "output_desc": "RewrittenBuildFile(path: 'str', lines: 'tuple[str, ...]', change_descriptions: 'tuple[str, ...]')",
        "output_type": "RewrittenBuildFile",
        "provider": "pants.core"
      },
      {
        "description": "Check for deprecated field type names",
        "help": null,
        "input_gets": [],
        "input_types": [
          "RenameDeprecatedFieldsRequest",
          "RenamedFieldTypes"
        ],
        "name": "pants.core.goals.update_build_files.maybe_rename_deprecated_fields",
        "output_desc": "RewrittenBuildFile(path: 'str', lines: 'tuple[str, ...]', change_descriptions: 'tuple[str, ...]')",
        "output_type": "RewrittenBuildFile",
        "provider": "pants.core"
      }
    ],
    "Roots": [
      {
        "description": "`roots` goal",
        "help": null,
        "input_gets": [],
        "input_types": [
          "Console",
          "RootsSubsystem",
          "AllSourceRoots"
        ],
        "name": "pants.backend.project_info.list_roots.list_roots",
        "output_desc": null,
        "output_type": "Roots",
        "provider": "pants.backend.project_info"
      }
    ],
    "RootsSubsystem": [
      {
        "description": null,
        "help": "List the repo's registered source roots.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_roots",
        "output_desc": null,
        "output_type": "RootsSubsystem",
        "provider": "pants.backend.project_info"
      }
    ],
    "Run": [
      {
        "description": "`run` goal",
        "help": null,
        "input_gets": [
          "Get(TargetRootsToFieldSets, TargetRootsToFieldSetsRequest, ..)",
          "Get(RunRequest, RunFieldSet, ..)",
          "Get(WrappedTarget, Address, ..)",
          "Effect(InteractiveProcessResult, InteractiveProcess, ..)"
        ],
        "input_types": [
          "RunSubsystem",
          "GlobalOptions",
          "Workspace",
          "BuildRoot",
          "CompleteEnvironment"
        ],
        "name": "pants.core.goals.run.run",
        "output_desc": null,
        "output_type": "Run",
        "provider": "pants.core"
      }
    ],
    "RunRequest": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Environment, EnvironmentRequest, ..)",
          "Get(BuiltPackage, PackageFieldSet, ..)"
        ],
        "input_types": [
          "DockerFieldSet",
          "DockerBinary",
          "DockerOptions"
        ],
        "name": "pants.backend.docker.goals.run_image.docker_image_run_request",
        "output_desc": "RunRequest(*, digest: Digest, args: Iterable[str], extra_env: Optional[Mapping[str, str]] = None)",
        "output_type": "RunRequest",
        "provider": "pants.backend.docker"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(BuiltPackage, PackageFieldSet, ..)"
        ],
        "input_types": [
          "GoBinaryFieldSet"
        ],
        "name": "pants.backend.go.goals.run_binary.create_go_binary_run_request",
        "output_desc": "RunRequest(*, digest: Digest, args: Iterable[str], extra_env: Optional[Mapping[str, str]] = None)",
        "output_type": "RunRequest",
        "provider": "pants.backend.experimental.go"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(JdkEnvironment, JdkRequest, ..)",
          "Get(BuiltPackage, DeployJarFieldSet, ..)",
          "Get(Process, JvmProcess, ..)",
          "Get(Digest, AddPrefix, ..)",
          "Get(__RuntimeJvm, JdkEnvironment, ..)",
          "Get(Digest, MergeDigests, ..)"
        ],
        "input_types": [
          "DeployJarFieldSet"
        ],
        "name": "pants.jvm.run_deploy_jar.create_deploy_jar_run_request",
        "output_desc": "RunRequest(*, digest: Digest, args: Iterable[str], extra_env: Optional[Mapping[str, str]] = None)",
        "output_type": "RunRequest",
        "provider": "pants.backend.experimental.java"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(BuiltPackage, PackageFieldSet, ..)"
        ],
        "input_types": [
          "PyOxidizerFieldSet"
        ],
        "name": "pants.backend.python.packaging.pyoxidizer.rules.run_pyoxidizer_binary",
        "output_desc": "RunRequest(*, digest: Digest, args: Iterable[str], extra_env: Optional[Mapping[str, str]] = None)",
        "output_type": "RunRequest",
        "provider": "pants.backend.experimental.python.packaging.pyoxidizer"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(ResolvedPexEntryPoint, ResolvePexEntryPointRequest, ..)",
          "Get(TransitiveTargets, TransitiveTargetsRequest, ..)",
          "Get(InterpreterConstraints, InterpreterConstraintsRequest, ..)",
          "Get(Pex, PexFromTargetsRequest, ..)",
          "Get(PythonSourceFiles, PythonSourceFilesRequest, ..)",
          "Get(LocalDistsPex, LocalDistsPexRequest, ..)",
          "Get(Digest, MergeDigests, ..)"
        ],
        "input_types": [
          "PexBinaryFieldSet",
          "PexBinaryDefaults",
          "PexEnvironment"
        ],
        "name": "pants.backend.python.goals.run_pex_binary.create_pex_binary_run_request",
        "output_desc": "RunRequest(*, digest: Digest, args: Iterable[str], extra_env: Optional[Mapping[str, str]] = None)",
        "output_type": "RunRequest",
        "provider": "pants.backend.python"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(WrappedTarget, Address, ..)",
          "Get(Process, ShellCommandProcessRequest, ..)"
        ],
        "input_types": [
          "RunShellCommand"
        ],
        "name": "pants.backend.shell.shell_command.run_shell_command_request",
        "output_desc": "RunRequest(*, digest: Digest, args: Iterable[str], extra_env: Optional[Mapping[str, str]] = None)",
        "output_type": "RunRequest",
        "provider": "pants.backend.shell"
      }
    ],
    "RunSubsystem": [
      {
        "description": null,
        "help": "Runs a binary target.\n\nThis goal propagates the return code of the underlying executable.\n\nIf your application can safely be restarted while it is running, you can pass `restartable=True` on your binary target (for supported types), and the `run` goal will automatically restart them as all relevant files change. This can be particularly useful for server applications.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_run",
        "output_desc": null,
        "output_type": "RunSubsystem",
        "provider": "pants.core"
      }
    ],
    "ScalaInferSubsystem": [
      {
        "description": null,
        "help": "Options controlling which dependencies will be inferred for Scala targets.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_scala_infer",
        "output_desc": null,
        "output_type": "ScalaInferSubsystem",
        "provider": "pants.backend.experimental.scala"
      }
    ],
    "ScalaMainClassesResult": [
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "ScalaMainClassesParams"
        ],
        "name": "pants.backend.scala.bsp.rules.bsp_scala_main_classes_request",
        "output_desc": "ScalaMainClassesResult(items: 'tuple[ScalaMainClassesItem, ...]', origin_id: 'str | None' = None)",
        "output_type": "ScalaMainClassesResult",
        "provider": "pants.backend.experimental.scala"
      }
    ],
    "ScalaPBRuntimeForResolve": [
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "ScalaPBRuntimeForResolveRequest",
          "AllJvmArtifactTargets",
          "JvmSubsystem",
          "ScalaSubsystem",
          "ScalaPBSubsystem"
        ],
        "name": "pants.backend.codegen.protobuf.scala.dependency_inference.resolve_scalapb_runtime_for_resolve",
        "output_desc": "ScalaPBRuntimeForResolve(addresses: 'frozenset[Address]')",
        "output_type": "ScalaPBRuntimeForResolve",
        "provider": "pants.backend.experimental.codegen.protobuf.scala"
      }
    ],
    "ScalaPBShimCompiledClassfiles": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(GenerateJvmLockfileFromTool, ScalapbcToolLockfileSentinel, ..)",
          "Get(ToolClasspath, ToolClasspathRequest, ..)",
          "Get(Digest, CreateDigest, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(ProcessResult, JvmProcess, ..)",
          "Get(Digest, RemovePrefix, ..)"
        ],
        "input_types": [
          "ScalaPBSubsystem",
          "InternalJdk"
        ],
        "name": "pants.backend.codegen.protobuf.scala.rules.setup_scalapb_shim_classfiles",
        "output_desc": null,
        "output_type": "ScalaPBShimCompiledClassfiles",
        "provider": "pants.backend.experimental.codegen.protobuf.scala"
      }
    ],
    "ScalaPBSubsystem": [
      {
        "description": null,
        "help": "The ScalaPB protocol buffer compiler (https://scalapb.github.io/).",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_scalapb",
        "output_desc": null,
        "output_type": "ScalaPBSubsystem",
        "provider": "pants.backend.experimental.codegen.protobuf.scala"
      }
    ],
    "ScalaParserCompiledClassfiles": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(GenerateJvmLockfileFromTool, ScalaParserToolLockfileSentinel, ..)",
          "Get(ToolClasspath, ToolClasspathRequest, ..)",
          "Get(Digest, CreateDigest, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(ProcessResult, JvmProcess, ..)",
          "Get(Digest, RemovePrefix, ..)"
        ],
        "input_types": [
          "InternalJdk"
        ],
        "name": "pants.backend.scala.dependency_inference.scala_parser.setup_scala_parser_classfiles",
        "output_desc": null,
        "output_type": "ScalaParserCompiledClassfiles",
        "provider": "pants.backend.experimental.scala"
      }
    ],
    "ScalaPluginTargetsForTarget": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Address, AddressInput, ..)",
          "Get(Targets, Addresses, ..)"
        ],
        "input_types": [
          "ScalaPluginsForTargetRequest",
          "AllScalaPluginTargets",
          "JvmSubsystem",
          "Scalac"
        ],
        "name": "pants.backend.scala.compile.scalac_plugins.resolve_scala_plugins_for_target",
        "output_desc": "ScalaPluginTargetsForTarget(plugins: 'Targets', artifacts: 'Targets')",
        "output_type": "ScalaPluginTargetsForTarget",
        "provider": "pants.backend.experimental.scala"
      }
    ],
    "ScalaPlugins": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(CoarsenedTargets, Addresses, ..)",
          "Get(FallibleClasspathEntry, CoursierFetchRequest, ..)",
          "Get(Digest, MergeDigests, ..)"
        ],
        "input_types": [
          "ScalaPluginsRequest"
        ],
        "name": "pants.backend.scala.compile.scalac_plugins.fetch_plugins",
        "output_desc": "ScalaPlugins(names: 'tuple[str, ...]', classpath: 'ClasspathEntry')",
        "output_type": "ScalaPlugins",
        "provider": "pants.backend.experimental.scala"
      }
    ],
    "ScalaPluginsForTargetRequest": [
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "ScalaPluginsForTargetWithoutResolveRequest",
          "JvmSubsystem"
        ],
        "name": "pants.backend.scala.compile.scalac_plugins.add_resolve_name_to_plugin_request",
        "output_desc": "ScalaPluginsForTargetRequest(target: 'Target', resolve_name: 'str')",
        "output_type": "ScalaPluginsForTargetRequest",
        "provider": "pants.backend.experimental.scala"
      }
    ],
    "ScalaRuntimeForResolve": [
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "ScalaRuntimeForResolveRequest",
          "AllJvmArtifactTargets",
          "JvmSubsystem",
          "ScalaSubsystem"
        ],
        "name": "pants.backend.scala.dependency_inference.rules.resolve_scala_library_for_resolve",
        "output_desc": "ScalaRuntimeForResolve(addresses: 'frozenset[Address]')",
        "output_type": "ScalaRuntimeForResolve",
        "provider": "pants.backend.experimental.scala"
      }
    ],
    "ScalaSourceDependencyAnalysis": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(DigestContents, Digest, ..)"
        ],
        "input_types": [
          "FallibleScalaSourceDependencyAnalysisResult",
          "ProcessCleanupOption"
        ],
        "name": "pants.backend.scala.dependency_inference.scala_parser.resolve_fallible_result_to_analysis",
        "output_desc": "ScalaSourceDependencyAnalysis(provided_symbols: 'FrozenOrderedSet[str]', provided_symbols_encoded: 'FrozenOrderedSet[str]', imports_by_scope: 'FrozenDict[str, tuple[ScalaImport, ...]]', consumed_symbols_by_scope: 'FrozenDict[str, FrozenOrderedSet[str]]', scopes: 'FrozenOrderedSet[str]')",
        "output_type": "ScalaSourceDependencyAnalysis",
        "provider": "pants.backend.experimental.scala"
      }
    ],
    "ScalaSubsystem": [
      {
        "description": null,
        "help": "Scala programming language",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_scala",
        "output_desc": null,
        "output_type": "ScalaSubsystem",
        "provider": "pants.backend.experimental.scala"
      }
    ],
    "ScalaTestClassesResult": [
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "ScalaTestClassesParams"
        ],
        "name": "pants.backend.scala.bsp.rules.bsp_scala_test_classes_request",
        "output_desc": "ScalaTestClassesResult(items: 'tuple[ScalaTestClassesItem, ...]', origin_id: 'str | None' = None)",
        "output_type": "ScalaTestClassesResult",
        "provider": "pants.backend.experimental.scala"
      }
    ],
    "Scalac": [
      {
        "description": null,
        "help": "The Scala compiler.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_scalac",
        "output_desc": null,
        "output_type": "Scalac",
        "provider": "pants.backend.experimental.scala"
      }
    ],
    "ScalacOptionsResult": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(HandleScalacOptionsResult, HandleScalacOptionsRequest, ..)"
        ],
        "input_types": [
          "ScalacOptionsParams"
        ],
        "name": "pants.backend.scala.bsp.rules.bsp_scalac_options_request",
        "output_desc": "ScalacOptionsResult(items: 'tuple[ScalacOptionsItem, ...]')",
        "output_type": "ScalacOptionsResult",
        "provider": "pants.backend.experimental.scala"
      }
    ],
    "ScalafmtConfigFiles": [
      {
        "description": null,
        "help": "Gather scalafmt config files and identify which config files to use for each source\ndirectory.",
        "input_gets": [
          "Get(Snapshot, PathGlobs, ..)"
        ],
        "input_types": [
          "GatherScalafmtConfigFilesRequest"
        ],
        "name": "pants.backend.scala.lint.scalafmt.rules.gather_scalafmt_config_files",
        "output_desc": "ScalafmtConfigFiles(snapshot: 'Snapshot', source_dir_to_config_file: 'FrozenDict[str, str]')",
        "output_type": "ScalafmtConfigFiles",
        "provider": "pants.backend.experimental.scala.lint.scalafmt"
      }
    ],
    "ScalafmtSubsystem": [
      {
        "description": null,
        "help": "scalafmt (https://scalameta.org/scalafmt/)",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_scalafmt",
        "output_desc": null,
        "output_type": "ScalafmtSubsystem",
        "provider": "pants.backend.experimental.scala.lint.scalafmt"
      }
    ],
    "Scalatest": [
      {
        "description": null,
        "help": "The Scalatest test framework (https://www.scalatest.org/)",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_scalatest",
        "output_desc": null,
        "output_type": "Scalatest",
        "provider": "pants.backend.experimental.scala"
      }
    ],
    "Setup": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(GenerateJvmLockfileFromTool, ScalafmtToolLockfileSentinel, ..)",
          "Get(ToolClasspath, ToolClasspathRequest, ..)",
          "Get(ScalafmtConfigFiles, GatherScalafmtConfigFilesRequest, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(Partition, SetupScalafmtPartition, ..)"
        ],
        "input_types": [
          "ScalafmtRequest"
        ],
        "name": "pants.backend.scala.lint.scalafmt.rules.setup_scalafmt",
        "output_desc": "Setup(partitions: 'tuple[Partition, ...]', original_snapshot: 'Snapshot')",
        "output_type": "Setup",
        "provider": "pants.backend.experimental.scala.lint.scalafmt"
      }
    ],
    "SetupKwargs": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(SetupKwargs, SetupKwargsRequest, ..)"
        ],
        "input_types": [
          "ExportedTarget",
          "UnionMembership"
        ],
        "name": "pants.backend.python.goals.setup_py.determine_explicitly_provided_setup_kwargs",
        "output_desc": "The keyword arguments to the `setup()` function in the generated `setup.py`.",
        "output_type": "SetupKwargs",
        "provider": "pants.backend.python"
      }
    ],
    "SetupPyGeneration": [
      {
        "description": null,
        "help": "Options to control how setup.py is generated from a `python_distribution` target.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_setup_py_generation",
        "output_desc": null,
        "output_type": "SetupPyGeneration",
        "provider": "pants.backend.python"
      }
    ],
    "Setuptools": [
      {
        "description": null,
        "help": "Python setuptools, used to package `python_distribution` targets.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_setuptools",
        "output_desc": null,
        "output_type": "Setuptools",
        "provider": "pants.backend.python"
      }
    ],
    "ShellMapping": [
      {
        "description": "Creating map of Shell file names to Shell targets",
        "help": null,
        "input_gets": [],
        "input_types": [
          "AllShellTargets"
        ],
        "name": "pants.backend.shell.dependency_inference.map_shell_files",
        "output_desc": "A mapping of Shell file names to their owning file address.",
        "output_type": "ShellMapping",
        "provider": "pants.backend.shell"
      }
    ],
    "ShellSetup": [
      {
        "description": null,
        "help": "Options for Pants's Shell support.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_shell_setup",
        "output_desc": null,
        "output_type": "ShellSetup",
        "provider": "pants.backend.shell"
      }
    ],
    "Shellcheck": [
      {
        "description": null,
        "help": "A linter for shell scripts.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_shellcheck",
        "output_desc": null,
        "output_type": "Shellcheck",
        "provider": "pants.backend.shell"
      }
    ],
    "Shfmt": [
      {
        "description": null,
        "help": "An autoformatter for shell scripts (https://github.com/mvdan/sh).",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_shfmt",
        "output_desc": null,
        "output_type": "Shfmt",
        "provider": "pants.backend.shell.lint.shfmt"
      }
    ],
    "Shunit2Runner": [
      {
        "description": "Determine shunit2 shell",
        "help": null,
        "input_gets": [
          "Get(Environment, EnvironmentRequest, ..)",
          "Get(BinaryPaths, BinaryPathRequest, ..)"
        ],
        "input_types": [
          "Shunit2RunnerRequest",
          "ShellSetup"
        ],
        "name": "pants.backend.shell.shunit2_test_runner.determine_shunit2_shell",
        "output_desc": "Shunit2Runner(shell: pants.backend.shell.target_types.Shunit2Shell, binary_path: pants.core.util_rules.system_binaries.BinaryPath)",
        "output_type": "Shunit2Runner",
        "provider": "pants.backend.shell"
      }
    ],
    "SourceFiles": [
      {
        "description": "Get all relevant source files",
        "help": "Merge all `SourceBaseField`s into one Snapshot.",
        "input_gets": [
          "Get(HydratedSources, HydrateSourcesRequest, ..)",
          "Get(Snapshot, MergeDigests, ..)"
        ],
        "input_types": [
          "SourceFilesRequest"
        ],
        "name": "pants.core.util_rules.source_files.determine_source_files",
        "output_desc": "A merged snapshot of the `sources` fields of multiple targets.",
        "output_type": "SourceFiles",
        "provider": "pants.core"
      }
    ],
    "SourceRoot": [
      {
        "description": null,
        "help": "Convenience rule to allow callers to request a SourceRoot directly.\n\nThat way callers don't have to unpack an OptionalSourceRoot if they know they expect a\nSourceRoot to exist and are willing to error if it doesn't.",
        "input_gets": [
          "Get(OptionalSourceRoot, SourceRootRequest, ..)"
        ],
        "input_types": [
          "SourceRootRequest"
        ],
        "name": "pants.source.source_root.get_source_root",
        "output_desc": "SourceRoot(path: 'str')",
        "output_type": "SourceRoot",
        "provider": "pants.core"
      }
    ],
    "SourceRootConfig": [
      {
        "description": null,
        "help": "Configuration for roots of source trees.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_source",
        "output_desc": null,
        "output_type": "SourceRootConfig",
        "provider": "pants.core"
      }
    ],
    "SourceRootsResult": [
      {
        "description": null,
        "help": "Convenience rule to allow callers to request SourceRoots that must exist.\n\nThat way callers don't have to unpack OptionalSourceRoots if they know they expect a SourceRoot\nto exist and are willing to error if it doesn't.",
        "input_gets": [
          "Get(OptionalSourceRootsResult, SourceRootsRequest, ..)"
        ],
        "input_types": [
          "SourceRootsRequest"
        ],
        "name": "pants.source.source_root.get_source_roots",
        "output_desc": "SourceRootsResult(path_to_root: 'FrozenDict[PurePath, SourceRoot]')",
        "output_type": "SourceRootsResult",
        "provider": "pants.core"
      }
    ],
    "SourcesResult": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(MaterializeBuildTargetSourcesResult, MaterializeBuildTargetSourcesRequest, ..)"
        ],
        "input_types": [
          "SourcesParams"
        ],
        "name": "pants.bsp.util_rules.targets.bsp_build_target_sources",
        "output_desc": "SourcesResult(items: 'tuple[SourcesItem, ...]')",
        "output_type": "SourcesResult",
        "provider": "pants.core"
      }
    ],
    "StatsAggregatorSubsystem": [
      {
        "description": null,
        "help": "An aggregator for Pants stats, such as cache metrics.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_stats",
        "output_desc": null,
        "output_type": "StatsAggregatorSubsystem",
        "provider": "pants.core"
      }
    ],
    "StrippedFileName": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(SourceRoot, SourceRootRequest, ..)"
        ],
        "input_types": [
          "StrippedFileNameRequest"
        ],
        "name": "pants.core.util_rules.stripped_source_files.strip_file_name",
        "output_desc": "StrippedFileName(value: str)",
        "output_type": "StrippedFileName",
        "provider": "pants.core"
      }
    ],
    "StrippedPythonSourceFiles": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(StrippedSourceFiles, SourceFiles, ..)"
        ],
        "input_types": [
          "PythonSourceFiles"
        ],
        "name": "pants.backend.python.util_rules.python_sources.strip_python_sources",
        "output_desc": "A PythonSourceFiles that has had its source roots stripped.",
        "output_type": "StrippedPythonSourceFiles",
        "provider": "pants.backend.python"
      }
    ],
    "StrippedSourceFileNames": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(SourceRoot, SourceRootRequest, ..)"
        ],
        "input_types": [
          "SourcesPaths"
        ],
        "name": "pants.core.util_rules.stripped_source_files.strip_sources_paths",
        "output_desc": "The file names from a target's `sources` field, with source roots stripped.\n\nUse via `Get(StrippedSourceFileNames, SourcePathsRequest(tgt.get(SourcesField))`.",
        "output_type": "StrippedSourceFileNames",
        "provider": "pants.core"
      }
    ],
    "StrippedSourceFiles": [
      {
        "description": null,
        "help": "Removes source roots from a snapshot.\n\nE.g. `src/python/pants/util/strutil.py` -> `pants/util/strutil.py`.",
        "input_gets": [
          "Get(Snapshot, DigestSubset, ..)",
          "Get(SourceRootsResult, SourceRootsRequest, ..)",
          "Get(Snapshot, RemovePrefix, ..)",
          "Get(Digest, DigestSubset, ..)",
          "Get(Digest, RemovePrefix, ..)",
          "Get(Snapshot, MergeDigests, ..)"
        ],
        "input_types": [
          "SourceFiles"
        ],
        "name": "pants.core.util_rules.stripped_source_files.strip_source_roots",
        "output_desc": "Wrapper for a snapshot of files whose source roots have been stripped.\n\nUse via `Get(StrippedSourceFiles, SourceFilesRequest([tgt.get(SourcesField)])`.",
        "output_type": "StrippedSourceFiles",
        "provider": "pants.core"
      }
    ],
    "StyleSetup": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(SourceFiles, SourceFilesRequest, ..)",
          "Get(Snapshot, MergeDigests, ..)"
        ],
        "input_types": [
          "StyleSetupRequest"
        ],
        "name": "pants.backend.terraform.style.setup_terraform_style",
        "output_desc": "StyleSetup(directory_to_process: 'dict[str, tuple[TerraformProcess, tuple[Address, ...]]]', original_snapshot: 'Snapshot')",
        "output_type": "StyleSetup",
        "provider": "pants.backend.experimental.terraform"
      }
    ],
    "SubprocessEnvironment": [
      {
        "description": null,
        "help": "Environment settings for forked subprocesses.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_subprocess_environment",
        "output_desc": null,
        "output_type": "SubprocessEnvironment",
        "provider": "pants.core"
      }
    ],
    "SubprocessEnvironmentVars": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Environment, EnvironmentRequest, ..)"
        ],
        "input_types": [
          "SubprocessEnvironment"
        ],
        "name": "pants.core.util_rules.subprocess_environment.get_subprocess_environment",
        "output_desc": "SubprocessEnvironmentVars(vars: pants.util.frozendict.FrozenDict[str, str])",
        "output_type": "SubprocessEnvironmentVars",
        "provider": "pants.core"
      }
    ],
    "SuccinctCodeCounter": [
      {
        "description": null,
        "help": "The Succinct Code Counter, aka `scc` (https://github.com/boyter/scc).",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_scc",
        "output_desc": null,
        "output_type": "SuccinctCodeCounter",
        "provider": "pants.backend.project_info"
      }
    ],
    "SymbolMap": [
      {
        "description": "Map all first party Java targets to their packages",
        "help": null,
        "input_gets": [
          "Get(JavaSourceDependencyAnalysis, SourceFilesRequest, ..)"
        ],
        "input_types": [
          "FirstPartyJavaTargetsMappingRequest",
          "AllJavaTargets",
          "JvmSubsystem"
        ],
        "name": "pants.backend.java.dependency_inference.symbol_mapper.map_first_party_java_targets_to_symbols",
        "output_desc": "The first party symbols provided by a single inference implementation.",
        "output_type": "SymbolMap",
        "provider": "pants.backend.experimental.java"
      },
      {
        "description": "Map all first party Kotlin targets to their symbols",
        "help": null,
        "input_gets": [
          "Get(KotlinSourceDependencyAnalysis, SourceFilesRequest, ..)"
        ],
        "input_types": [
          "FirstPartyKotlinTargetsMappingRequest",
          "AllKotlinTargets",
          "JvmSubsystem"
        ],
        "name": "pants.backend.kotlin.dependency_inference.symbol_mapper.map_first_party_kotlin_targets_to_symbols",
        "output_desc": "The first party symbols provided by a single inference implementation.",
        "output_type": "SymbolMap",
        "provider": "pants.backend.experimental.kotlin"
      },
      {
        "description": "Map all first party Scala targets to their symbols",
        "help": null,
        "input_gets": [
          "Get(ScalaSourceDependencyAnalysis, SourceFilesRequest, ..)"
        ],
        "input_types": [
          "FirstPartyScalaTargetsMappingRequest",
          "AllScalaTargets",
          "JvmSubsystem"
        ],
        "name": "pants.backend.scala.dependency_inference.symbol_mapper.map_first_party_scala_targets_to_symbols",
        "output_desc": "The first party symbols provided by a single inference implementation.",
        "output_type": "SymbolMap",
        "provider": "pants.backend.experimental.scala"
      }
    ],
    "SymbolMapping": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(SymbolMap, FirstPartyMappingRequest, ..)"
        ],
        "input_types": [
          "UnionMembership",
          "AllJvmTypeProvidingTargets",
          "JvmSubsystem",
          "ThirdPartySymbolMapping"
        ],
        "name": "pants.jvm.dependency_inference.symbol_mapper.merge_symbol_mappings",
        "output_desc": "The merged first and third party symbols provided by all inference implementations.",
        "output_type": "SymbolMapping",
        "provider": "pants.backend.experimental.java"
      }
    ],
    "TailorGoal": [
      {
        "description": "`tailor` goal",
        "help": null,
        "input_gets": [
          "Get(PutativeTargets, PutativeTargetsRequest, ..)",
          "Get(UniquelyNamedPutativeTargets, PutativeTargets, ..)",
          "Get(DisjointSourcePutativeTarget, PutativeTarget, ..)",
          "Get(EditedBuildFiles, EditBuildFilesRequest, ..)"
        ],
        "input_types": [
          "TailorSubsystem",
          "Console",
          "Workspace",
          "UnionMembership",
          "Specs",
          "BuildFileOptions"
        ],
        "name": "pants.core.goals.tailor.tailor",
        "output_desc": null,
        "output_type": "TailorGoal",
        "provider": "pants.core"
      }
    ],
    "TailorSubsystem": [
      {
        "description": null,
        "help": "Auto-generate BUILD file targets for new source files.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_tailor",
        "output_desc": null,
        "output_type": "TailorSubsystem",
        "provider": "pants.core"
      }
    ],
    "TarBinary": [
      {
        "description": "Finding the `tar` binary",
        "help": null,
        "input_gets": [
          "Get(BinaryPaths, BinaryPathRequest, ..)"
        ],
        "input_types": [],
        "name": "pants.core.util_rules.system_binaries.find_tar",
        "output_desc": null,
        "output_type": "TarBinary",
        "provider": "pants.core"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "TarBinaryRequest",
          "TarBinary"
        ],
        "name": "pants.core.util_rules.system_binaries.find_tar_wrapper",
        "output_desc": null,
        "output_type": "TarBinary",
        "provider": "pants.core"
      }
    ],
    "TargetDatas": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Targets, DependenciesRequest, ..)",
          "Get(HydratedSources, HydrateSourcesRequest, ..)"
        ],
        "input_types": [
          "UnexpandedTargets"
        ],
        "name": "pants.backend.project_info.peek.get_target_data",
        "output_desc": null,
        "output_type": "TargetDatas",
        "provider": "pants.backend.project_info"
      }
    ],
    "TargetFilesGeneratorSettings": [
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "GeneratorSettingsRequest",
          "Protoc"
        ],
        "name": "pants.backend.codegen.protobuf.target_types.generator_settings",
        "output_desc": "TargetFilesGeneratorSettings(add_dependencies_on_all_siblings: 'bool' = False)",
        "output_type": "TargetFilesGeneratorSettings",
        "provider": "pants.backend.codegen.protobuf.python"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "GeneratorSettingsRequest",
          "ThriftSubsystem"
        ],
        "name": "pants.backend.codegen.thrift.target_types.generator_settings",
        "output_desc": "TargetFilesGeneratorSettings(add_dependencies_on_all_siblings: 'bool' = False)",
        "output_type": "TargetFilesGeneratorSettings",
        "provider": "pants.backend.codegen.thrift.apache.python"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "ScalaSettingsRequest"
        ],
        "name": "pants.backend.scala.target_types.scala_settings_request",
        "output_desc": "TargetFilesGeneratorSettings(add_dependencies_on_all_siblings: 'bool' = False)",
        "output_type": "TargetFilesGeneratorSettings",
        "provider": "pants.backend.experimental.scala"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "PythonFilesGeneratorSettingsRequest",
          "PythonInferSubsystem"
        ],
        "name": "pants.backend.python.target_types_rules.python_files_generator_settings",
        "output_desc": "TargetFilesGeneratorSettings(add_dependencies_on_all_siblings: 'bool' = False)",
        "output_type": "TargetFilesGeneratorSettings",
        "provider": "pants.backend.python"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "ShellGeneratorSettingsRequest",
          "ShellSetup"
        ],
        "name": "pants.backend.shell.target_types.generator_settings",
        "output_desc": "TargetFilesGeneratorSettings(add_dependencies_on_all_siblings: 'bool' = False)",
        "output_type": "TargetFilesGeneratorSettings",
        "provider": "pants.backend.shell"
      }
    ],
    "Targets": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Targets, AddressSpecs, ..)"
        ],
        "input_types": [
          "BSPBuildTargetInternal",
          "UnionMembership",
          "FieldDefaults"
        ],
        "name": "pants.bsp.util_rules.targets.resolve_bsp_build_target_addresses",
        "output_desc": "A heterogeneous collection of instances of Target subclasses.\n\nWhile every element will be a subclass of `Target`, there may be many different `Target` types\nin this collection, e.g. some `FileTarget` and some `PythonTestTarget`.\n\nOften, you will want to filter out the relevant targets by looking at what fields they have\nregistered, e.g.:\n\n    valid_tgts = [tgt for tgt in tgts if tgt.has_fields([Compatibility, PythonSources])]\n\nYou should not check the Target's actual type because this breaks custom target types;\nfor example, prefer `tgt.has_field(PythonTestsSourcesField)` to\n`isinstance(tgt, PythonTestsTarget)`.",
        "output_type": "Targets",
        "provider": "pants.core"
      }
    ],
    "TerraformHcl2Parser": [
      {
        "description": null,
        "help": "Used to parse Terraform modules to infer their dependencies.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_terraform_hcl2_parser",
        "output_desc": null,
        "output_type": "TerraformHcl2Parser",
        "provider": "pants.backend.experimental.terraform"
      }
    ],
    "TerraformTool": [
      {
        "description": null,
        "help": "Terraform (https://terraform.io)",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_download_terraform",
        "output_desc": null,
        "output_type": "TerraformTool",
        "provider": "pants.backend.experimental.terraform"
      }
    ],
    "TerraformValidateSubsystem": [
      {
        "description": null,
        "help": "Terraform validate options.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_terraform_validate",
        "output_desc": null,
        "output_type": "TerraformValidateSubsystem",
        "provider": "pants.backend.experimental.terraform"
      }
    ],
    "Test": [
      {
        "description": "`test` goal",
        "help": null,
        "input_gets": [
          "Get(TargetRootsToFieldSets, TargetRootsToFieldSetsRequest, ..)",
          "Get(TestDebugRequest, TestFieldSet, ..)",
          "Effect(InteractiveProcessResult, InteractiveProcess, ..)",
          "Get(TestResult, TestFieldSet, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(CoverageReports, CoverageDataCollection, ..)",
          "Get(OpenFiles, OpenFilesRequest, ..)"
        ],
        "input_types": [
          "Console",
          "TestSubsystem",
          "Workspace",
          "UnionMembership",
          "DistDir",
          "RunId"
        ],
        "name": "pants.core.goals.test.run_tests",
        "output_desc": null,
        "output_type": "Test",
        "provider": "pants.core"
      }
    ],
    "TestDebugRequest": [
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "GoTestFieldSet"
        ],
        "name": "pants.backend.go.goals.test.generate_go_tests_debug_request",
        "output_desc": "TestDebugRequest(process: 'InteractiveProcess | None')",
        "output_type": "TestDebugRequest",
        "provider": "pants.backend.experimental.go"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "HelmUnitTestFieldSet"
        ],
        "name": "pants.backend.helm.test.unittest.generate_helm_unittest_debug_request",
        "output_desc": "TestDebugRequest(process: 'InteractiveProcess | None')",
        "output_type": "TestDebugRequest",
        "provider": "pants.backend.experimental.helm"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(TestSetup, TestSetupRequest, ..)",
          "Get(Process, JvmProcess, ..)",
          "Get(InteractiveProcess, InteractiveProcessRequest, ..)"
        ],
        "input_types": [
          "JunitTestFieldSet"
        ],
        "name": "pants.jvm.test.junit.setup_junit_debug_request",
        "output_desc": "TestDebugRequest(process: 'InteractiveProcess | None')",
        "output_type": "TestDebugRequest",
        "provider": "pants.backend.experimental.java"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(TestSetup, TestSetupRequest, ..)",
          "Get(Process, JvmProcess, ..)",
          "Get(InteractiveProcess, InteractiveProcessRequest, ..)"
        ],
        "input_types": [
          "ScalatestTestFieldSet"
        ],
        "name": "pants.backend.scala.test.scalatest.setup_scalatest_debug_request",
        "output_desc": "TestDebugRequest(process: 'InteractiveProcess | None')",
        "output_type": "TestDebugRequest",
        "provider": "pants.backend.experimental.scala"
      },
      {
        "description": "Set up Pytest to run interactively",
        "help": null,
        "input_gets": [
          "Get(TestSetup, TestSetupRequest, ..)"
        ],
        "input_types": [
          "PythonTestFieldSet"
        ],
        "name": "pants.backend.python.goals.pytest_runner.debug_python_test",
        "output_desc": "TestDebugRequest(process: 'InteractiveProcess | None')",
        "output_type": "TestDebugRequest",
        "provider": "pants.backend.python"
      },
      {
        "description": "Setup Shunit2 to run interactively",
        "help": null,
        "input_gets": [
          "Get(TestSetup, TestSetupRequest, ..)"
        ],
        "input_types": [
          "Shunit2FieldSet"
        ],
        "name": "pants.backend.shell.shunit2_test_runner.setup_shunit2_debug_test",
        "output_desc": "TestDebugRequest(process: 'InteractiveProcess | None')",
        "output_type": "TestDebugRequest",
        "provider": "pants.backend.shell"
      }
    ],
    "TestExtraEnv": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Environment, EnvironmentRequest, ..)"
        ],
        "input_types": [
          "TestSubsystem"
        ],
        "name": "pants.core.goals.test.get_filtered_environment",
        "output_desc": "TestExtraEnv(env: 'Environment')",
        "output_type": "TestExtraEnv",
        "provider": "pants.core"
      }
    ],
    "TestResult": [
      {
        "description": "Test with Go",
        "help": null,
        "input_gets": [
          "Get(FallibleFirstPartyPkgAnalysis, FirstPartyPkgAnalysisRequest, ..)",
          "Get(FallibleFirstPartyPkgDigest, FirstPartyPkgDigestRequest, ..)",
          "Get(Targets, DependenciesRequest, ..)",
          "Get(GeneratedTestMain, GenerateTestMainRequest, ..)",
          "Get(FallibleBuildGoPackageRequest, BuildGoPackageTargetRequest, ..)",
          "Get(FallibleBuiltGoPackage, BuildGoPackageRequest, ..)",
          "Get(ImportConfig, ImportConfigRequest, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(LinkedGoBinary, LinkGoBinaryRequest, ..)",
          "Get(Digest, AddPrefix, ..)",
          "Get(SourceFiles, SourceFilesRequest, ..)",
          "Get(FallibleProcessResult, Process, ..)"
        ],
        "input_types": [
          "GoTestFieldSet",
          "TestSubsystem",
          "GoTestSubsystem"
        ],
        "name": "pants.backend.go.goals.test.run_go_tests",
        "output_desc": "TestResult(exit_code: 'int | None', stdout: 'str', stdout_digest: 'FileDigest', stderr: 'str', stderr_digest: 'FileDigest', address: 'Address', output_setting: 'ShowOutput', result_metadata: 'ProcessResultMetadata | None', coverage_data: 'CoverageData | None' = None, xml_results: 'Snapshot | None' = None, extra_output: 'Snapshot | None' = None)",
        "output_type": "TestResult",
        "provider": "pants.backend.experimental.go"
      },
      {
        "description": "Run Helm Unittest",
        "help": null,
        "input_gets": [
          "Get(Targets, DependenciesRequest, ..)",
          "Get(TransitiveTargets, TransitiveTargetsRequest, ..)",
          "Get(HelmChart, HelmChartRequest, ..)",
          "Get(StrippedSourceFiles, SourceFilesRequest, ..)",
          "Get(Digest, AddPrefix, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(FallibleProcessResult, HelmProcess, ..)",
          "Get(Snapshot, RemovePrefix, ..)"
        ],
        "input_types": [
          "HelmUnitTestFieldSet",
          "TestSubsystem",
          "HelmUnitTestSubsystem"
        ],
        "name": "pants.backend.helm.test.unittest.run_helm_unittest",
        "output_desc": "TestResult(exit_code: 'int | None', stdout: 'str', stdout_digest: 'FileDigest', stderr: 'str', stderr_digest: 'FileDigest', address: 'Address', output_setting: 'ShowOutput', result_metadata: 'ProcessResultMetadata | None', coverage_data: 'CoverageData | None' = None, xml_results: 'Snapshot | None' = None, extra_output: 'Snapshot | None' = None)",
        "output_type": "TestResult",
        "provider": "pants.backend.experimental.helm"
      },
      {
        "description": "Run JUnit",
        "help": null,
        "input_gets": [
          "Get(TestSetup, TestSetupRequest, ..)",
          "Get(FallibleProcessResult, JvmProcess, ..)",
          "Get(Digest, DigestSubset, ..)",
          "Get(Snapshot, RemovePrefix, ..)"
        ],
        "input_types": [
          "TestSubsystem",
          "JunitTestFieldSet"
        ],
        "name": "pants.jvm.test.junit.run_junit_test",
        "output_desc": "TestResult(exit_code: 'int | None', stdout: 'str', stdout_digest: 'FileDigest', stderr: 'str', stderr_digest: 'FileDigest', address: 'Address', output_setting: 'ShowOutput', result_metadata: 'ProcessResultMetadata | None', coverage_data: 'CoverageData | None' = None, xml_results: 'Snapshot | None' = None, extra_output: 'Snapshot | None' = None)",
        "output_type": "TestResult",
        "provider": "pants.backend.experimental.java"
      },
      {
        "description": "Run Scalatest",
        "help": null,
        "input_gets": [
          "Get(TestSetup, TestSetupRequest, ..)",
          "Get(FallibleProcessResult, JvmProcess, ..)",
          "Get(Digest, DigestSubset, ..)",
          "Get(Snapshot, RemovePrefix, ..)"
        ],
        "input_types": [
          "TestSubsystem",
          "ScalatestTestFieldSet"
        ],
        "name": "pants.backend.scala.test.scalatest.run_scalatest_test",
        "output_desc": "TestResult(exit_code: 'int | None', stdout: 'str', stdout_digest: 'FileDigest', stderr: 'str', stderr_digest: 'FileDigest', address: 'Address', output_setting: 'ShowOutput', result_metadata: 'ProcessResultMetadata | None', coverage_data: 'CoverageData | None' = None, xml_results: 'Snapshot | None' = None, extra_output: 'Snapshot | None' = None)",
        "output_type": "TestResult",
        "provider": "pants.backend.experimental.scala"
      },
      {
        "description": "Run Pytest",
        "help": null,
        "input_gets": [
          "Get(TestSetup, TestSetupRequest, ..)",
          "Get(FallibleProcessResult, Process, ..)",
          "Get(Snapshot, DigestSubset, ..)",
          "Get(Snapshot, RemovePrefix, ..)"
        ],
        "input_types": [
          "PythonTestFieldSet",
          "TestSubsystem"
        ],
        "name": "pants.backend.python.goals.pytest_runner.run_python_test",
        "output_desc": "TestResult(exit_code: 'int | None', stdout: 'str', stdout_digest: 'FileDigest', stderr: 'str', stderr_digest: 'FileDigest', address: 'Address', output_setting: 'ShowOutput', result_metadata: 'ProcessResultMetadata | None', coverage_data: 'CoverageData | None' = None, xml_results: 'Snapshot | None' = None, extra_output: 'Snapshot | None' = None)",
        "output_type": "TestResult",
        "provider": "pants.backend.python"
      },
      {
        "description": "Run tests with Shunit2",
        "help": null,
        "input_gets": [
          "Get(TestSetup, TestSetupRequest, ..)",
          "Get(FallibleProcessResult, Process, ..)"
        ],
        "input_types": [
          "Shunit2FieldSet",
          "TestSubsystem"
        ],
        "name": "pants.backend.shell.shunit2_test_runner.run_tests_with_shunit2",
        "output_desc": "TestResult(exit_code: 'int | None', stdout: 'str', stdout_digest: 'FileDigest', stderr: 'str', stderr_digest: 'FileDigest', address: 'Address', output_setting: 'ShowOutput', result_metadata: 'ProcessResultMetadata | None', coverage_data: 'CoverageData | None' = None, xml_results: 'Snapshot | None' = None, extra_output: 'Snapshot | None' = None)",
        "output_type": "TestResult",
        "provider": "pants.backend.shell"
      }
    ],
    "TestSetup": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(JdkEnvironment, JdkRequest, ..)",
          "Get(Targets, DependenciesRequest, ..)",
          "Get(GenerateJvmLockfileFromTool, JunitToolLockfileSentinel, ..)",
          "Get(Classpath, Addresses, ..)",
          "Get(ToolClasspath, ToolClasspathRequest, ..)",
          "Get(SourceFiles, SourceFilesRequest, ..)",
          "Get(Digest, MergeDigests, ..)"
        ],
        "input_types": [
          "TestSetupRequest",
          "JvmSubsystem",
          "JUnit",
          "TestSubsystem"
        ],
        "name": "pants.jvm.test.junit.setup_junit_for_target",
        "output_desc": "TestSetup(process: pants.jvm.jdk_rules.JvmProcess, reports_dir_prefix: str)",
        "output_type": "TestSetup",
        "provider": "pants.backend.experimental.java"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(JdkEnvironment, JdkRequest, ..)",
          "Get(Targets, DependenciesRequest, ..)",
          "Get(GenerateJvmLockfileFromTool, ScalatestToolLockfileSentinel, ..)",
          "Get(Classpath, Addresses, ..)",
          "Get(ToolClasspath, ToolClasspathRequest, ..)",
          "Get(SourceFiles, SourceFilesRequest, ..)",
          "Get(Digest, MergeDigests, ..)"
        ],
        "input_types": [
          "TestSetupRequest",
          "JvmSubsystem",
          "Scalatest",
          "TestSubsystem"
        ],
        "name": "pants.backend.scala.test.scalatest.setup_scalatest_for_target",
        "output_desc": "TestSetup(process: pants.jvm.jdk_rules.JvmProcess, reports_dir_prefix: str)",
        "output_type": "TestSetup",
        "provider": "pants.backend.experimental.scala"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(TransitiveTargets, TransitiveTargetsRequest, ..)",
          "Get(AllPytestPluginSetups, AllPytestPluginSetupsRequest, ..)",
          "Get(Pex, RequirementsPexRequest, ..)",
          "Get(Pex, PexRequest, ..)",
          "Get(Digest, CreateDigest, ..)",
          "Get(PythonSourceFiles, PythonSourceFilesRequest, ..)",
          "Get(SourceFiles, SourceFilesRequest, ..)",
          "Get(Environment, EnvironmentRequest, ..)",
          "Get(LocalDistsPex, LocalDistsPexRequest, ..)",
          "Get(VenvPex, PexRequest, ..)",
          "Get(ConfigFiles, ConfigFilesRequest, ..)",
          "Get(Digest, DigestSubset, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(Process, VenvPexProcess, ..)"
        ],
        "input_types": [
          "TestSetupRequest",
          "PyTest",
          "TestSubsystem",
          "PythonSetup",
          "CoverageConfig",
          "CoverageSubsystem",
          "TestExtraEnv",
          "GlobalOptions"
        ],
        "name": "pants.backend.python.goals.pytest_runner.setup_pytest_for_target",
        "output_desc": "TestSetup(process: pants.engine.process.Process, results_file_name: Optional[str])",
        "output_type": "TestSetup",
        "provider": "pants.backend.python"
      },
      {
        "description": "Setup shunit2",
        "help": null,
        "input_gets": [
          "Get(Digest, DownloadFile, ..)",
          "Get(TransitiveTargets, TransitiveTargetsRequest, ..)",
          "Get(BuiltPackageDependencies, BuildPackageDependenciesRequest, ..)",
          "Get(Environment, EnvironmentRequest, ..)",
          "Get(SourceFiles, SourceFilesRequest, ..)",
          "Get(DigestContents, Digest, ..)",
          "Get(Digest, CreateDigest, ..)",
          "Get(Shunit2Runner, Shunit2RunnerRequest, ..)",
          "Get(Digest, MergeDigests, ..)"
        ],
        "input_types": [
          "TestSetupRequest",
          "ShellSetup",
          "TestSubsystem",
          "TestExtraEnv",
          "GlobalOptions"
        ],
        "name": "pants.backend.shell.shunit2_test_runner.setup_shunit2_for_target",
        "output_desc": "TestSetup(process: pants.engine.process.Process)",
        "output_type": "TestSetup",
        "provider": "pants.backend.shell"
      }
    ],
    "TestSubsystem": [
      {
        "description": null,
        "help": "Run tests.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_test",
        "output_desc": null,
        "output_type": "TestSubsystem",
        "provider": "pants.core"
      }
    ],
    "TfFmtSubsystem": [
      {
        "description": null,
        "help": "Terraform fmt options.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_terraform_fmt",
        "output_desc": null,
        "output_type": "TfFmtSubsystem",
        "provider": "pants.backend.experimental.terraform"
      }
    ],
    "ThirdPartyHelmArtifactMapping": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(ResolvedHelmArtifact, HelmArtifact, ..)"
        ],
        "input_types": [
          "AllHelmArtifactTargets"
        ],
        "name": "pants.backend.helm.resolve.artifacts.third_party_helm_artifact_mapping",
        "output_desc": null,
        "output_type": "ThirdPartyHelmArtifactMapping",
        "provider": "pants.backend.experimental.helm"
      }
    ],
    "ThirdPartyPkgAnalysis": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(AllThirdPartyPackages, AllThirdPartyPackagesRequest, ..)"
        ],
        "input_types": [
          "ThirdPartyPkgAnalysisRequest"
        ],
        "name": "pants.backend.go.util_rules.third_party_pkg.extract_package_info",
        "output_desc": "All the info and files needed to build a third-party package.\n\nThe digest only contains the files for the package, with all prefixes stripped.",
        "output_type": "ThirdPartyPkgAnalysis",
        "provider": "pants.backend.experimental.go"
      }
    ],
    "ThirdPartyPythonModuleMapping": [
      {
        "description": "Creating map of third party targets to Python modules",
        "help": null,
        "input_gets": [],
        "input_types": [
          "AllPythonTargets",
          "PythonSetup"
        ],
        "name": "pants.backend.python.dependency_inference.module_mapper.map_third_party_modules_to_addresses",
        "output_desc": "A mapping of each resolve to the modules they contain and the addresses providing those\nmodules.",
        "output_type": "ThirdPartyPythonModuleMapping",
        "provider": "pants.backend.python"
      }
    ],
    "ThirdPartySymbolMapping": [
      {
        "description": null,
        "help": "Implements the mapping logic from the `jvm_artifact` and `java-infer` help.",
        "input_gets": [],
        "input_types": [
          "JavaInferSubsystem",
          "AvailableThirdPartyArtifacts",
          "AllJvmTypeProvidingTargets"
        ],
        "name": "pants.jvm.dependency_inference.artifact_mapper.compute_java_third_party_symbol_mapping",
        "output_desc": "The third party symbols provided by all `jvm_artifact` targets.",
        "output_type": "ThirdPartySymbolMapping",
        "provider": "pants.backend.experimental.java"
      }
    ],
    "ThriftMapping": [
      {
        "description": "Creating map of Thrift file names to Thrift targets",
        "help": null,
        "input_gets": [
          "Get(StrippedFileName, StrippedFileNameRequest, ..)"
        ],
        "input_types": [
          "AllThriftTargets"
        ],
        "name": "pants.backend.codegen.thrift.dependency_inference.map_thrift_files",
        "output_desc": "A mapping of stripped .thrift file names to their owning file address.",
        "output_type": "ThriftMapping",
        "provider": "pants.backend.codegen.thrift.apache.python"
      }
    ],
    "ThriftPythonSubsystem": [
      {
        "description": null,
        "help": "Options specific to generating Python from Thrift using Apache Thrift",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_python_thrift",
        "output_desc": null,
        "output_type": "ThriftPythonSubsystem",
        "provider": "pants.backend.codegen.thrift.apache.python"
      }
    ],
    "ThriftSubsystem": [
      {
        "description": null,
        "help": "General Thrift IDL settings (https://thrift.apache.org/).",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_thrift",
        "output_desc": null,
        "output_type": "ThriftSubsystem",
        "provider": "pants.backend.codegen.thrift.apache.python"
      }
    ],
    "ToolClasspath": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(CoursierResolvedLockfile, ArtifactRequirements, ..)",
          "Get(Snapshot, PathGlobs, ..)",
          "Get(CoursierResolvedLockfile, CoursierResolveKey, ..)",
          "Get(ArtifactRequirements, GatherJvmCoordinatesRequest, ..)",
          "Get(ResolvedClasspathEntries, CoursierResolvedLockfile, ..)",
          "Get(Snapshot, MergeDigests, ..)",
          "Get(Snapshot, AddPrefix, ..)"
        ],
        "input_types": [
          "ToolClasspathRequest"
        ],
        "name": "pants.jvm.resolve.coursier_fetch.materialize_classpath_for_tool",
        "output_desc": "A fully fetched and merged classpath for running a JVM tool.",
        "output_type": "ToolClasspath",
        "provider": "pants.backend.experimental.java"
      }
    ],
    "TwineSubsystem": [
      {
        "description": null,
        "help": "The utility for publishing Python distributions to PyPi and other Python repositories.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_twine",
        "output_desc": null,
        "output_type": "TwineSubsystem",
        "provider": "pants.backend.experimental.python"
      }
    ],
    "UniquelyNamedPutativeTargets": [
      {
        "description": null,
        "help": "Ensure that no target addresses collide.",
        "input_gets": [],
        "input_types": [
          "PutativeTargets",
          "AllUnexpandedTargets"
        ],
        "name": "pants.core.goals.tailor.rename_conflicting_targets",
        "output_desc": "Putative targets that have no name conflicts with existing targets (or each other).",
        "output_type": "UniquelyNamedPutativeTargets",
        "provider": "pants.core"
      }
    ],
    "UnzipBinary": [
      {
        "description": "Finding the `unzip` binary",
        "help": null,
        "input_gets": [
          "Get(BinaryPaths, BinaryPathRequest, ..)"
        ],
        "input_types": [],
        "name": "pants.core.util_rules.system_binaries.find_unzip",
        "output_desc": null,
        "output_type": "UnzipBinary",
        "provider": "pants.core"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "UnzipBinaryRequest",
          "UnzipBinary"
        ],
        "name": "pants.core.util_rules.system_binaries.find_unzip_wrapper",
        "output_desc": null,
        "output_type": "UnzipBinary",
        "provider": "pants.core"
      }
    ],
    "UpdateBuildFilesGoal": [
      {
        "description": "Update all BUILD files",
        "help": null,
        "input_gets": [
          "Get(DigestContents, PathGlobs, ..)",
          "Get(RewrittenBuildFile, RewrittenBuildFileRequest, ..)",
          "Get(Digest, CreateDigest, ..)"
        ],
        "input_types": [
          "UpdateBuildFilesSubsystem",
          "BuildFileOptions",
          "Console",
          "Workspace",
          "UnionMembership"
        ],
        "name": "pants.core.goals.update_build_files.update_build_files",
        "output_desc": null,
        "output_type": "UpdateBuildFilesGoal",
        "provider": "pants.core"
      }
    ],
    "UpdateBuildFilesSubsystem": [
      {
        "description": null,
        "help": "Format and fix safe deprecations in BUILD files.\n\nThis does not handle the full Pants upgrade. You must still manually change `pants_version` in `pants.toml` and you may need to manually address some deprecations. See https://www.pantsbuild.org/v2.12/docs/upgrade-tips for upgrade tips.\n\nThis goal is run without arguments. It will run over all BUILD files in your project.",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_update_build_files",
        "output_desc": null,
        "output_type": "UpdateBuildFilesSubsystem",
        "provider": "pants.core"
      }
    ],
    "UserGenerateLockfiles": [
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "RequestedPythonUserResolveNames",
          "AllTargets",
          "PythonSetup"
        ],
        "name": "pants.backend.python.goals.lockfile.setup_user_lockfile_requests",
        "output_desc": "All user resolves for a particular language ecosystem to build.\n\nEach language ecosystem should set up a subclass of `RequestedUserResolveNames` (see its\ndocstring), and implement a rule going from that subclass -> UserGenerateLockfiles. Each element\nin the returned `UserGenerateLockfiles` should be a subclass of `GenerateLockfile`, like\n`GeneratePythonLockfile`.",
        "output_type": "UserGenerateLockfiles",
        "provider": "pants.backend.docker"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(GenerateJvmLockfile, _ValidateJvmArtifactsRequest, ..)"
        ],
        "input_types": [
          "RequestedJVMUserResolveNames",
          "AllTargets",
          "JvmSubsystem"
        ],
        "name": "pants.jvm.goals.lockfile.setup_user_lockfile_requests",
        "output_desc": "All user resolves for a particular language ecosystem to build.\n\nEach language ecosystem should set up a subclass of `RequestedUserResolveNames` (see its\ndocstring), and implement a rule going from that subclass -> UserGenerateLockfiles. Each element\nin the returned `UserGenerateLockfiles` should be a subclass of `GenerateLockfile`, like\n`GeneratePythonLockfile`.",
        "output_type": "UserGenerateLockfiles",
        "provider": "pants.backend.experimental.java"
      }
    ],
    "ValidateJvmArtifactsForResolveResult": [
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "ValidateResolveHasScalaRuntimeRequest",
          "ScalaSubsystem",
          "AllScalaTargets",
          "JvmSubsystem"
        ],
        "name": "pants.backend.scala.resolve.lockfile.validate_scala_runtime_is_present_in_resolve",
        "output_desc": "Sentinel type that represents that a backend is satisfied with the artifacts for a JVM\nresolve.",
        "output_type": "ValidateJvmArtifactsForResolveResult",
        "provider": "pants.backend.experimental.scala"
      }
    ],
    "ValidatedDependencies": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(WrappedTarget, Address, ..)"
        ],
        "input_types": [
          "PythonValidateDependenciesRequest",
          "PythonSetup"
        ],
        "name": "pants.backend.python.target_types_rules.validate_python_dependencies",
        "output_desc": "ValidatedDependencies()",
        "output_type": "ValidatedDependencies",
        "provider": "pants.backend.python"
      }
    ],
    "VenvPex": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(BuildPexResult, PexRequest, ..)",
          "Get(Digest, CreateDigest, ..)",
          "Get(Digest, MergeDigests, ..)"
        ],
        "input_types": [
          "VenvPexRequest",
          "BashBinary",
          "PexEnvironment"
        ],
        "name": "pants.backend.python.util_rules.pex.create_venv_pex",
        "output_desc": "VenvPex(digest: 'Digest', pex_filename: 'str', pex: 'Script', python: 'Script', bin: 'FrozenDict[str, Script]', venv_rel_dir: 'str')",
        "output_type": "VenvPex",
        "provider": "pants.core"
      }
    ],
    "VenvPexRequest": [
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "PexRequest"
        ],
        "name": "pants.backend.python.util_rules.pex.wrap_venv_prex_request",
        "output_desc": "VenvPexRequest(pex_request: 'PexRequest', bin_names: 'Iterable[str]' = (), site_packages_copies: 'bool' = False) -> 'None'",
        "output_type": "VenvPexRequest",
        "provider": "pants.core"
      }
    ],
    "WorkspaceBuildTargetsResult": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(GenerateOneBSPBuildTargetResult, GenerateOneBSPBuildTargetRequest, ..)",
          "Get(Digest, MergeDigests, ..)"
        ],
        "input_types": [
          "WorkspaceBuildTargetsParams",
          "BSPBuildTargets",
          "Workspace"
        ],
        "name": "pants.bsp.util_rules.targets.bsp_workspace_build_targets",
        "output_desc": "WorkspaceBuildTargetsResult(targets: 'tuple[BuildTarget, ...]')",
        "output_type": "WorkspaceBuildTargetsResult",
        "provider": "pants.core"
      }
    ],
    "WorkunitsCallbackFactory": [
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "AnonymousTelemetryCallbackFactoryRequest",
          "AnonymousTelemetry"
        ],
        "name": "pants.goal.anonymous_telemetry.construct_callback",
        "output_desc": "A wrapper around a callable that constructs WorkunitsCallbacks.\n\nNB: This extra wrapping is because subtyping is not supported in the return position of a\nrule. See #11354 for discussion of that limitation.",
        "output_type": "WorkunitsCallbackFactory",
        "provider": "pants.core"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "StatsAggregatorCallbackFactoryRequest",
          "StatsAggregatorSubsystem"
        ],
        "name": "pants.goal.stats_aggregator.construct_callback",
        "output_desc": "A wrapper around a callable that constructs WorkunitsCallbacks.\n\nNB: This extra wrapping is because subtyping is not supported in the return position of a\nrule. See #11354 for discussion of that limitation.",
        "output_type": "WorkunitsCallbackFactory",
        "provider": "pants.core"
      }
    ],
    "WrappedGenerateLockfile": [
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "GeneratePythonLockfile"
        ],
        "name": "pants.backend.python.goals.lockfile.wrap_python_lockfile_request",
        "output_desc": "WrappedGenerateLockfile(request: 'GenerateLockfile')",
        "output_type": "WrappedGenerateLockfile",
        "provider": "pants.backend.docker"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "GenerateJvmLockfile"
        ],
        "name": "pants.jvm.goals.lockfile.wrap_jvm_lockfile_request",
        "output_desc": "WrappedGenerateLockfile(request: 'GenerateLockfile')",
        "output_type": "WrappedGenerateLockfile",
        "provider": "pants.backend.experimental.java"
      }
    ],
    "Yapf": [
      {
        "description": null,
        "help": "A formatter for Python files (https://github.com/google/yapf).",
        "input_gets": [
          "Get(ScopedOptions, Scope, ..)"
        ],
        "input_types": [],
        "name": "construct_scope_yapf",
        "output_desc": null,
        "output_type": "Yapf",
        "provider": "pants.core"
      }
    ],
    "ZipBinary": [
      {
        "description": "Finding the `zip` binary",
        "help": null,
        "input_gets": [
          "Get(BinaryPaths, BinaryPathRequest, ..)"
        ],
        "input_types": [],
        "name": "pants.core.util_rules.system_binaries.find_zip",
        "output_desc": null,
        "output_type": "ZipBinary",
        "provider": "pants.core"
      },
      {
        "description": null,
        "help": null,
        "input_gets": [],
        "input_types": [
          "ZipBinaryRequest",
          "ZipBinary"
        ],
        "name": "pants.core.util_rules.system_binaries.find_zip_wrapper",
        "output_desc": null,
        "output_type": "ZipBinary",
        "provider": "pants.core"
      }
    ],
    "_LanguageFmtResults": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(SourceFiles, SourceFilesRequest, ..)",
          "Get(FmtResult, FmtRequest, ..)"
        ],
        "input_types": [
          "_LanguageFmtRequest"
        ],
        "name": "pants.core.goals.fmt.fmt_language",
        "output_desc": "_LanguageFmtResults(results: 'tuple[FmtResult, ...]', input: 'Digest', output: 'Digest')",
        "output_type": "_LanguageFmtResults",
        "provider": "pants.core"
      }
    ],
    "_SetupGoProtocPlugin": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Digest, CreateDigest, ..)",
          "Get(ProcessResult, GoSdkProcess, ..)",
          "Get(Digest, MergeDigests, ..)",
          "Get(Digest, RemovePrefix, ..)"
        ],
        "input_types": [
          "Platform"
        ],
        "name": "pants.backend.codegen.protobuf.go.rules.setup_go_protoc_plugin",
        "output_desc": "_SetupGoProtocPlugin(digest: 'Digest')",
        "output_type": "_SetupGoProtocPlugin",
        "provider": "pants.backend.experimental.codegen.protobuf.go"
      }
    ],
    "__RuntimeJvm": [
      {
        "description": null,
        "help": null,
        "input_gets": [
          "Get(Process, JvmProcess, ..)",
          "Get(ProcessResult, Process, ..)"
        ],
        "input_types": [
          "JdkEnvironment"
        ],
        "name": "pants.jvm.run_deploy_jar.ensure_jdk_for_pants_run",
        "output_desc": "Allows Coursier to download a JDK into a Digest, rather than an append-only cache for use\nwith `pants run`.\n\nThis is a hideous stop-gap, which will no longer be necessary once `InteractiveProcess` supports\nappend-only caches. (See #13852 for details on how to do this.)",
        "output_type": "__RuntimeJvm",
        "provider": "pants.backend.experimental.java"
      }
    ]
  },
  "scope_to_help_info": {
    "": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--backend-packages=\"['<str>', '<str>', ...]\"",
          "config_key": "backend_packages",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--backend-packages=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_BACKEND_PACKAGES",
          "help": "Register functionality from these backends.\n\nThe backend packages must be present on the PYTHONPATH, typically because they are in the Pants core dist, in a plugin dist, or available as sources in the repo.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--backend-packages"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--backend-packages"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              },
              {
                "details": "from env var PANTS_BACKEND_PACKAGES",
                "rank": "ENVIRONMENT",
                "value": []
              },
              {
                "details": "from command-line flag",
                "rank": "FLAG",
                "value": [
                  "pants.backend.awslambda.python",
                  "pants.backend.codegen.protobuf.lint.buf",
                  "pants.backend.codegen.protobuf.python",
                  "pants.backend.codegen.thrift.apache.python",
                  "pants.backend.docker",
                  "pants.backend.docker.lint.hadolint",
                  "pants.backend.experimental.codegen.protobuf.go",
                  "pants.backend.experimental.codegen.protobuf.java",
                  "pants.backend.experimental.codegen.protobuf.scala",
                  "pants.backend.experimental.go",
                  "pants.backend.experimental.helm",
                  "pants.backend.experimental.java",
                  "pants.backend.experimental.java.lint.google_java_format",
                  "pants.backend.experimental.kotlin",
                  "pants.backend.experimental.kotlin.lint.ktlint",
                  "pants.backend.experimental.python",
                  "pants.backend.experimental.python.lint.autoflake",
                  "pants.backend.experimental.python.lint.pyupgrade",
                  "pants.backend.experimental.python.packaging.pyoxidizer",
                  "pants.backend.experimental.scala",
                  "pants.backend.experimental.scala.lint.scalafmt",
                  "pants.backend.experimental.terraform",
                  "pants.backend.google_cloud_function.python",
                  "pants.backend.plugin_development",
                  "pants.backend.python",
                  "pants.backend.python.lint.bandit",
                  "pants.backend.python.lint.black",
                  "pants.backend.python.lint.docformatter",
                  "pants.backend.python.lint.flake8",
                  "pants.backend.python.lint.isort",
                  "pants.backend.python.lint.pylint",
                  "pants.backend.python.lint.yapf",
                  "pants.backend.python.mixed_interpreter_constraints",
                  "pants.backend.python.typecheck.mypy",
                  "pants.backend.shell",
                  "pants.backend.shell.lint.shellcheck",
                  "pants.backend.shell.lint.shfmt"
                ]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--plugins=\"['<str>', '<str>', ...]\"",
          "config_key": "plugins",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--plugins=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_PLUGINS",
          "help": "Allow backends to be loaded from these plugins (usually released through PyPI). The default backends for each plugin will be loaded automatically. Other backends in a plugin can be loaded by listing them in `backend_packages` in the `[GLOBAL]` scope.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--plugins"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--plugins"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]plugins-force-resolve",
          "config_key": "plugins_force_resolve",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]plugins-force-resolve"
          ],
          "env_var": "PANTS_PLUGINS_FORCE_RESOLVE",
          "help": "Re-resolve plugins, even if previously resolved.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--plugins-force-resolve",
            "--no-plugins-force-resolve"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--plugins-force-resolve",
            "--no-plugins-force-resolve"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]show-log-target",
          "config_key": "show_log_target",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]show-log-target"
          ],
          "env_var": "PANTS_SHOW_LOG_TARGET",
          "help": "Display the target where a log message originates in that log message's output. This can be helpful when paired with --log-levels-by-target.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--show-log-target",
            "--no-show-log-target"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--show-log-target",
            "--no-show-log-target"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--log-levels-by-target=\"{'key1': val1, 'key2': val2, ...}\"",
          "config_key": "log_levels_by_target",
          "default": {},
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--log-levels-by-target=\"{'key1': val1, 'key2': val2, ...}\""
          ],
          "env_var": "PANTS_LOG_LEVELS_BY_TARGET",
          "help": "Set a more specific logging level for one or more logging targets. The names of logging targets are specified in log strings when the --show-log-target option is set. The logging levels are one of: \"error\", \"warn\", \"info\", \"debug\", \"trace\". All logging targets not specified here use the global log level set with --level. For example, you can set `--log-levels-by-target='{\"workunit_store\": \"info\", \"pants.engine.rules\": \"warn\"}'`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--log-levels-by-target"
          ],
          "typ": "dict",
          "unscoped_cmd_line_args": [
            "--log-levels-by-target"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": {}
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": {}
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]log-show-rust-3rdparty",
          "config_key": "log_show_rust_3rdparty",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]log-show-rust-3rdparty"
          ],
          "env_var": "PANTS_LOG_SHOW_RUST_3RDPARTY",
          "help": "Whether to show/hide logging done by 3rdparty Rust crates used by the Pants engine.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--log-show-rust-3rdparty",
            "--no-log-show-rust-3rdparty"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--log-show-rust-3rdparty",
            "--no-log-show-rust-3rdparty"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--ignore-warnings=\"['<str>', '<str>', ...]\"",
          "config_key": "ignore_warnings",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--ignore-warnings=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_IGNORE_WARNINGS",
          "help": "Ignore logs and warnings matching these strings.\n\nNormally, Pants will look for literal matches from the start of the log/warning message, but you can prefix the ignore with `$regex$` for Pants to instead treat your string as a regex pattern. For example:\n\n    ignore_warnings = [\n        \"DEPRECATED: option 'config' in scope 'flake8' will be removed\",\n        '$regex$:No files\\s*'\n    ]",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--ignore-warnings"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--ignore-warnings"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pants-version=<str>",
          "config_key": "pants_version",
          "default": "2.12.1",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pants-version=<str>"
          ],
          "env_var": "PANTS_VERSION",
          "help": "Use this Pants version. Note that Pants only uses this to verify that you are using the requested version, as Pants cannot dynamically change the version it is using once the program is already running.\n\nIf you use the `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64` script from https://www.pantsbuild.org/v2.12/docs/installation, however, changing the value in your `pants.toml` will cause the new version to be installed and run automatically.\n\nRun `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 --version` to check what is being used.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pants-version"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--pants-version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "2.12.1"
              },
              {
                "details": "from env var PANTS_VERSION",
                "rank": "ENVIRONMENT",
                "value": "2.12.1"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pants-bin-name=<str>",
          "config_key": "pants_bin_name",
          "default": "./pants",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pants-bin-name=<str>"
          ],
          "env_var": "PANTS_BIN_NAME",
          "help": "The name of the script or binary used to invoke Pants. Useful when printing help messages.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pants-bin-name"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--pants-bin-name"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "./pants"
              },
              {
                "details": "from env var PANTS_BIN_NAME",
                "rank": "ENVIRONMENT",
                "value": "/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pants-workdir=<dir>",
          "config_key": "pants_workdir",
          "default": "/tmp/tmp.MpwSc5OGVo/.pants.d",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pants-workdir=<dir>"
          ],
          "env_var": "PANTS_WORKDIR",
          "help": "Write intermediate logs and output files to this dir.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pants-workdir"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--pants-workdir"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "/tmp/tmp.MpwSc5OGVo/.pants.d"
              },
              {
                "details": null,
                "rank": "CONFIG_DEFAULT",
                "value": "/tmp/tmp.MpwSc5OGVo/.pants.d"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pants-physical-workdir-base=<dir>",
          "config_key": "pants_physical_workdir_base",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pants-physical-workdir-base=<dir>"
          ],
          "env_var": "PANTS_PHYSICAL_WORKDIR_BASE",
          "help": "When set, a base directory in which to store `--pants-workdir` contents. If this option is a set, the workdir will be created as symlink into a per-workspace subdirectory.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pants-physical-workdir-base"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--pants-physical-workdir-base"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pants-distdir=<dir>",
          "config_key": "pants_distdir",
          "default": "/tmp/tmp.MpwSc5OGVo/dist",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pants-distdir=<dir>"
          ],
          "env_var": "PANTS_DISTDIR",
          "help": "Write end products, such as the results of `./pants package`, to this dir.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pants-distdir"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--pants-distdir"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "/tmp/tmp.MpwSc5OGVo/dist"
              },
              {
                "details": null,
                "rank": "CONFIG_DEFAULT",
                "value": "/tmp/tmp.MpwSc5OGVo/dist"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pants-subprocessdir=<str>",
          "config_key": "pants_subprocessdir",
          "default": "/tmp/tmp.MpwSc5OGVo/.pids",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pants-subprocessdir=<str>"
          ],
          "env_var": "PANTS_SUBPROCESSDIR",
          "help": "The directory to use for tracking subprocess metadata. This should live outside of the dir used by `pants_workdir` to allow for tracking subprocesses that outlive the workdir data.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pants-subprocessdir"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--pants-subprocessdir"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "/tmp/tmp.MpwSc5OGVo/.pids"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pants-config-files=\"['<str>', '<str>', ...]\"",
          "config_key": "pants_config_files",
          "default": [
            "/tmp/tmp.MpwSc5OGVo/pants.toml"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pants-config-files=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_CONFIG_FILES",
          "help": "Paths to Pants config files. This may only be set through the environment variable `PANTS_CONFIG_FILES` and the command line argument `--pants-config-files`; it will be ignored if in a config file like `pants.toml`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pants-config-files"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--pants-config-files"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "/tmp/tmp.MpwSc5OGVo/pants.toml"
                ]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]pantsrc",
          "config_key": "pantsrc",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]pantsrc"
          ],
          "env_var": "PANTS_PANTSRC",
          "help": "Use pantsrc files located at the paths specified in the global option `pantsrc_files`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pantsrc",
            "--no-pantsrc"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--pantsrc",
            "--no-pantsrc"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pantsrc-files=\"[<path>, <path>, ...]\"",
          "config_key": "pantsrc_files",
          "default": [
            "/etc/pantsrc",
            "~/.pants.rc",
            ".pants.rc"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pantsrc-files=\"[<path>, <path>, ...]\""
          ],
          "env_var": "PANTS_PANTSRC_FILES",
          "help": "Override config with values from these files, using syntax matching that of `--pants-config-files`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pantsrc-files"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--pantsrc-files"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "/etc/pantsrc",
                  "~/.pants.rc",
                  ".pants.rc"
                ]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pythonpath=\"['<str>', '<str>', ...]\"",
          "config_key": "pythonpath",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pythonpath=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_PYTHONPATH",
          "help": "Add these directories to PYTHONPATH to search for plugins. This does not impact the PYTHONPATH used by Pants when running your Python code.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pythonpath"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--pythonpath"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]verify-config",
          "config_key": "verify_config",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]verify-config"
          ],
          "env_var": "PANTS_VERIFY_CONFIG",
          "help": "Verify that all config file values correspond to known options.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--verify-config",
            "--no-verify-config"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--verify-config",
            "--no-verify-config"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--stats-record-option-scopes=\"['<str>', '<str>', ...]\"",
          "config_key": "stats_record_option_scopes",
          "default": [
            "*"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--stats-record-option-scopes=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_STATS_RECORD_OPTION_SCOPES",
          "help": "Option scopes to record in stats on run completion. Options may be selected by joining the scope and the option with a ^ character, i.e. to get option `pantsd` in the GLOBAL scope, you'd pass `GLOBAL^pantsd`. Add a '*' to the list to capture all known scopes.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--stats-record-option-scopes"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--stats-record-option-scopes"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "*"
                ]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pants-ignore=\"['<str>', '<str>', ...]\"",
          "config_key": "pants_ignore",
          "default": [
            ".*/",
            "/dist/"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pants-ignore=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_IGNORE",
          "help": "Paths to ignore for all filesystem operations performed by pants (e.g. BUILD file scanning, glob matching, etc). Patterns use the gitignore syntax (https://git-scm.com/docs/gitignore). The `pants_distdir` and `pants_workdir` locations are automatically ignored. `pants_ignore` can be used in tandem with `pants_ignore_use_gitignore`; any rules specified here are applied after rules specified in a .gitignore file.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pants-ignore"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--pants-ignore"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  ".*/",
                  "/dist/"
                ]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]pants-ignore-use-gitignore",
          "config_key": "pants_ignore_use_gitignore",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]pants-ignore-use-gitignore"
          ],
          "env_var": "PANTS_IGNORE_USE_GITIGNORE",
          "help": "Make use of a root .gitignore file when determining whether to ignore filesystem operations performed by Pants. If used together with `--pants-ignore`, any exclude/include patterns specified there apply after .gitignore rules.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pants-ignore-use-gitignore",
            "--no-pants-ignore-use-gitignore"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--pants-ignore-use-gitignore",
            "--no-pants-ignore-use-gitignore"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "-d=<dir>, --logdir=<dir>",
          "config_key": "logdir",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "-d=<dir>",
            "--logdir=<dir>"
          ],
          "env_var": "PANTS_LOGDIR",
          "help": "Write logs to files under this directory.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "-d",
            "--logdir"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "-d",
            "--logdir"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pantsd-timeout-when-multiple-invocations=<float>",
          "config_key": "pantsd_timeout_when_multiple_invocations",
          "default": 60.0,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pantsd-timeout-when-multiple-invocations=<float>"
          ],
          "env_var": "PANTS_PANTSD_TIMEOUT_WHEN_MULTIPLE_INVOCATIONS",
          "help": "The maximum amount of time to wait for the invocation to start until raising a timeout exception. Because pantsd currently does not support parallel runs, any prior running Pants command must be finished for the current one to start. To never timeout, use the value -1.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pantsd-timeout-when-multiple-invocations"
          ],
          "typ": "float",
          "unscoped_cmd_line_args": [
            "--pantsd-timeout-when-multiple-invocations"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": 60.0
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pantsd-max-memory-usage=<memory_size>",
          "config_key": "pantsd_max_memory_usage",
          "default": "1GiB",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pantsd-max-memory-usage=<memory_size>"
          ],
          "env_var": "PANTS_PANTSD_MAX_MEMORY_USAGE",
          "help": "The maximum memory usage of the pantsd process.\n\nWhen the maximum memory is exceeded, the daemon will restart gracefully, although all previous in-memory caching will be lost. Setting too low means that you may miss out on some caching, whereas setting too high may over-consume resources and may result in the operating system killing Pantsd due to memory overconsumption (e.g. via the OOM killer).\n\nYou can suffix with `GiB`, `MiB`, `KiB`, or `B` to indicate the unit, e.g. `2GiB` or `2.12GiB`. A bare number will be in bytes.\n\nThere is at most one pantsd process per workspace.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pantsd-max-memory-usage"
          ],
          "typ": "memory_size",
          "unscoped_cmd_line_args": [
            "--pantsd-max-memory-usage"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": 1073741824
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]print-stacktrace",
          "config_key": "print_stacktrace",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]print-stacktrace"
          ],
          "env_var": "PANTS_PRINT_STACKTRACE",
          "help": "Print the full exception stack trace for any errors.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--print-stacktrace",
            "--no-print-stacktrace"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--print-stacktrace",
            "--no-print-stacktrace"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--engine-visualize-to=<dir_option>",
          "config_key": "engine_visualize_to",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--engine-visualize-to=<dir_option>"
          ],
          "env_var": "PANTS_ENGINE_VISUALIZE_TO",
          "help": "A directory to write execution and rule graphs to as `dot` files. The contents of the directory will be overwritten if any filenames collide.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--engine-visualize-to"
          ],
          "typ": "dir_option",
          "unscoped_cmd_line_args": [
            "--engine-visualize-to"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pantsd-pailgun-port=<int>",
          "config_key": "pantsd_pailgun_port",
          "default": 0,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pantsd-pailgun-port=<int>"
          ],
          "env_var": "PANTS_PANTSD_PAILGUN_PORT",
          "help": "The port to bind the Pants nailgun server to. Defaults to a random port.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pantsd-pailgun-port"
          ],
          "typ": "int",
          "unscoped_cmd_line_args": [
            "--pantsd-pailgun-port"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": 0
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pantsd-invalidation-globs=\"['<str>', '<str>', ...]\"",
          "config_key": "pantsd_invalidation_globs",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pantsd-invalidation-globs=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_PANTSD_INVALIDATION_GLOBS",
          "help": "Filesystem events matching any of these globs will trigger a daemon restart. Pants's own code, plugins, and `--pants-config-files` are inherently invalidated.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pantsd-invalidation-globs"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--pantsd-invalidation-globs"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--rule-threads-core=<int>",
          "config_key": "rule_threads_core",
          "default": "max(2, #cores/2)",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--rule-threads-core=<int>"
          ],
          "env_var": "PANTS_RULE_THREADS_CORE",
          "help": "The number of threads to keep active and ready to execute `@rule` logic (see also: `--rule-threads-max`).\n\nValues less than 2 are not currently supported.\n\nThis value is independent of the number of processes that may be spawned in parallel locally (controlled by `--process-execution-local-parallelism`).",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--rule-threads-core"
          ],
          "typ": "int",
          "unscoped_cmd_line_args": [
            "--rule-threads-core"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": 32
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--rule-threads-max=<int>",
          "config_key": "rule_threads_max",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--rule-threads-max=<int>"
          ],
          "env_var": "PANTS_RULE_THREADS_MAX",
          "help": "The maximum number of threads to use to execute `@rule` logic. Defaults to a small multiple of `--rule-threads-core`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--rule-threads-max"
          ],
          "typ": "int",
          "unscoped_cmd_line_args": [
            "--rule-threads-max"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--local-store-dir=<str>",
          "config_key": "local_store_dir",
          "default": "/home/josh/.cache/pants/lmdb_store",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--local-store-dir=<str>"
          ],
          "env_var": "PANTS_LOCAL_STORE_DIR",
          "help": "Directory to use for the local file store, which stores the results of subprocesses run by Pants.\n\nThe path may be absolute or relative. If the directory is within the build root, be sure to include it in `--pants-ignore`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--local-store-dir"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--local-store-dir"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "/home/josh/.cache/pants/lmdb_store"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--local-store-shard-count=<int>",
          "config_key": "local_store_shard_count",
          "default": 16,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--local-store-shard-count=<int>"
          ],
          "env_var": "PANTS_LOCAL_STORE_SHARD_COUNT",
          "help": "The number of LMDB shards created for the local store. This setting also impacts the maximum size of stored files: see `--local-store-files-max-size-bytes` for more information.\n\nBecause LMDB allows only one simultaneous writer per database, the store is split into multiple shards to allow for more concurrent writers. The faster your disks are, the fewer shards you are likely to need for performance.\n\nNB: After changing this value, you will likely want to manually clear the `--local-store-dir` directory to clear the space used by old shard layouts.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--local-store-shard-count"
          ],
          "typ": "int",
          "unscoped_cmd_line_args": [
            "--local-store-shard-count"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": 16
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--local-store-processes-max-size-bytes=<int>",
          "config_key": "local_store_processes_max_size_bytes",
          "default": 16000000000,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--local-store-processes-max-size-bytes=<int>"
          ],
          "env_var": "PANTS_LOCAL_STORE_PROCESSES_MAX_SIZE_BYTES",
          "help": "The maximum size in bytes of the local store containing process cache entries. Stored below `--local-store-dir`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--local-store-processes-max-size-bytes"
          ],
          "typ": "int",
          "unscoped_cmd_line_args": [
            "--local-store-processes-max-size-bytes"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": 16000000000
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--local-store-files-max-size-bytes=<int>",
          "config_key": "local_store_files_max_size_bytes",
          "default": 256000000000,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--local-store-files-max-size-bytes=<int>"
          ],
          "env_var": "PANTS_LOCAL_STORE_FILES_MAX_SIZE_BYTES",
          "help": "The maximum size in bytes of the local store containing files. Stored below `--local-store-dir`.\n\nNB: This size value bounds the total size of all files, but (due to sharding of the store on disk) it also bounds the per-file size to (VALUE / `--local-store-shard-count`).\n\nThis value doesn't reflect space allocated on disk, or RAM allocated (it may be reflected in VIRT but not RSS). However, the default is lower than you might otherwise choose because macOS creates core dumps that include MMAP'd pages, and setting this too high might cause core dumps to use an unreasonable amount of disk if they are enabled.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--local-store-files-max-size-bytes"
          ],
          "typ": "int",
          "unscoped_cmd_line_args": [
            "--local-store-files-max-size-bytes"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": 256000000000
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--local-store-directories-max-size-bytes=<int>",
          "config_key": "local_store_directories_max_size_bytes",
          "default": 16000000000,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--local-store-directories-max-size-bytes=<int>"
          ],
          "env_var": "PANTS_LOCAL_STORE_DIRECTORIES_MAX_SIZE_BYTES",
          "help": "The maximum size in bytes of the local store containing directories. Stored below `--local-store-dir`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--local-store-directories-max-size-bytes"
          ],
          "typ": "int",
          "unscoped_cmd_line_args": [
            "--local-store-directories-max-size-bytes"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": 16000000000
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--named-caches-dir=<str>",
          "config_key": "named_caches_dir",
          "default": "/home/josh/.cache/pants/named_caches",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--named-caches-dir=<str>"
          ],
          "env_var": "PANTS_NAMED_CACHES_DIR",
          "help": "Directory to use for named global caches for tools and processes with trusted, concurrency-safe caches.\n\nThe path may be absolute or relative. If the directory is within the build root, be sure to include it in `--pants-ignore`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--named-caches-dir"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--named-caches-dir"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "/home/josh/.cache/pants/named_caches"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--local-execution-root-dir=<str>",
          "config_key": "local_execution_root_dir",
          "default": "/tmp",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--local-execution-root-dir=<str>"
          ],
          "env_var": "PANTS_LOCAL_EXECUTION_ROOT_DIR",
          "help": "Directory to use for local process execution sandboxing.\n\nThe path may be absolute or relative. If the directory is within the build root, be sure to include it in `--pants-ignore`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--local-execution-root-dir"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--local-execution-root-dir"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "/tmp"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--ca-certs-path=<str>",
          "config_key": "ca_certs_path",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--ca-certs-path=<str>"
          ],
          "env_var": "PANTS_CA_CERTS_PATH",
          "help": "Path to a file containing PEM-format CA certificates used for verifying secure connections when downloading files required by a build.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--ca-certs-path"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--ca-certs-path"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--process-total-child-memory-usage=<memory_size>",
          "config_key": "process_total_child_memory_usage",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--process-total-child-memory-usage=<memory_size>"
          ],
          "env_var": "PANTS_PROCESS_TOTAL_CHILD_MEMORY_USAGE",
          "help": "The maximum memory usage for all \"pooled\" child processes.\n\nWhen set, this value participates in precomputing the pool size of child processes used by Pants (pooling is currently used only for the JVM). When not set, Pants will default to spawning `2 * --process-execution-local-parallelism` pooled processes.\n\nA high value would result in a high number of child processes spawned, potentially overconsuming your resources and triggering the OS' OOM killer. A low value would mean a low number of child processes launched and therefore less parallelism for the tasks that need those processes.\n\nIf setting this value, consider also adjusting the value of the `--process-per-child-memory-usage` option.\n\nYou can suffix with `GiB`, `MiB`, `KiB`, or `B` to indicate the unit, e.g. `2GiB` or `2.12GiB`. A bare number will be in bytes.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--process-total-child-memory-usage"
          ],
          "typ": "memory_size",
          "unscoped_cmd_line_args": [
            "--process-total-child-memory-usage"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--process-per-child-memory-usage=<memory_size>",
          "config_key": "process_per_child_memory_usage",
          "default": "512MiB",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--process-per-child-memory-usage=<memory_size>"
          ],
          "env_var": "PANTS_PROCESS_PER_CHILD_MEMORY_USAGE",
          "help": "The default memory usage for a single \"pooled\" child process.\n\nCheck the documentation for the `--process-total-child-memory-usage` for advice on how to choose an appropriate value for this option.\n\nYou can suffix with `GiB`, `MiB`, `KiB`, or `B` to indicate the unit, e.g. `2GiB` or `2.12GiB`. A bare number will be in bytes.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--process-per-child-memory-usage"
          ],
          "typ": "memory_size",
          "unscoped_cmd_line_args": [
            "--process-per-child-memory-usage"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": 536870912
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--process-execution-local-parallelism=<int>",
          "config_key": "process_execution_local_parallelism",
          "default": "#cores",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--process-execution-local-parallelism=<int>"
          ],
          "env_var": "PANTS_PROCESS_EXECUTION_LOCAL_PARALLELISM",
          "help": "Number of concurrent processes that may be executed locally.\n\nThis value is independent of the number of threads that may be used to execute the logic in `@rules` (controlled by `--rule-threads-core`).",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--process-execution-local-parallelism"
          ],
          "typ": "int",
          "unscoped_cmd_line_args": [
            "--process-execution-local-parallelism"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": 64
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--process-execution-remote-parallelism=<int>",
          "config_key": "process_execution_remote_parallelism",
          "default": 128,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--process-execution-remote-parallelism=<int>"
          ],
          "env_var": "PANTS_PROCESS_EXECUTION_REMOTE_PARALLELISM",
          "help": "Number of concurrent processes that may be executed remotely.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--process-execution-remote-parallelism"
          ],
          "typ": "int",
          "unscoped_cmd_line_args": [
            "--process-execution-remote-parallelism"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": 128
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--process-execution-cache-namespace=<str>",
          "config_key": "process_execution_cache_namespace",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--process-execution-cache-namespace=<str>"
          ],
          "env_var": "PANTS_PROCESS_EXECUTION_CACHE_NAMESPACE",
          "help": "The cache namespace for process execution. Change this value to invalidate every artifact's execution, or to prevent process cache entries from being (re)used for different usecases or users.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--process-execution-cache-namespace"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--process-execution-cache-namespace"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]process-execution-local-enable-nailgun",
          "config_key": "process_execution_local_enable_nailgun",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]process-execution-local-enable-nailgun"
          ],
          "env_var": "PANTS_PROCESS_EXECUTION_LOCAL_ENABLE_NAILGUN",
          "help": "Whether or not to use nailgun to run JVM requests that are marked as supporting nailgun.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--process-execution-local-enable-nailgun",
            "--no-process-execution-local-enable-nailgun"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--process-execution-local-enable-nailgun",
            "--no-process-execution-local-enable-nailgun"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--process-execution-graceful-shutdown-timeout=<int>",
          "config_key": "process_execution_graceful_shutdown_timeout",
          "default": 3,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--process-execution-graceful-shutdown-timeout=<int>"
          ],
          "env_var": "PANTS_PROCESS_EXECUTION_GRACEFUL_SHUTDOWN_TIMEOUT",
          "help": "The time in seconds to wait when gracefully shutting down an interactive process (such as one opened using `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 run`) before killing it.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--process-execution-graceful-shutdown-timeout"
          ],
          "typ": "int",
          "unscoped_cmd_line_args": [
            "--process-execution-graceful-shutdown-timeout"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": 3
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--remote-instance-name=<str>",
          "config_key": "remote_instance_name",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--remote-instance-name=<str>"
          ],
          "env_var": "PANTS_REMOTE_INSTANCE_NAME",
          "help": "Name of the remote instance to use by remote caching and remote execution.\n\nThis is used by some remote servers for routing. Consult your remote server for whether this should be set.\n\nYou can also use `--remote-auth-plugin` to provide a plugin to dynamically set this value.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--remote-instance-name"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--remote-instance-name"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--remote-ca-certs-path=<str>",
          "config_key": "remote_ca_certs_path",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--remote-ca-certs-path=<str>"
          ],
          "env_var": "PANTS_REMOTE_CA_CERTS_PATH",
          "help": "Path to a PEM file containing CA certificates used for verifying secure connections to `--remote-execution-address` and `--remote-store-address`.\n\nIf unspecified, Pants will attempt to auto-discover root CA certificates when TLS is enabled with remote execution and caching.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--remote-ca-certs-path"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--remote-ca-certs-path"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--remote-oauth-bearer-token-path=<str>",
          "config_key": "remote_oauth_bearer_token_path",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--remote-oauth-bearer-token-path=<str>"
          ],
          "env_var": "PANTS_REMOTE_OAUTH_BEARER_TOKEN_PATH",
          "help": "Path to a file containing an oauth token to use for gGRPC connections to `--remote-execution-address` and `--remote-store-address`.\n\nIf specified, Pants will add a header in the format `authorization: Bearer <token>`. You can also manually add this header via `--remote-execution-headers` and `--remote-store-headers`, or use `--remote-auth-plugin` to provide a plugin to dynamically set the relevant headers. Otherwise, no authorization will be performed.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--remote-oauth-bearer-token-path"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--remote-oauth-bearer-token-path"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--remote-auth-plugin=<str>",
          "config_key": "remote_auth_plugin",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--remote-auth-plugin=<str>"
          ],
          "env_var": "PANTS_REMOTE_AUTH_PLUGIN",
          "help": "Path to a plugin to dynamically configure remote caching and execution options.\n\nFormat: `path.to.module:my_func`. Pants will import your module and run your function. Update the `--pythonpath` option to ensure your file is loadable.\n\nThe function should take the kwargs `initial_store_headers: dict[str, str]`, `initial_execution_headers: dict[str, str]`, `options: Options` (from pants.option.options), `env: dict[str, str]`, and `prior_result: AuthPluginResult | None`. It should return an instance of `AuthPluginResult` from `pants.option.global_options`.\n\nPants will replace the headers it would normally use with whatever your plugin returns; usually, you should include the `initial_store_headers` and `initial_execution_headers` in your result so that options like `--remote-store-headers` still work.\n\nIf you return `instance_name`, Pants will replace `--remote-instance-name` with this value.\n\nIf the returned auth state is `AuthPluginState.UNAVAILABLE`, Pants will disable remote caching and execution.\n\nIf Pantsd is in use, `prior_result` will be the previous `AuthPluginResult` returned by your plugin, which allows you to reuse the result. Otherwise, if Pantsd has been restarted or is not used, the `prior_result` will be `None`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--remote-auth-plugin"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--remote-auth-plugin"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--remote-store-address=<str>",
          "config_key": "remote_store_address",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--remote-store-address=<str>"
          ],
          "env_var": "PANTS_REMOTE_STORE_ADDRESS",
          "help": "The URI of a server used for the remote file store.\n\nFormat: `scheme://host:port`. The supported schemes are `grpc` and `grpcs`, i.e. gRPC with TLS enabled. If `grpc` is used, TLS will be disabled.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--remote-store-address"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--remote-store-address"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--remote-store-headers=\"{'key1': val1, 'key2': val2, ...}\"",
          "config_key": "remote_store_headers",
          "default": {
            "user-agent": "pants/2.12.1"
          },
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--remote-store-headers=\"{'key1': val1, 'key2': val2, ...}\""
          ],
          "env_var": "PANTS_REMOTE_STORE_HEADERS",
          "help": "Headers to set on remote store requests.\n\nFormat: header=value. Pants may add additional headers.\n\nSee `--remote-execution-headers` as well.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--remote-store-headers"
          ],
          "typ": "dict",
          "unscoped_cmd_line_args": [
            "--remote-store-headers"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": {}
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": {
                  "user-agent": "pants/2.12.1"
                }
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--remote-store-chunk-bytes=<int>",
          "config_key": "remote_store_chunk_bytes",
          "default": 1048576,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--remote-store-chunk-bytes=<int>"
          ],
          "env_var": "PANTS_REMOTE_STORE_CHUNK_BYTES",
          "help": "Size in bytes of chunks transferred to/from the remote file store.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--remote-store-chunk-bytes"
          ],
          "typ": "int",
          "unscoped_cmd_line_args": [
            "--remote-store-chunk-bytes"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": 1048576
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--remote-store-chunk-upload-timeout-seconds=<int>",
          "config_key": "remote_store_chunk_upload_timeout_seconds",
          "default": 60,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--remote-store-chunk-upload-timeout-seconds=<int>"
          ],
          "env_var": "PANTS_REMOTE_STORE_CHUNK_UPLOAD_TIMEOUT_SECONDS",
          "help": "Timeout (in seconds) for uploads of individual chunks to the remote file store.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--remote-store-chunk-upload-timeout-seconds"
          ],
          "typ": "int",
          "unscoped_cmd_line_args": [
            "--remote-store-chunk-upload-timeout-seconds"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": 60
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--remote-store-rpc-retries=<int>",
          "config_key": "remote_store_rpc_retries",
          "default": 2,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--remote-store-rpc-retries=<int>"
          ],
          "env_var": "PANTS_REMOTE_STORE_RPC_RETRIES",
          "help": "Number of times to retry any RPC to the remote store before giving up.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--remote-store-rpc-retries"
          ],
          "typ": "int",
          "unscoped_cmd_line_args": [
            "--remote-store-rpc-retries"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": 2
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--remote-store-rpc-concurrency=<int>",
          "config_key": "remote_store_rpc_concurrency",
          "default": 128,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--remote-store-rpc-concurrency=<int>"
          ],
          "env_var": "PANTS_REMOTE_STORE_RPC_CONCURRENCY",
          "help": "The number of concurrent requests allowed to the remote store service.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--remote-store-rpc-concurrency"
          ],
          "typ": "int",
          "unscoped_cmd_line_args": [
            "--remote-store-rpc-concurrency"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": 128
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--remote-store-batch-api-size-limit=<int>",
          "config_key": "remote_store_batch_api_size_limit",
          "default": 4194304,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--remote-store-batch-api-size-limit=<int>"
          ],
          "env_var": "PANTS_REMOTE_STORE_BATCH_API_SIZE_LIMIT",
          "help": "The maximum total size of blobs allowed to be sent in a single batch API call to the remote store.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--remote-store-batch-api-size-limit"
          ],
          "typ": "int",
          "unscoped_cmd_line_args": [
            "--remote-store-batch-api-size-limit"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": 4194304
              }
            ]
          }
        },
        {
          "choices": [
            "ignore",
            "first_only",
            "backoff"
          ],
          "comma_separated_choices": "ignore, first_only, backoff",
          "comma_separated_display_args": "--remote-cache-warnings=<RemoteCacheWarningsBehavior>",
          "config_key": "remote_cache_warnings",
          "default": "backoff",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--remote-cache-warnings=<RemoteCacheWarningsBehavior>"
          ],
          "env_var": "PANTS_REMOTE_CACHE_WARNINGS",
          "help": "How frequently to log remote cache failures at the `warn` log level.\n\nAll errors not logged at the `warn` level will instead be logged at the `debug` level.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--remote-cache-warnings"
          ],
          "typ": "RemoteCacheWarningsBehavior",
          "unscoped_cmd_line_args": [
            "--remote-cache-warnings"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "backoff"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]remote-cache-eager-fetch",
          "config_key": "remote_cache_eager_fetch",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]remote-cache-eager-fetch"
          ],
          "env_var": "PANTS_REMOTE_CACHE_EAGER_FETCH",
          "help": "Eagerly fetch relevant content from the remote store instead of lazily fetching.\n\nThis may result in worse performance, but reduce the frequency of errors encountered by reducing the surface area of when remote caching is used.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--remote-cache-eager-fetch",
            "--no-remote-cache-eager-fetch"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--remote-cache-eager-fetch",
            "--no-remote-cache-eager-fetch"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--remote-cache-rpc-concurrency=<int>",
          "config_key": "remote_cache_rpc_concurrency",
          "default": 128,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--remote-cache-rpc-concurrency=<int>"
          ],
          "env_var": "PANTS_REMOTE_CACHE_RPC_CONCURRENCY",
          "help": "The number of concurrent requests allowed to the remote cache service.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--remote-cache-rpc-concurrency"
          ],
          "typ": "int",
          "unscoped_cmd_line_args": [
            "--remote-cache-rpc-concurrency"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": 128
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--remote-cache-read-timeout-millis=<int>",
          "config_key": "remote_cache_read_timeout_millis",
          "default": 1500,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--remote-cache-read-timeout-millis=<int>"
          ],
          "env_var": "PANTS_REMOTE_CACHE_READ_TIMEOUT_MILLIS",
          "help": "Timeout value for remote cache lookups in milliseconds.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--remote-cache-read-timeout-millis"
          ],
          "typ": "int",
          "unscoped_cmd_line_args": [
            "--remote-cache-read-timeout-millis"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": 1500
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--remote-execution-address=<str>",
          "config_key": "remote_execution_address",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--remote-execution-address=<str>"
          ],
          "env_var": "PANTS_REMOTE_EXECUTION_ADDRESS",
          "help": "The URI of a server used as a remote execution scheduler.\n\nFormat: `scheme://host:port`. The supported schemes are `grpc` and `grpcs`, i.e. gRPC with TLS enabled. If `grpc` is used, TLS will be disabled.\n\nYou must also set `--remote-store-address`, which will often be the same value.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--remote-execution-address"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--remote-execution-address"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--remote-execution-extra-platform-properties=\"['<str>', '<str>', ...]\"",
          "config_key": "remote_execution_extra_platform_properties",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--remote-execution-extra-platform-properties=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_REMOTE_EXECUTION_EXTRA_PLATFORM_PROPERTIES",
          "help": "Platform properties to set on remote execution requests. Format: property=value. Multiple values should be specified as multiple occurrences of this flag. Pants itself may add additional platform properties.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--remote-execution-extra-platform-properties"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--remote-execution-extra-platform-properties"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--remote-execution-headers=\"{'key1': val1, 'key2': val2, ...}\"",
          "config_key": "remote_execution_headers",
          "default": {
            "user-agent": "pants/2.12.1"
          },
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--remote-execution-headers=\"{'key1': val1, 'key2': val2, ...}\""
          ],
          "env_var": "PANTS_REMOTE_EXECUTION_HEADERS",
          "help": "Headers to set on remote execution requests. Format: header=value. Pants may add additional headers.\n\nSee `--remote-store-headers` as well.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--remote-execution-headers"
          ],
          "typ": "dict",
          "unscoped_cmd_line_args": [
            "--remote-execution-headers"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": {}
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": {
                  "user-agent": "pants/2.12.1"
                }
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--remote-execution-overall-deadline-secs=<int>",
          "config_key": "remote_execution_overall_deadline_secs",
          "default": 3600,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--remote-execution-overall-deadline-secs=<int>"
          ],
          "env_var": "PANTS_REMOTE_EXECUTION_OVERALL_DEADLINE_SECS",
          "help": "Overall timeout in seconds for each remote execution request from time of submission",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--remote-execution-overall-deadline-secs"
          ],
          "typ": "int",
          "unscoped_cmd_line_args": [
            "--remote-execution-overall-deadline-secs"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": 3600
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--remote-execution-rpc-concurrency=<int>",
          "config_key": "remote_execution_rpc_concurrency",
          "default": 128,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--remote-execution-rpc-concurrency=<int>"
          ],
          "env_var": "PANTS_REMOTE_EXECUTION_RPC_CONCURRENCY",
          "help": "The number of concurrent requests allowed to the remote execution service.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--remote-execution-rpc-concurrency"
          ],
          "typ": "int",
          "unscoped_cmd_line_args": [
            "--remote-execution-rpc-concurrency"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": 128
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]watch-filesystem",
          "config_key": "watch_filesystem",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]watch-filesystem"
          ],
          "env_var": "PANTS_WATCH_FILESYSTEM",
          "help": "Set to False if Pants should not watch the filesystem for changes. `pantsd` or `loop` may not be enabled.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--watch-filesystem",
            "--no-watch-filesystem"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--watch-filesystem",
            "--no-watch-filesystem"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        },
        {
          "choices": [
            "warn",
            "error"
          ],
          "comma_separated_choices": "warn, error",
          "comma_separated_display_args": "--files-not-found-behavior=<FilesNotFoundBehavior>",
          "config_key": "files_not_found_behavior",
          "default": "warn",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--files-not-found-behavior=<FilesNotFoundBehavior>"
          ],
          "env_var": "PANTS_FILES_NOT_FOUND_BEHAVIOR",
          "help": "What to do when files and globs specified in BUILD files, such as in the `sources` field, cannot be found. This happens when the files do not exist on your machine or when they are ignored by the `--pants-ignore` option.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--files-not-found-behavior"
          ],
          "typ": "FilesNotFoundBehavior",
          "unscoped_cmd_line_args": [
            "--files-not-found-behavior"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "warn"
              }
            ]
          }
        },
        {
          "choices": [
            "ignore",
            "warn",
            "error"
          ],
          "comma_separated_choices": "ignore, warn, error",
          "comma_separated_display_args": "--owners-not-found-behavior=<OwnersNotFoundBehavior>",
          "config_key": "owners_not_found_behavior",
          "default": "error",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--owners-not-found-behavior=<OwnersNotFoundBehavior>"
          ],
          "env_var": "PANTS_OWNERS_NOT_FOUND_BEHAVIOR",
          "help": "What to do when file arguments do not have any owning target. This happens when there are no targets whose `sources` fields include the file argument.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--owners-not-found-behavior"
          ],
          "typ": "OwnersNotFoundBehavior",
          "unscoped_cmd_line_args": [
            "--owners-not-found-behavior"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "error"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--build-patterns=\"['<str>', '<str>', ...]\"",
          "config_key": "build_patterns",
          "default": [
            "BUILD",
            "BUILD.*"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--build-patterns=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_BUILD_PATTERNS",
          "help": "The naming scheme for BUILD files, i.e. where you define targets.\n\nThis only sets the naming scheme, not the directory paths to look for. To add ignore patterns, use the option `[GLOBAL].build_ignore`.\n\nYou may also need to update the option `[tailor].build_file_name` so that it is compatible with this option.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--build-patterns"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--build-patterns"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "BUILD",
                  "BUILD.*"
                ]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--build-ignore=\"['<str>', '<str>', ...]\"",
          "config_key": "build_ignore",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--build-ignore=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_BUILD_IGNORE",
          "help": "Path globs or literals to ignore when identifying BUILD files.\n\nThis does not affect any other filesystem operations; use `--pants-ignore` for that instead.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--build-ignore"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--build-ignore"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--build-file-prelude-globs=\"['<str>', '<str>', ...]\"",
          "config_key": "build_file_prelude_globs",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--build-file-prelude-globs=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_BUILD_FILE_PRELUDE_GLOBS",
          "help": "Python files to evaluate and whose symbols should be exposed to all BUILD files. See https://www.pantsbuild.org/v2.12/docs/macros.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--build-file-prelude-globs"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--build-file-prelude-globs"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--subproject-roots=\"['<str>', '<str>', ...]\"",
          "config_key": "subproject_roots",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--subproject-roots=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_SUBPROJECT_ROOTS",
          "help": "Paths that correspond with build roots for any subproject that this project depends on.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--subproject-roots"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--subproject-roots"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--loop-max=<int>",
          "config_key": "loop_max",
          "default": 4294967296,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--loop-max=<int>"
          ],
          "env_var": "PANTS_LOOP_MAX",
          "help": "The maximum number of times to loop when `--loop` is specified.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--loop-max"
          ],
          "typ": "int",
          "unscoped_cmd_line_args": [
            "--loop-max"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": 4294967296
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--streaming-workunits-report-interval=<float>",
          "config_key": "streaming_workunits_report_interval",
          "default": 1.0,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--streaming-workunits-report-interval=<float>"
          ],
          "env_var": "PANTS_STREAMING_WORKUNITS_REPORT_INTERVAL",
          "help": "Interval in seconds between when streaming workunit event receivers will be polled.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--streaming-workunits-report-interval"
          ],
          "typ": "float",
          "unscoped_cmd_line_args": [
            "--streaming-workunits-report-interval"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": 1.0
              }
            ]
          }
        },
        {
          "choices": [
            "trace",
            "debug",
            "info",
            "warn",
            "error"
          ],
          "comma_separated_choices": "trace, debug, info, warn, error",
          "comma_separated_display_args": "--streaming-workunits-level=<LogLevel>",
          "config_key": "streaming_workunits_level",
          "default": "debug",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--streaming-workunits-level=<LogLevel>"
          ],
          "env_var": "PANTS_STREAMING_WORKUNITS_LEVEL",
          "help": "The level of workunits that will be reported to streaming workunit event receivers.\n\nWorkunits form a tree, and even when workunits are filtered out by this setting, the workunit tree structure will be preserved (by adjusting the parent pointers of the remaining workunits).",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--streaming-workunits-level"
          ],
          "typ": "LogLevel",
          "unscoped_cmd_line_args": [
            "--streaming-workunits-level"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "debug"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]streaming-workunits-complete-async",
          "config_key": "streaming_workunits_complete_async",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]streaming-workunits-complete-async"
          ],
          "env_var": "PANTS_STREAMING_WORKUNITS_COMPLETE_ASYNC",
          "help": "True if stats recording should be allowed to complete asynchronously when `pantsd` is enabled. When `pantsd` is disabled, stats recording is always synchronous. To reduce data loss, this flag defaults to false inside of containers, such as when run with Docker.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--streaming-workunits-complete-async",
            "--no-streaming-workunits-complete-async"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--streaming-workunits-complete-async",
            "--no-streaming-workunits-complete-async"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": [
            "trace",
            "debug",
            "info",
            "warn",
            "error"
          ],
          "comma_separated_choices": "trace, debug, info, warn, error",
          "comma_separated_display_args": "-l=<LogLevel>, --level=<LogLevel>",
          "config_key": "level",
          "default": "info",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "-l=<LogLevel>",
            "--level=<LogLevel>"
          ],
          "env_var": "PANTS_LEVEL",
          "help": "Set the logging level.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "-l",
            "--level"
          ],
          "typ": "LogLevel",
          "unscoped_cmd_line_args": [
            "-l",
            "--level"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "info"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--spec-files=\"['<str>', '<str>', ...]\"",
          "config_key": "spec_files",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--spec-files=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_SPEC_FILES",
          "help": "Read additional specs (target addresses, files, and/or globs), one per line, from these files.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--spec-files"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--spec-files"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]pantsd",
          "config_key": "pantsd",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]pantsd"
          ],
          "env_var": "PANTS_PANTSD",
          "help": "Enables use of the Pants daemon (pantsd). pantsd can significantly improve runtime performance by lowering per-run startup cost, and by memoizing filesystem operations and rule execution.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pantsd",
            "--no-pantsd"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--pantsd",
            "--no-pantsd"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]concurrent",
          "config_key": "concurrent",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]concurrent"
          ],
          "env_var": "PANTS_CONCURRENT",
          "help": "Enable concurrent runs of Pants. Without this enabled, Pants will start up all concurrent invocations (e.g. in other terminals) without pantsd. Enabling this option requires parallel Pants invocations to block on the first.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--concurrent",
            "--no-concurrent"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--concurrent",
            "--no-concurrent"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]local-cache",
          "config_key": "local_cache",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]local-cache"
          ],
          "env_var": "PANTS_LOCAL_CACHE",
          "help": "Whether to cache process executions in a local cache persisted to disk at `--local-store-dir`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--local-cache",
            "--no-local-cache"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--local-cache",
            "--no-local-cache"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]process-cleanup",
          "config_key": "process_cleanup",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]process-cleanup"
          ],
          "env_var": "PANTS_PROCESS_CLEANUP",
          "help": "If false, Pants will not clean up local directories used as chroots for running processes. Pants will log their location so that you can inspect the chroot, and run the `__run.sh` script to recreate the process using the same argv and environment variables used by Pants. This option is useful for debugging.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--process-cleanup",
            "--no-process-cleanup"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--process-cleanup",
            "--no-process-cleanup"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]remote-execution",
          "config_key": "remote_execution",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]remote-execution"
          ],
          "env_var": "PANTS_REMOTE_EXECUTION",
          "help": "Enables remote workers for increased parallelism. (Alpha)\n\nAlternatively, you can use `--remote-cache-read` and `--remote-cache-write` to still run everything locally, but to use a remote cache.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--remote-execution",
            "--no-remote-execution"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--remote-execution",
            "--no-remote-execution"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]remote-cache-read",
          "config_key": "remote_cache_read",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]remote-cache-read"
          ],
          "env_var": "PANTS_REMOTE_CACHE_READ",
          "help": "Whether to enable reading from a remote cache.\n\nThis cannot be used at the same time as `--remote-execution`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--remote-cache-read",
            "--no-remote-cache-read"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--remote-cache-read",
            "--no-remote-cache-read"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]remote-cache-write",
          "config_key": "remote_cache_write",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]remote-cache-write"
          ],
          "env_var": "PANTS_REMOTE_CACHE_WRITE",
          "help": "Whether to enable writing results to a remote cache.\n\nThis cannot be used at the same time as `--remote-execution`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--remote-cache-write",
            "--no-remote-cache-write"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--remote-cache-write",
            "--no-remote-cache-write"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]colors",
          "config_key": "colors",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]colors"
          ],
          "env_var": "PANTS_COLORS",
          "help": "Whether Pants should use colors in output or not. This may also impact whether some tools Pants runs use color.\n\nWhen unset, this value defaults based on whether the output destination supports color.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--colors",
            "--no-colors"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--colors",
            "--no-colors"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]dynamic-ui",
          "config_key": "dynamic_ui",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]dynamic-ui"
          ],
          "env_var": "PANTS_DYNAMIC_UI",
          "help": "Display a dynamically-updating console UI as Pants runs. This is true by default if Pants detects a TTY and there is no 'CI' environment variable indicating that Pants is running in a continuous integration environment.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--dynamic-ui",
            "--no-dynamic-ui"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--dynamic-ui",
            "--no-dynamic-ui"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        },
        {
          "choices": [
            "indicatif-spinner",
            "experimental-prodash"
          ],
          "comma_separated_choices": "indicatif-spinner, experimental-prodash",
          "comma_separated_display_args": "--dynamic-ui-renderer=<DynamicUIRenderer>",
          "config_key": "dynamic_ui_renderer",
          "default": "indicatif-spinner",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--dynamic-ui-renderer=<DynamicUIRenderer>"
          ],
          "env_var": "PANTS_DYNAMIC_UI_RENDERER",
          "help": "If `--dynamic-ui` is enabled, selects the renderer.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--dynamic-ui-renderer"
          ],
          "typ": "DynamicUIRenderer",
          "unscoped_cmd_line_args": [
            "--dynamic-ui-renderer"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "indicatif-spinner"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--tag=\"[[+-]tag1,tag2,..., [+-]tag1,tag2,..., ...]\"",
          "config_key": "tag",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--tag=\"[[+-]tag1,tag2,..., [+-]tag1,tag2,..., ...]\""
          ],
          "env_var": "PANTS_TAG",
          "help": "Include only targets with these tags (optional '+' prefix) or without these tags ('-' prefix). See https://www.pantsbuild.org/v2.12/docs/advanced-target-selection.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--tag"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--tag"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--exclude-target-regexp=\"[<regexp>, <regexp>, ...]\"",
          "config_key": "exclude_target_regexp",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--exclude-target-regexp=\"[<regexp>, <regexp>, ...]\""
          ],
          "env_var": "PANTS_EXCLUDE_TARGET_REGEXP",
          "help": "Exclude targets that match these regexes. This does not impact file arguments.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--exclude-target-regexp"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--exclude-target-regexp"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]loop",
          "config_key": "loop",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]loop"
          ],
          "env_var": "PANTS_LOOP",
          "help": "Run goals continuously as file changes are detected.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--loop",
            "--no-loop"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--loop",
            "--no-loop"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Options to control the overall behavior of Pants.",
      "is_goal": false,
      "provider": "pants.core",
      "scope": ""
    },
    "anonymous-telemetry": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]anonymous-telemetry-enabled",
          "config_key": "enabled",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]anonymous-telemetry-enabled"
          ],
          "env_var": "PANTS_ANONYMOUS_TELEMETRY_ENABLED",
          "help": "Whether to send anonymous telemetry to the Pants project.\n\nTelemetry is sent asynchronously, with silent failure, and does not impact build times or outcomes.\n\nSee https://www.pantsbuild.org/v2.12/docs/anonymous-telemetry for details.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--anonymous-telemetry-enabled",
            "--no-anonymous-telemetry-enabled"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--enabled",
            "--no-enabled"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--anonymous-telemetry-repo-id=<str>",
          "config_key": "repo_id",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--anonymous-telemetry-repo-id=<str>"
          ],
          "env_var": "PANTS_ANONYMOUS_TELEMETRY_REPO_ID",
          "help": "An anonymized ID representing this repo.\n\nFor private repos, you likely want the ID to not be derived from, or algorithmically convertible to, anything identifying the repo.\n\nFor public repos the ID may be visible in that repo's config file, so anonymity of the repo is not guaranteed (although user anonymity is always guaranteed).\n\nSee https://www.pantsbuild.org/v2.12/docs/anonymous-telemetry for details.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--anonymous-telemetry-repo-id"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--repo-id"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        }
      ],
      "basic": [],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Options related to sending anonymous stats to the Pants project, to aid development.",
      "is_goal": false,
      "provider": "pants.core",
      "scope": "anonymous-telemetry"
    },
    "apache-thrift": {
      "advanced": [],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--apache-thrift-thrift-search-paths=\"['<str>', '<str>', ...]\"",
          "config_key": "thrift_search_paths",
          "default": [
            "<PATH>"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--apache-thrift-thrift-search-paths=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_APACHE_THRIFT_THRIFT_SEARCH_PATHS",
          "help": "A list of paths to search for Thrift.\n\nSpecify absolute paths to directories with the `thrift` binary, e.g. `/usr/bin`. Earlier entries will be searched first.\n\nThe special string `\"<PATH>\"` will expand to the contents of the PATH env var.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--apache-thrift-thrift-search-paths"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--thrift-search-paths"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "<PATH>"
                ]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--apache-thrift-expected-version=<str>",
          "config_key": "expected_version",
          "default": "0.15",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--apache-thrift-expected-version=<str>"
          ],
          "env_var": "PANTS_APACHE_THRIFT_EXPECTED_VERSION",
          "help": "The major/minor version of Apache Thrift that you are using, such as `0.15`.\n\nPants will only use Thrift binaries from `--thrift-search-paths` that have the expected version, and it will error if none are found.\n\nDo not include the patch version.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--apache-thrift-expected-version"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--expected-version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "0.15"
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Apache Thrift IDL compiler (https://thrift.apache.org/).",
      "is_goal": false,
      "provider": "pants.backend.codegen.thrift.apache.python",
      "scope": "apache-thrift"
    },
    "autoflake": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--autoflake-version=<str>",
          "config_key": "version",
          "default": "autoflake==1.4",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--autoflake-version=<str>"
          ],
          "env_var": "PANTS_AUTOFLAKE_VERSION",
          "help": "Requirement string for the tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--autoflake-version"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "autoflake==1.4"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--autoflake-extra-requirements=\"['<str>', '<str>', ...]\"",
          "config_key": "extra_requirements",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--autoflake-extra-requirements=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_AUTOFLAKE_EXTRA_REQUIREMENTS",
          "help": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--autoflake-extra-requirements"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--extra-requirements"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--autoflake-interpreter-constraints=\"['<str>', '<str>', ...]\"",
          "config_key": "interpreter_constraints",
          "default": [
            "CPython>=3.7,<4"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--autoflake-interpreter-constraints=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_AUTOFLAKE_INTERPRETER_CONSTRAINTS",
          "help": "Python interpreter constraints for this tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--autoflake-interpreter-constraints"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--interpreter-constraints"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "CPython>=3.7,<4"
                ]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--autoflake-lockfile=<str>",
          "config_key": "lockfile",
          "default": "<default>",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--autoflake-lockfile=<str>"
          ],
          "env_var": "PANTS_AUTOFLAKE_LOCKFILE",
          "help": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.12.1/src/python/pants/backend/python/lint/autoflake/autoflake.lock for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 generate-lockfiles --resolve=autoflake`.\n\nAs explained at https://www.pantsbuild.org/v2.12/docs/python-third-party-dependencies, lockfile generation via `generate-lockfiles` does not always work and you may want to manually generate the lockfile. You will want to set `[python].invalid_lockfile_behavior = 'ignore'` so that Pants does not complain about missing lockfile headers.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--autoflake-lockfile"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--lockfile"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "<default>"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--autoflake-console-script=<str>",
          "config_key": "console_script",
          "default": "autoflake",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--autoflake-console-script=<str>"
          ],
          "env_var": "PANTS_AUTOFLAKE_CONSOLE_SCRIPT",
          "help": "The console script for the tool. Using this option is generally preferable to (and mutually exclusive with) specifying an --entry-point since console script names have a higher expectation of staying stable across releases of the tool. Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--autoflake-console-script"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--console-script"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "autoflake"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--autoflake-entry-point=<str>",
          "config_key": "entry_point",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--autoflake-entry-point=<str>"
          ],
          "env_var": "PANTS_AUTOFLAKE_ENTRY_POINT",
          "help": "The entry point for the tool. Generally you only want to use this option if the tool does not offer a --console-script (which this option is mutually exclusive with). Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--autoflake-entry-point"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--entry-point"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]autoflake-skip",
          "config_key": "skip",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]autoflake-skip"
          ],
          "env_var": "PANTS_AUTOFLAKE_SKIP",
          "help": "Don't use Autoflake when running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 fmt` and `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 lint`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--autoflake-skip",
            "--no-autoflake-skip"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--skip",
            "--no-skip"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--autoflake-args=\"[<shell_str>, <shell_str>, ...]\"",
          "config_key": "args",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--autoflake-args=\"[<shell_str>, <shell_str>, ...]\""
          ],
          "env_var": "PANTS_AUTOFLAKE_ARGS",
          "help": "Arguments to pass directly to Autoflake, e.g. `--autoflake-args='--target-version=py37 --quiet'`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--autoflake-args"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--args"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]autoflake-export",
          "config_key": "export",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]autoflake-export"
          ],
          "env_var": "PANTS_AUTOFLAKE_EXPORT",
          "help": "If true, export a virtual environment with Autoflake when running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 export`.\n\nThis can be useful, for example, with IDE integrations to point your editor to the tool's binary.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--autoflake-export",
            "--no-autoflake-export"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--export",
            "--no-export"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "The Autoflake Python code formatter (https://github.com/myint/autoflake).",
      "is_goal": false,
      "provider": "pants.backend.experimental.python.lint.autoflake",
      "scope": "autoflake"
    },
    "bandit": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--bandit-version=<str>",
          "config_key": "version",
          "default": "bandit>=1.7.0,<1.8",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--bandit-version=<str>"
          ],
          "env_var": "PANTS_BANDIT_VERSION",
          "help": "Requirement string for the tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--bandit-version"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "bandit>=1.7.0,<1.8"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--bandit-extra-requirements=\"['<str>', '<str>', ...]\"",
          "config_key": "extra_requirements",
          "default": [
            "setuptools",
            "GitPython==3.1.18"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--bandit-extra-requirements=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_BANDIT_EXTRA_REQUIREMENTS",
          "help": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--bandit-extra-requirements"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--extra-requirements"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "setuptools",
                  "GitPython==3.1.18"
                ]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--bandit-lockfile=<str>",
          "config_key": "lockfile",
          "default": "<default>",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--bandit-lockfile=<str>"
          ],
          "env_var": "PANTS_BANDIT_LOCKFILE",
          "help": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.12.1/src/python/pants/backend/python/lint/bandit/bandit.lock for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 generate-lockfiles --resolve=bandit`.\n\nAs explained at https://www.pantsbuild.org/v2.12/docs/python-third-party-dependencies, lockfile generation via `generate-lockfiles` does not always work and you may want to manually generate the lockfile. You will want to set `[python].invalid_lockfile_behavior = 'ignore'` so that Pants does not complain about missing lockfile headers.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--bandit-lockfile"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--lockfile"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "<default>"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--bandit-console-script=<str>",
          "config_key": "console_script",
          "default": "bandit",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--bandit-console-script=<str>"
          ],
          "env_var": "PANTS_BANDIT_CONSOLE_SCRIPT",
          "help": "The console script for the tool. Using this option is generally preferable to (and mutually exclusive with) specifying an --entry-point since console script names have a higher expectation of staying stable across releases of the tool. Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--bandit-console-script"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--console-script"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "bandit"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--bandit-entry-point=<str>",
          "config_key": "entry_point",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--bandit-entry-point=<str>"
          ],
          "env_var": "PANTS_BANDIT_ENTRY_POINT",
          "help": "The entry point for the tool. Generally you only want to use this option if the tool does not offer a --console-script (which this option is mutually exclusive with). Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--bandit-entry-point"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--entry-point"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--bandit-config=<file_option>",
          "config_key": "config",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--bandit-config=<file_option>"
          ],
          "env_var": "PANTS_BANDIT_CONFIG",
          "help": "Path to a Bandit YAML config file (https://bandit.readthedocs.io/en/latest/config.html).",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--bandit-config"
          ],
          "typ": "file_option",
          "unscoped_cmd_line_args": [
            "--config"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]bandit-skip",
          "config_key": "skip",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]bandit-skip"
          ],
          "env_var": "PANTS_BANDIT_SKIP",
          "help": "Don't use Bandit when running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 lint`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--bandit-skip",
            "--no-bandit-skip"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--skip",
            "--no-skip"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--bandit-args=\"[<shell_str>, <shell_str>, ...]\"",
          "config_key": "args",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--bandit-args=\"[<shell_str>, <shell_str>, ...]\""
          ],
          "env_var": "PANTS_BANDIT_ARGS",
          "help": "Arguments to pass directly to Bandit, e.g. `--bandit-args='--skip B101,B308 --confidence'`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--bandit-args"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--args"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]bandit-export",
          "config_key": "export",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]bandit-export"
          ],
          "env_var": "PANTS_BANDIT_EXPORT",
          "help": "If true, export a virtual environment with Bandit when running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 export`.\n\nThis can be useful, for example, with IDE integrations to point your editor to the tool's binary.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--bandit-export",
            "--no-bandit-export"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--export",
            "--no-export"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "A tool for finding security issues in Python code (https://bandit.readthedocs.io).",
      "is_goal": false,
      "provider": "pants.backend.python.lint.bandit",
      "scope": "bandit"
    },
    "black": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--black-version=<str>",
          "config_key": "version",
          "default": "black==22.1.0",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--black-version=<str>"
          ],
          "env_var": "PANTS_BLACK_VERSION",
          "help": "Requirement string for the tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--black-version"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "black==22.1.0"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--black-extra-requirements=\"['<str>', '<str>', ...]\"",
          "config_key": "extra_requirements",
          "default": [
            "typing-extensions>=3.10.0.0; python_version < \"3.10\""
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--black-extra-requirements=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_BLACK_EXTRA_REQUIREMENTS",
          "help": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--black-extra-requirements"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--extra-requirements"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "typing-extensions>=3.10.0.0; python_version < \"3.10\""
                ]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--black-interpreter-constraints=\"['<str>', '<str>', ...]\"",
          "config_key": "interpreter_constraints",
          "default": [
            "CPython>=3.7,<4"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--black-interpreter-constraints=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_BLACK_INTERPRETER_CONSTRAINTS",
          "help": "Python interpreter constraints for this tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--black-interpreter-constraints"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--interpreter-constraints"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "CPython>=3.7,<4"
                ]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--black-lockfile=<str>",
          "config_key": "lockfile",
          "default": "<default>",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--black-lockfile=<str>"
          ],
          "env_var": "PANTS_BLACK_LOCKFILE",
          "help": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.12.1/src/python/pants/backend/python/lint/black/black.lock for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 generate-lockfiles --resolve=black`.\n\nAs explained at https://www.pantsbuild.org/v2.12/docs/python-third-party-dependencies, lockfile generation via `generate-lockfiles` does not always work and you may want to manually generate the lockfile. You will want to set `[python].invalid_lockfile_behavior = 'ignore'` so that Pants does not complain about missing lockfile headers.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--black-lockfile"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--lockfile"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "<default>"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--black-console-script=<str>",
          "config_key": "console_script",
          "default": "black",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--black-console-script=<str>"
          ],
          "env_var": "PANTS_BLACK_CONSOLE_SCRIPT",
          "help": "The console script for the tool. Using this option is generally preferable to (and mutually exclusive with) specifying an --entry-point since console script names have a higher expectation of staying stable across releases of the tool. Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--black-console-script"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--console-script"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "black"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--black-entry-point=<str>",
          "config_key": "entry_point",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--black-entry-point=<str>"
          ],
          "env_var": "PANTS_BLACK_ENTRY_POINT",
          "help": "The entry point for the tool. Generally you only want to use this option if the tool does not offer a --console-script (which this option is mutually exclusive with). Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--black-entry-point"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--entry-point"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--black-config=<file_option>",
          "config_key": "config",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--black-config=<file_option>"
          ],
          "env_var": "PANTS_BLACK_CONFIG",
          "help": "Path to a TOML config file understood by Black (https://github.com/psf/black#configuration-format).\n\nSetting this option will disable `[black].config_discovery`. Use this option if the config is located in a non-standard location.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--black-config"
          ],
          "typ": "file_option",
          "unscoped_cmd_line_args": [
            "--config"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]black-config-discovery",
          "config_key": "config_discovery",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]black-config-discovery"
          ],
          "env_var": "PANTS_BLACK_CONFIG_DISCOVERY",
          "help": "If true, Pants will include any relevant pyproject.toml config files during runs.\n\nUse `[black].config` instead if your config is in a non-standard location.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--black-config-discovery",
            "--no-black-config-discovery"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--config-discovery",
            "--no-config-discovery"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]black-skip",
          "config_key": "skip",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]black-skip"
          ],
          "env_var": "PANTS_BLACK_SKIP",
          "help": "Don't use Black when running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 fmt` and `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 lint`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--black-skip",
            "--no-black-skip"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--skip",
            "--no-skip"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--black-args=\"[<shell_str>, <shell_str>, ...]\"",
          "config_key": "args",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--black-args=\"[<shell_str>, <shell_str>, ...]\""
          ],
          "env_var": "PANTS_BLACK_ARGS",
          "help": "Arguments to pass directly to Black, e.g. `--black-args='--target-version=py37 --quiet'`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--black-args"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--args"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]black-export",
          "config_key": "export",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]black-export"
          ],
          "env_var": "PANTS_BLACK_EXPORT",
          "help": "If true, export a virtual environment with Black when running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 export`.\n\nThis can be useful, for example, with IDE integrations to point your editor to the tool's binary.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--black-export",
            "--no-black-export"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--export",
            "--no-export"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "The Black Python code formatter (https://black.readthedocs.io/).",
      "is_goal": false,
      "provider": "pants.core",
      "scope": "black"
    },
    "buf": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--buf-version=<str>",
          "config_key": "version",
          "default": "v1.3.0",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--buf-version=<str>"
          ],
          "env_var": "PANTS_BUF_VERSION",
          "help": "Use this version of Buf.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--buf-version"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "v1.3.0"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--buf-known-versions=\"['<str>', '<str>', ...]\"",
          "config_key": "known_versions",
          "default": [
            "v1.3.0|linux_arm64 |fbfd53c501451b36900247734bfa4cbe86ae05d0f51bc298de8711d5ee374ee5|13940828",
            "v1.3.0|linux_x86_64|e29c4283b1cd68ada41fa493171c41d7605750d258fcd6ecdf692a63fae95213|15267162",
            "v1.3.0|macos_arm64 |147985d7f2816a545792e38b26178ff4027bf16cd3712f6e387a4e3692a16deb|15391890",
            "v1.3.0|macos_x86_64|3b6bd2e5a5dd758178aee01fb067261baf5d31bfebe93336915bfdf7b21928c4|15955291"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--buf-known-versions=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_BUF_KNOWN_VERSIONS",
          "help": "\nKnown versions to verify downloads against.\n\nEach element is a pipe-separated string of `version|platform|sha256|length`, where:\n\n    - `version` is the version string\n    - `platform` is one of [linux_arm64,linux_x86_64,macos_arm64,macos_x86_64],\n    - `sha256` is the 64-character hex representation of the expected sha256\n    digest of the download file, as emitted by `shasum -a 256`\n    - `length` is the expected length of the download file in bytes, as emitted by\n    `wc -c`\n\nE.g., `3.1.2|macos_x86_64|6d0f18cd84b918c7b3edd0203e75569e0c7caecb1367bbbe409b44e28514f5be|42813`.\n\nValues are space-stripped, so pipes can be indented for readability if necessary.\n",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--buf-known-versions"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--known-versions"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "v1.3.0|linux_arm64 |fbfd53c501451b36900247734bfa4cbe86ae05d0f51bc298de8711d5ee374ee5|13940828",
                  "v1.3.0|linux_x86_64|e29c4283b1cd68ada41fa493171c41d7605750d258fcd6ecdf692a63fae95213|15267162",
                  "v1.3.0|macos_arm64 |147985d7f2816a545792e38b26178ff4027bf16cd3712f6e387a4e3692a16deb|15391890",
                  "v1.3.0|macos_x86_64|3b6bd2e5a5dd758178aee01fb067261baf5d31bfebe93336915bfdf7b21928c4|15955291"
                ]
              }
            ]
          }
        },
        {
          "choices": [
            "error",
            "warning"
          ],
          "comma_separated_choices": "error, warning",
          "comma_separated_display_args": "--buf-use-unsupported-version=<UnsupportedVersionUsage>",
          "config_key": "use_unsupported_version",
          "default": "error",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--buf-use-unsupported-version=<UnsupportedVersionUsage>"
          ],
          "env_var": "PANTS_BUF_USE_UNSUPPORTED_VERSION",
          "help": "\nWhat action to take in case the requested version of Buf is not supported.\n\nSupported Buf versions: unspecified\n",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--buf-use-unsupported-version"
          ],
          "typ": "UnsupportedVersionUsage",
          "unscoped_cmd_line_args": [
            "--use-unsupported-version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "error"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--buf-url-template=<str>",
          "config_key": "url_template",
          "default": "https://github.com/bufbuild/buf/releases/download/{version}/buf-{platform}.tar.gz",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--buf-url-template=<str>"
          ],
          "env_var": "PANTS_BUF_URL_TEMPLATE",
          "help": "URL to download the tool, either as a single binary file or a compressed file (e.g. zip file). You can change this to point to your own hosted file, e.g. to work with proxies or for access via the filesystem through a `file:$abspath` URL (e.g. `file:/this/is/absolute`, possibly by [templating the buildroot in a config file](https://www.pantsbuild.org/v2.12/docs/options#config-file-entries)).\n\nUse `{version}` to have the value from --version substituted, and `{platform}` to have a value from --url-platform-mapping substituted in, depending on the current platform. For example, https://github.com/.../protoc-{version}-{platform}.zip.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--buf-url-template"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--url-template"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "https://github.com/bufbuild/buf/releases/download/{version}/buf-{platform}.tar.gz"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--buf-url-platform-mapping=\"{'key1': val1, 'key2': val2, ...}\"",
          "config_key": "url_platform_mapping",
          "default": {
            "linux_arm64": "Linux-aarch64",
            "linux_x86_64": "Linux-x86_64",
            "macos_arm64": "Darwin-arm64",
            "macos_x86_64": "Darwin-x86_64"
          },
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--buf-url-platform-mapping=\"{'key1': val1, 'key2': val2, ...}\""
          ],
          "env_var": "PANTS_BUF_URL_PLATFORM_MAPPING",
          "help": "A dictionary mapping platforms to strings to be used when generating the URL to download the tool.\n\nIn --url-template, anytime the `{platform}` string is used, Pants will determine the current platform, and substitute `{platform}` with the respective value from your dictionary.\n\nFor example, if you define `{\"macos_x86_64\": \"apple-darwin\", \"linux_x86_64\": \"unknown-linux\"}`, and run Pants on Linux with an intel architecture, then `{platform}` will be substituted in the --url-template option with unknown-linux.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--buf-url-platform-mapping"
          ],
          "typ": "dict",
          "unscoped_cmd_line_args": [
            "--url-platform-mapping"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": {}
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": {
                  "linux_arm64": "Linux-aarch64",
                  "linux_x86_64": "Linux-x86_64",
                  "macos_arm64": "Darwin-arm64",
                  "macos_x86_64": "Darwin-x86_64"
                }
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]buf-format-skip",
          "config_key": "format_skip",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]buf-format-skip"
          ],
          "env_var": "PANTS_BUF_FORMAT_SKIP",
          "help": "Don't use Buf when running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 fmt` and `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 lint`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--buf-format-skip",
            "--no-buf-format-skip"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--format-skip",
            "--no-format-skip"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]buf-lint-skip",
          "config_key": "lint_skip",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]buf-lint-skip"
          ],
          "env_var": "PANTS_BUF_LINT_SKIP",
          "help": "Don't use Buf when running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 lint`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--buf-lint-skip",
            "--no-buf-lint-skip"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--lint-skip",
            "--no-lint-skip"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--buf-format-args=\"[<shell_str>, <shell_str>, ...]\"",
          "config_key": "format_args",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--buf-format-args=\"[<shell_str>, <shell_str>, ...]\""
          ],
          "env_var": "PANTS_BUF_FORMAT_ARGS",
          "help": "Arguments to pass directly to Buf, e.g. `--buf-args='--error-format json'`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--buf-format-args"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--format-args"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--buf-lint-args=\"[<shell_str>, <shell_str>, ...]\"",
          "config_key": "lint_args",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--buf-lint-args=\"[<shell_str>, <shell_str>, ...]\""
          ],
          "env_var": "PANTS_BUF_LINT_ARGS",
          "help": "Arguments to pass directly to Buf, e.g. `--buf-args='--error-format json'`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--buf-lint-args"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--lint-args"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "A linter and formatter for Protocol Buffers (https://github.com/bufbuild/buf).",
      "is_goal": false,
      "provider": "pants.backend.codegen.protobuf.lint.buf",
      "scope": "buf"
    },
    "changed": {
      "advanced": [],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--changed-since=<str>",
          "config_key": "since",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--changed-since=<str>"
          ],
          "env_var": "PANTS_CHANGED_SINCE",
          "help": "Calculate changes since this Git spec (commit range/SHA/ref).",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--changed-since"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--since"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--changed-diffspec=<str>",
          "config_key": "diffspec",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--changed-diffspec=<str>"
          ],
          "env_var": "PANTS_CHANGED_DIFFSPEC",
          "help": "Calculate changes contained within a given Git spec (commit range/SHA/ref).",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--changed-diffspec"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--diffspec"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": [
            "none",
            "direct",
            "transitive"
          ],
          "comma_separated_choices": "none, direct, transitive",
          "comma_separated_display_args": "--changed-dependees=<DependeesOption>",
          "config_key": "dependees",
          "default": "none",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--changed-dependees=<DependeesOption>"
          ],
          "env_var": "PANTS_CHANGED_DEPENDEES",
          "help": "Include direct or transitive dependees of changed targets.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--changed-dependees"
          ],
          "typ": "DependeesOption",
          "unscoped_cmd_line_args": [
            "--dependees"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "none"
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Tell Pants to detect what files and targets have changed from Git.\n\nSee https://www.pantsbuild.org/v2.12/docs/advanced-target-selection.",
      "is_goal": false,
      "provider": "",
      "scope": "changed"
    },
    "check": {
      "advanced": [],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--check-only=\"['<str>', '<str>', ...]\"",
          "config_key": "only",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--check-only=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_CHECK_ONLY",
          "help": "Only run these checkerss and skip all others.\n\nThe checkers names are outputted at the final summary of running this goal, e.g. `mypy` and `javac`. You can also run `check --only=fake` to get a list of all activated checkerss.\n\nYou can repeat this option, e.g. `check --only=mypy --only=javac` or `check --only=['mypy', 'javac']`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--check-only"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--only"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Run type checking or the lightest variant of compilation available for a language.",
      "is_goal": true,
      "provider": "pants.core",
      "scope": "check"
    },
    "cli": {
      "advanced": [],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--cli-alias=\"{'key1': val1, 'key2': val2, ...}\"",
          "config_key": "alias",
          "default": {},
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--cli-alias=\"{'key1': val1, 'key2': val2, ...}\""
          ],
          "env_var": "PANTS_CLI_ALIAS",
          "help": "Register command line aliases.\n\nExample:\n\n    [cli.alias]\n    green = \"fmt lint check\"\n    all-changed = \"--changed-since=HEAD --changed-dependees=transitive\"\n\nThis would allow you to run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 green all-changed`, which is shorthand for `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 fmt lint check --changed-since=HEAD --changed-dependees=transitive`.\n\nNotice: this option must be placed in a config file (e.g. `pants.toml` or `pantsrc`) to have any effect.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--cli-alias"
          ],
          "typ": "dict",
          "unscoped_cmd_line_args": [
            "--alias"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": {}
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": {}
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Options for configuring CLI behavior, such as command line aliases.",
      "is_goal": false,
      "provider": "",
      "scope": "cli"
    },
    "count-loc": {
      "advanced": [],
      "basic": [],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Count lines of code.",
      "is_goal": true,
      "provider": "pants.backend.project_info",
      "scope": "count-loc"
    },
    "coursier": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--coursier-version=<str>",
          "config_key": "version",
          "default": "v2.1.0-M5-18-gfebf9838c",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--coursier-version=<str>"
          ],
          "env_var": "PANTS_COURSIER_VERSION",
          "help": "Use this version of coursier.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--coursier-version"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "v2.1.0-M5-18-gfebf9838c"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--coursier-known-versions=\"['<str>', '<str>', ...]\"",
          "config_key": "known_versions",
          "default": [
            "v2.1.0-M5-18-gfebf9838c|linux_arm64 |d4ad15ba711228041ad8a46d848c83c8fbc421d7b01c415d8022074dd609760f|19264005",
            "v2.1.0-M5-18-gfebf9838c|linux_x86_64|3e1a1ad1010d5582e9e43c5a26b273b0147baee5ebd27d3ac1ab61964041c90b|19551533",
            "v2.1.0-M5-18-gfebf9838c|macos_arm64 |d13812c5a5ef4c9b3e25cc046d18addd09bacd149f95b20a14e4d2a73e358ecf|18826510",
            "v2.1.0-M5-18-gfebf9838c|macos_x86_64|d13812c5a5ef4c9b3e25cc046d18addd09bacd149f95b20a14e4d2a73e358ecf|18826510",
            "v2.0.16-169-g194ebc55c|linux_arm64 |da38c97d55967505b8454c20a90370c518044829398b9bce8b637d194d79abb3|18114472",
            "v2.0.16-169-g194ebc55c|linux_x86_64|4c61a634c4bd2773b4543fe0fc32210afd343692891121cddb447204b48672e8|18486946",
            "v2.0.16-169-g194ebc55c|macos_arm64 |15bce235d223ef1d022da30b67b4c64e9228d236b876c834b64e029bbe824c6f|17957182",
            "v2.0.16-169-g194ebc55c|macos_x86_64|15bce235d223ef1d022da30b67b4c64e9228d236b876c834b64e029bbe824c6f|17957182"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--coursier-known-versions=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_COURSIER_KNOWN_VERSIONS",
          "help": "\nKnown versions to verify downloads against.\n\nEach element is a pipe-separated string of `version|platform|sha256|length`, where:\n\n    - `version` is the version string\n    - `platform` is one of [linux_arm64,linux_x86_64,macos_arm64,macos_x86_64],\n    - `sha256` is the 64-character hex representation of the expected sha256\n    digest of the download file, as emitted by `shasum -a 256`\n    - `length` is the expected length of the download file in bytes, as emitted by\n    `wc -c`\n\nE.g., `3.1.2|macos_x86_64|6d0f18cd84b918c7b3edd0203e75569e0c7caecb1367bbbe409b44e28514f5be|42813`.\n\nValues are space-stripped, so pipes can be indented for readability if necessary.\n",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--coursier-known-versions"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--known-versions"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "v2.1.0-M5-18-gfebf9838c|linux_arm64 |d4ad15ba711228041ad8a46d848c83c8fbc421d7b01c415d8022074dd609760f|19264005",
                  "v2.1.0-M5-18-gfebf9838c|linux_x86_64|3e1a1ad1010d5582e9e43c5a26b273b0147baee5ebd27d3ac1ab61964041c90b|19551533",
                  "v2.1.0-M5-18-gfebf9838c|macos_arm64 |d13812c5a5ef4c9b3e25cc046d18addd09bacd149f95b20a14e4d2a73e358ecf|18826510",
                  "v2.1.0-M5-18-gfebf9838c|macos_x86_64|d13812c5a5ef4c9b3e25cc046d18addd09bacd149f95b20a14e4d2a73e358ecf|18826510",
                  "v2.0.16-169-g194ebc55c|linux_arm64 |da38c97d55967505b8454c20a90370c518044829398b9bce8b637d194d79abb3|18114472",
                  "v2.0.16-169-g194ebc55c|linux_x86_64|4c61a634c4bd2773b4543fe0fc32210afd343692891121cddb447204b48672e8|18486946",
                  "v2.0.16-169-g194ebc55c|macos_arm64 |15bce235d223ef1d022da30b67b4c64e9228d236b876c834b64e029bbe824c6f|17957182",
                  "v2.0.16-169-g194ebc55c|macos_x86_64|15bce235d223ef1d022da30b67b4c64e9228d236b876c834b64e029bbe824c6f|17957182"
                ]
              }
            ]
          }
        },
        {
          "choices": [
            "error",
            "warning"
          ],
          "comma_separated_choices": "error, warning",
          "comma_separated_display_args": "--coursier-use-unsupported-version=<UnsupportedVersionUsage>",
          "config_key": "use_unsupported_version",
          "default": "error",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--coursier-use-unsupported-version=<UnsupportedVersionUsage>"
          ],
          "env_var": "PANTS_COURSIER_USE_UNSUPPORTED_VERSION",
          "help": "\nWhat action to take in case the requested version of coursier is not supported.\n\nSupported coursier versions: unspecified\n",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--coursier-use-unsupported-version"
          ],
          "typ": "UnsupportedVersionUsage",
          "unscoped_cmd_line_args": [
            "--use-unsupported-version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "error"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--coursier-url-template=<str>",
          "config_key": "url_template",
          "default": "https://github.com/coursier/coursier/releases/download/{version}/cs-{platform}.gz",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--coursier-url-template=<str>"
          ],
          "env_var": "PANTS_COURSIER_URL_TEMPLATE",
          "help": "URL to download the tool, either as a single binary file or a compressed file (e.g. zip file). You can change this to point to your own hosted file, e.g. to work with proxies or for access via the filesystem through a `file:$abspath` URL (e.g. `file:/this/is/absolute`, possibly by [templating the buildroot in a config file](https://www.pantsbuild.org/v2.12/docs/options#config-file-entries)).\n\nUse `{version}` to have the value from --version substituted, and `{platform}` to have a value from --url-platform-mapping substituted in, depending on the current platform. For example, https://github.com/.../protoc-{version}-{platform}.zip.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--coursier-url-template"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--url-template"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "https://github.com/coursier/coursier/releases/download/{version}/cs-{platform}.gz"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--coursier-url-platform-mapping=\"{'key1': val1, 'key2': val2, ...}\"",
          "config_key": "url_platform_mapping",
          "default": {
            "linux_arm64": "aarch64-pc-linux",
            "linux_x86_64": "x86_64-pc-linux",
            "macos_arm64": "x86_64-apple-darwin",
            "macos_x86_64": "x86_64-apple-darwin"
          },
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--coursier-url-platform-mapping=\"{'key1': val1, 'key2': val2, ...}\""
          ],
          "env_var": "PANTS_COURSIER_URL_PLATFORM_MAPPING",
          "help": "A dictionary mapping platforms to strings to be used when generating the URL to download the tool.\n\nIn --url-template, anytime the `{platform}` string is used, Pants will determine the current platform, and substitute `{platform}` with the respective value from your dictionary.\n\nFor example, if you define `{\"macos_x86_64\": \"apple-darwin\", \"linux_x86_64\": \"unknown-linux\"}`, and run Pants on Linux with an intel architecture, then `{platform}` will be substituted in the --url-template option with unknown-linux.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--coursier-url-platform-mapping"
          ],
          "typ": "dict",
          "unscoped_cmd_line_args": [
            "--url-platform-mapping"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": {}
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": {
                  "linux_arm64": "aarch64-pc-linux",
                  "linux_x86_64": "x86_64-pc-linux",
                  "macos_arm64": "x86_64-apple-darwin",
                  "macos_x86_64": "x86_64-apple-darwin"
                }
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--coursier-repos=\"['<str>', '<str>', ...]\"",
          "config_key": "repos",
          "default": [
            "https://maven-central.storage-download.googleapis.com/maven2",
            "https://repo1.maven.org/maven2"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--coursier-repos=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_COURSIER_REPOS",
          "help": "Maven style repositories to resolve artifacts from.\n\nCoursier will resolve these repositories in the order in which they are specifed, and re-ordering repositories will cause artifacts to be re-downloaded. This can result in artifacts in lockfiles becoming invalid.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--coursier-repos"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--repos"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "https://maven-central.storage-download.googleapis.com/maven2",
                  "https://repo1.maven.org/maven2"
                ]
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "A dependency resolver for the Maven ecosystem. (https://get-coursier.io/)",
      "is_goal": false,
      "provider": "pants.backend.experimental.java",
      "scope": "coursier"
    },
    "coverage-py": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--coverage-py-version=<str>",
          "config_key": "version",
          "default": "coverage[toml]>=5.5,<5.6",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--coverage-py-version=<str>"
          ],
          "env_var": "PANTS_COVERAGE_PY_VERSION",
          "help": "Requirement string for the tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--coverage-py-version"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "coverage[toml]>=5.5,<5.6"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--coverage-py-extra-requirements=\"['<str>', '<str>', ...]\"",
          "config_key": "extra_requirements",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--coverage-py-extra-requirements=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_COVERAGE_PY_EXTRA_REQUIREMENTS",
          "help": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--coverage-py-extra-requirements"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--extra-requirements"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--coverage-py-interpreter-constraints=\"['<str>', '<str>', ...]\"",
          "config_key": "interpreter_constraints",
          "default": [
            "CPython>=3.7,<4"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--coverage-py-interpreter-constraints=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_COVERAGE_PY_INTERPRETER_CONSTRAINTS",
          "help": "Python interpreter constraints for this tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--coverage-py-interpreter-constraints"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--interpreter-constraints"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "CPython>=3.7,<4"
                ]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--coverage-py-lockfile=<str>",
          "config_key": "lockfile",
          "default": "<default>",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--coverage-py-lockfile=<str>"
          ],
          "env_var": "PANTS_COVERAGE_PY_LOCKFILE",
          "help": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.12.1/src/python/pants/backend/python/subsystems/coverage_py.lock for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 generate-lockfiles --resolve=coverage-py`.\n\nAs explained at https://www.pantsbuild.org/v2.12/docs/python-third-party-dependencies, lockfile generation via `generate-lockfiles` does not always work and you may want to manually generate the lockfile. You will want to set `[python].invalid_lockfile_behavior = 'ignore'` so that Pants does not complain about missing lockfile headers.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--coverage-py-lockfile"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--lockfile"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "<default>"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--coverage-py-console-script=<str>",
          "config_key": "console_script",
          "default": "coverage",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--coverage-py-console-script=<str>"
          ],
          "env_var": "PANTS_COVERAGE_PY_CONSOLE_SCRIPT",
          "help": "The console script for the tool. Using this option is generally preferable to (and mutually exclusive with) specifying an --entry-point since console script names have a higher expectation of staying stable across releases of the tool. Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--coverage-py-console-script"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--console-script"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "coverage"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--coverage-py-entry-point=<str>",
          "config_key": "entry_point",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--coverage-py-entry-point=<str>"
          ],
          "env_var": "PANTS_COVERAGE_PY_ENTRY_POINT",
          "help": "The entry point for the tool. Generally you only want to use this option if the tool does not offer a --console-script (which this option is mutually exclusive with). Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--coverage-py-entry-point"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--entry-point"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--coverage-py-output-dir=<str>",
          "config_key": "output_dir",
          "default": "{distdir}/coverage/python",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--coverage-py-output-dir=<str>"
          ],
          "env_var": "PANTS_COVERAGE_PY_OUTPUT_DIR",
          "help": "Path to write the Pytest Coverage report to. Must be relative to the build root.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--coverage-py-output-dir"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--output-dir"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "{distdir}/coverage/python"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--coverage-py-config=<file_option>",
          "config_key": "config",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--coverage-py-config=<file_option>"
          ],
          "env_var": "PANTS_COVERAGE_PY_CONFIG",
          "help": "Path to an INI or TOML config file understood by coverage.py (https://coverage.readthedocs.io/en/stable/config.html).\n\nSetting this option will disable `[coverage-py].config_discovery`. Use this option if the config is located in a non-standard location.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--coverage-py-config"
          ],
          "typ": "file_option",
          "unscoped_cmd_line_args": [
            "--config"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]coverage-py-config-discovery",
          "config_key": "config_discovery",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]coverage-py-config-discovery"
          ],
          "env_var": "PANTS_COVERAGE_PY_CONFIG_DISCOVERY",
          "help": "If true, Pants will include any relevant config files during runs (`.coveragerc`, `setup.cfg`, `tox.ini`, and `pyproject.toml`).\n\nUse `[coverage-py].config` instead if your config is in a non-standard location.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--coverage-py-config-discovery",
            "--no-coverage-py-config-discovery"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--config-discovery",
            "--no-config-discovery"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--coverage-py-filter=\"['<str>', '<str>', ...]\"",
          "config_key": "filter",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--coverage-py-filter=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_COVERAGE_PY_FILTER",
          "help": "A list of Python modules or filesystem paths to use in the coverage report, e.g. `['helloworld_test', 'helloworld/util/dirutil'].\n\nBoth modules and directory paths are recursive: any submodules or child paths, respectively, will be included.\n\nIf you leave this off, the coverage report will include every file in the transitive closure of the address/file arguments; for example, `test ::` will include every Python file in your project, whereas `test project/app_test.py` will include `app_test.py` and any of its transitive dependencies.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--coverage-py-filter"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--filter"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": [
            "console",
            "xml",
            "html",
            "raw",
            "json"
          ],
          "comma_separated_choices": "console, xml, html, raw, json",
          "comma_separated_display_args": "--coverage-py-report=\"[<CoverageReportType>, <CoverageReportType>, ...]\"",
          "config_key": "report",
          "default": [
            "console"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--coverage-py-report=\"[<CoverageReportType>, <CoverageReportType>, ...]\""
          ],
          "env_var": "PANTS_COVERAGE_PY_REPORT",
          "help": "Which coverage report type(s) to emit.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--coverage-py-report"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--report"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "console"
                ]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]coverage-py-global-report",
          "config_key": "global_report",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]coverage-py-global-report"
          ],
          "env_var": "PANTS_COVERAGE_PY_GLOBAL_REPORT",
          "help": "If true, Pants will generate a global coverage report.\n\nThe global report will include all Python source files in the workspace and not just those depended on by the tests that were run.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--coverage-py-global-report",
            "--no-coverage-py-global-report"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--global-report",
            "--no-global-report"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--coverage-py-fail-under=<float>",
          "config_key": "fail_under",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--coverage-py-fail-under=<float>"
          ],
          "env_var": "PANTS_COVERAGE_PY_FAIL_UNDER",
          "help": "Fail if the total combined coverage percentage for all tests is less than this number.\n\nUse this instead of setting fail_under in a coverage.py config file, as the config will apply to each test separately, while you typically want this to apply to the combined coverage for all tests run.\n\nNote that you must generate at least one (non-raw) coverage report for this check to trigger.\n\nNote also that if you specify a non-integral value, you must also set [report] precision properly in the coverage.py config file to make use of the decimal places. See https://coverage.readthedocs.io/en/latest/config.html.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--coverage-py-fail-under"
          ],
          "typ": "float",
          "unscoped_cmd_line_args": [
            "--fail-under"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Configuration for Python test coverage measurement.",
      "is_goal": false,
      "provider": "pants.backend.python",
      "scope": "coverage-py"
    },
    "dependees": {
      "advanced": [],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--dependees-output-file=<path>",
          "config_key": "output_file",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--dependees-output-file=<path>"
          ],
          "env_var": "PANTS_DEPENDEES_OUTPUT_FILE",
          "help": "Output the goal's stdout to this file. If unspecified, outputs to stdout.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--dependees-output-file"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--output-file"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--dependees-sep=<separator>",
          "config_key": "sep",
          "default": "\\n",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--dependees-sep=<separator>"
          ],
          "env_var": "PANTS_DEPENDEES_SEP",
          "help": "String to use to separate lines in line-oriented output.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--dependees-sep"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--sep"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "\\n"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]dependees-transitive",
          "config_key": "transitive",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]dependees-transitive"
          ],
          "env_var": "PANTS_DEPENDEES_TRANSITIVE",
          "help": "List all transitive dependees. If unspecified, list direct dependees only.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--dependees-transitive",
            "--no-dependees-transitive"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--transitive",
            "--no-transitive"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]dependees-closed",
          "config_key": "closed",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]dependees-closed"
          ],
          "env_var": "PANTS_DEPENDEES_CLOSED",
          "help": "Include the input targets in the output, along with the dependees.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--dependees-closed",
            "--no-dependees-closed"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--closed",
            "--no-closed"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "List all targets that depend on any of the input files/targets.",
      "is_goal": true,
      "provider": "pants.backend.project_info",
      "scope": "dependees"
    },
    "dependencies": {
      "advanced": [],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--dependencies-output-file=<path>",
          "config_key": "output_file",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--dependencies-output-file=<path>"
          ],
          "env_var": "PANTS_DEPENDENCIES_OUTPUT_FILE",
          "help": "Output the goal's stdout to this file. If unspecified, outputs to stdout.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--dependencies-output-file"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--output-file"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--dependencies-sep=<separator>",
          "config_key": "sep",
          "default": "\\n",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--dependencies-sep=<separator>"
          ],
          "env_var": "PANTS_DEPENDENCIES_SEP",
          "help": "String to use to separate lines in line-oriented output.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--dependencies-sep"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--sep"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "\\n"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]dependencies-transitive",
          "config_key": "transitive",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]dependencies-transitive"
          ],
          "env_var": "PANTS_DEPENDENCIES_TRANSITIVE",
          "help": "List all transitive dependencies. If unspecified, list direct dependencies only.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--dependencies-transitive",
            "--no-dependencies-transitive"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--transitive",
            "--no-transitive"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]dependencies-closed",
          "config_key": "closed",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]dependencies-closed"
          ],
          "env_var": "PANTS_DEPENDENCIES_CLOSED",
          "help": "Include the input targets in the output, along with the dependencies.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--dependencies-closed",
            "--no-dependencies-closed"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--closed",
            "--no-closed"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "List the dependencies of the input files/targets.",
      "is_goal": true,
      "provider": "pants.backend.project_info",
      "scope": "dependencies"
    },
    "docformatter": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--docformatter-version=<str>",
          "config_key": "version",
          "default": "docformatter>=1.4,<1.5",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--docformatter-version=<str>"
          ],
          "env_var": "PANTS_DOCFORMATTER_VERSION",
          "help": "Requirement string for the tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--docformatter-version"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "docformatter>=1.4,<1.5"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--docformatter-extra-requirements=\"['<str>', '<str>', ...]\"",
          "config_key": "extra_requirements",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--docformatter-extra-requirements=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_DOCFORMATTER_EXTRA_REQUIREMENTS",
          "help": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--docformatter-extra-requirements"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--extra-requirements"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--docformatter-interpreter-constraints=\"['<str>', '<str>', ...]\"",
          "config_key": "interpreter_constraints",
          "default": [
            "CPython>=3.7,<4"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--docformatter-interpreter-constraints=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_DOCFORMATTER_INTERPRETER_CONSTRAINTS",
          "help": "Python interpreter constraints for this tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--docformatter-interpreter-constraints"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--interpreter-constraints"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "CPython>=3.7,<4"
                ]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--docformatter-lockfile=<str>",
          "config_key": "lockfile",
          "default": "<default>",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--docformatter-lockfile=<str>"
          ],
          "env_var": "PANTS_DOCFORMATTER_LOCKFILE",
          "help": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.12.1/src/python/pants/backend/python/lint/docformatter/docformatter.lock for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 generate-lockfiles --resolve=docformatter`.\n\nAs explained at https://www.pantsbuild.org/v2.12/docs/python-third-party-dependencies, lockfile generation via `generate-lockfiles` does not always work and you may want to manually generate the lockfile. You will want to set `[python].invalid_lockfile_behavior = 'ignore'` so that Pants does not complain about missing lockfile headers.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--docformatter-lockfile"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--lockfile"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "<default>"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--docformatter-console-script=<str>",
          "config_key": "console_script",
          "default": "docformatter",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--docformatter-console-script=<str>"
          ],
          "env_var": "PANTS_DOCFORMATTER_CONSOLE_SCRIPT",
          "help": "The console script for the tool. Using this option is generally preferable to (and mutually exclusive with) specifying an --entry-point since console script names have a higher expectation of staying stable across releases of the tool. Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--docformatter-console-script"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--console-script"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "docformatter"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--docformatter-entry-point=<str>",
          "config_key": "entry_point",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--docformatter-entry-point=<str>"
          ],
          "env_var": "PANTS_DOCFORMATTER_ENTRY_POINT",
          "help": "The entry point for the tool. Generally you only want to use this option if the tool does not offer a --console-script (which this option is mutually exclusive with). Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--docformatter-entry-point"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--entry-point"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]docformatter-skip",
          "config_key": "skip",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]docformatter-skip"
          ],
          "env_var": "PANTS_DOCFORMATTER_SKIP",
          "help": "Don't use docformatter when running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 fmt` and `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 lint`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--docformatter-skip",
            "--no-docformatter-skip"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--skip",
            "--no-skip"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--docformatter-args=\"[<shell_str>, <shell_str>, ...]\"",
          "config_key": "args",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--docformatter-args=\"[<shell_str>, <shell_str>, ...]\""
          ],
          "env_var": "PANTS_DOCFORMATTER_ARGS",
          "help": "Arguments to pass directly to docformatter, e.g. `--docformatter-args='--wrap-summaries=100 --pre-summary-newline'`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--docformatter-args"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--args"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]docformatter-export",
          "config_key": "export",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]docformatter-export"
          ],
          "env_var": "PANTS_DOCFORMATTER_EXPORT",
          "help": "If true, export a virtual environment with docformatter when running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 export`.\n\nThis can be useful, for example, with IDE integrations to point your editor to the tool's binary.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--docformatter-export",
            "--no-docformatter-export"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--export",
            "--no-export"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "The Python docformatter tool (https://github.com/myint/docformatter).",
      "is_goal": false,
      "provider": "pants.backend.python.lint.docformatter",
      "scope": "docformatter"
    },
    "docker": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--docker-env-vars=\"[<shell_str>, <shell_str>, ...]\"",
          "config_key": "env_vars",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--docker-env-vars=\"[<shell_str>, <shell_str>, ...]\""
          ],
          "env_var": "PANTS_DOCKER_ENV_VARS",
          "help": "Environment variables to set for `docker` invocations.\n\nEntries are either strings in the form `ENV_VAR=value` to set an explicit value; or just `ENV_VAR` to copy the value from Pants's own environment.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--docker-env-vars"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--env-vars"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--docker-executable-search-paths=\"[<binary-paths>, <binary-paths>, ...]\"",
          "config_key": "executable_search_paths",
          "default": [
            "<PATH>"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--docker-executable-search-paths=\"[<binary-paths>, <binary-paths>, ...]\""
          ],
          "env_var": "PANTS_DOCKER_EXECUTABLE_SEARCH_PATHS",
          "help": "The PATH value that will be used to find the Docker client and any tools required.\n\nThe special string `\"<PATH>\"` will expand to the contents of the PATH env var.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--docker-executable-search-paths"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--executable-search-paths"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "<PATH>"
                ]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--docker-tools=\"['<str>', '<str>', ...]\"",
          "config_key": "tools",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--docker-tools=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_DOCKER_TOOLS",
          "help": "List any additional executable tools required for Docker to work. The paths to these tools will be included in the PATH used in the execution sandbox, so that they may be used by the Docker client.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--docker-tools"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--tools"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--docker-registries=\"{'key1': val1, 'key2': val2, ...}\"",
          "config_key": "registries",
          "default": {},
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--docker-registries=\"{'key1': val1, 'key2': val2, ...}\""
          ],
          "env_var": "PANTS_DOCKER_REGISTRIES",
          "help": "Configure Docker registries. The schema for a registry entry is as follows:\n\n    {\n        \"registry-alias\": {\n            \"address\": \"registry-domain:port\",\n            \"default\": bool,\n            \"extra_image_tags\": [],\n            \"skip_push\": bool,\n        },\n        ...\n    }\n\nIf no registries are provided in a `docker_image` target, then all default addresses will be used, if any.\n\nThe `docker_image.registries` may be provided with a list of registry addresses and registry aliases prefixed with `@` to be used instead of the defaults.\n\nA configured registry is marked as default either by setting `default = true` or with an alias of `\"default\"`.\n\nA `docker_image` may be pushed to a subset of registries using the per registry `skip_push` option rather then the all or nothing toggle of the field option `skip_push` on the `docker_image` target.\n\nAny image tags that should only be added for specific registries may be provided as the `extra_image_tags` option. The tags may use value formatting the same as for the `image_tags` field of the `docker_image` target.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--docker-registries"
          ],
          "typ": "dict",
          "unscoped_cmd_line_args": [
            "--registries"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": {}
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": {}
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--docker-default-repository=<str>",
          "config_key": "default_repository",
          "default": "{name}",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--docker-default-repository=<str>"
          ],
          "env_var": "PANTS_DOCKER_DEFAULT_REPOSITORY",
          "help": "Configure the default repository name used in the Docker image tag.\n\nThe value is formatted and may reference these variables (in addition to the normal placeheolders derived from the Dockerfile and build args etc):\n\n  * name\n  * directory\n  * parent_directory\n\nExample: `--default-repository=\"{directory}/{name}\"`.\n\nThe `name` variable is the `docker_image`'s target name, `directory` and `parent_directory` are the name of the directory in which the BUILD file is for the target, and its parent directory respectively.\n\nUse the `repository` field to set this value directly on a `docker_image` target.\n\nAny registries or tags are added to the image name as required, and should not be part of the repository name.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--docker-default-repository"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--default-repository"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "{name}"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--docker-default-context-root=<workspace_path>",
          "config_key": "default_context_root",
          "default": "",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--docker-default-context-root=<workspace_path>"
          ],
          "env_var": "PANTS_DOCKER_DEFAULT_CONTEXT_ROOT",
          "help": "Provide a default Docker build context root path for `docker_image` targets that does not specify their own `context_root` field.\n\nThe context root is relative to the build root by default, but may be prefixed with `./` to be relative to the directory of the BUILD file of the `docker_image`.\n\nExamples:\n\n    --default-context-root=src/docker\n    --default-context-root=./relative_to_the_build_file",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--docker-default-context-root"
          ],
          "typ": "workspace_path",
          "unscoped_cmd_line_args": [
            "--default-context-root"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": ""
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--docker-build-args=\"[<shell_str>, <shell_str>, ...]\"",
          "config_key": "build_args",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--docker-build-args=\"[<shell_str>, <shell_str>, ...]\""
          ],
          "env_var": "PANTS_DOCKER_BUILD_ARGS",
          "help": "Global build arguments (for Docker `--build-arg` options) to use for all `docker build` invocations.\n\nEntries are either strings in the form `ARG_NAME=value` to set an explicit value; or just `ARG_NAME` to copy the value from Pants's own environment.\n\nExample:\n\n    [docker]\n    build_args = [\"VAR1=value\", \"VAR2\"]\n\nUse the `extra_build_args` field on a `docker_image` target for additional image specific build arguments.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--docker-build-args"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--build-args"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--docker-build-target-stage=<str>",
          "config_key": "build_target_stage",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--docker-build-target-stage=<str>"
          ],
          "env_var": "PANTS_DOCKER_BUILD_TARGET_STAGE",
          "help": "Global default value for `target_stage` on `docker_image` targets, overriding the field value on the targets, if there is a matching stage in the `Dockerfile`.\n\nThis is useful to provide from the command line, to specify the target stage to build for at execution time.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--docker-build-target-stage"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--build-target-stage"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]docker-build-verbose",
          "config_key": "build_verbose",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]docker-build-verbose"
          ],
          "env_var": "PANTS_DOCKER_BUILD_VERBOSE",
          "help": "Whether to log the Docker output to the console. If false, only the image ID is logged.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--docker-build-verbose",
            "--no-docker-build-verbose"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--build-verbose",
            "--no-build-verbose"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--docker-run-args=\"[<shell_str>, <shell_str>, ...]\"",
          "config_key": "run_args",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--docker-run-args=\"[<shell_str>, <shell_str>, ...]\""
          ],
          "env_var": "PANTS_DOCKER_RUN_ARGS",
          "help": "Additional arguments to use for `docker run` invocations.\n\nExample:\n\n    $ /home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 run --docker-run-args=\"-p 127.0.0.1:80:8080/tcp --name demo\" src/example:image -- [image entrypoint args]\n\nTo provide the top-level options to the `docker` client, use `[docker].env_vars` to configure the [Environment variables](https://docs.docker.com/engine/reference/commandline/cli/#environment-variables) as appropriate.\n\nThe arguments for the image entrypoint may be passed on the command line after a double dash (`--`), or using the `--run-args` option.\n\nDefaults to `--interactive --tty` when stdout is connected to a terminal.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--docker-run-args"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--run-args"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Options for interacting with Docker.",
      "is_goal": false,
      "provider": "pants.backend.docker",
      "scope": "docker"
    },
    "dockerfile-parser": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--dockerfile-parser-version=<str>",
          "config_key": "version",
          "default": "dockerfile==3.2.0",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--dockerfile-parser-version=<str>"
          ],
          "env_var": "PANTS_DOCKERFILE_PARSER_VERSION",
          "help": "Requirement string for the tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--dockerfile-parser-version"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "dockerfile==3.2.0"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--dockerfile-parser-extra-requirements=\"['<str>', '<str>', ...]\"",
          "config_key": "extra_requirements",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--dockerfile-parser-extra-requirements=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_DOCKERFILE_PARSER_EXTRA_REQUIREMENTS",
          "help": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--dockerfile-parser-extra-requirements"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--extra-requirements"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--dockerfile-parser-interpreter-constraints=\"['<str>', '<str>', ...]\"",
          "config_key": "interpreter_constraints",
          "default": [
            "CPython>=3.7,<4"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--dockerfile-parser-interpreter-constraints=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_DOCKERFILE_PARSER_INTERPRETER_CONSTRAINTS",
          "help": "Python interpreter constraints for this tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--dockerfile-parser-interpreter-constraints"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--interpreter-constraints"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "CPython>=3.7,<4"
                ]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--dockerfile-parser-lockfile=<str>",
          "config_key": "lockfile",
          "default": "<default>",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--dockerfile-parser-lockfile=<str>"
          ],
          "env_var": "PANTS_DOCKERFILE_PARSER_LOCKFILE",
          "help": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.12.1/src/python/pants/backend/docker/subsystems/dockerfile.lock for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 generate-lockfiles --resolve=dockerfile-parser`.\n\nAs explained at https://www.pantsbuild.org/v2.12/docs/python-third-party-dependencies, lockfile generation via `generate-lockfiles` does not always work and you may want to manually generate the lockfile. You will want to set `[python].invalid_lockfile_behavior = 'ignore'` so that Pants does not complain about missing lockfile headers.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--dockerfile-parser-lockfile"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--lockfile"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "<default>"
              }
            ]
          }
        }
      ],
      "basic": [],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Used to parse Dockerfile build specs to infer their dependencies.",
      "is_goal": false,
      "provider": "pants.backend.docker",
      "scope": "dockerfile-parser"
    },
    "download-terraform": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--download-terraform-version=<str>",
          "config_key": "version",
          "default": "1.0.7",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--download-terraform-version=<str>"
          ],
          "env_var": "PANTS_DOWNLOAD_TERRAFORM_VERSION",
          "help": "Use this version of terraform.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--download-terraform-version"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "1.0.7"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--download-terraform-known-versions=\"['<str>', '<str>', ...]\"",
          "config_key": "known_versions",
          "default": [
            "1.0.7|macos_arm64 |cbab9aca5bc4e604565697355eed185bb699733811374761b92000cc188a7725|32071346",
            "1.0.7|macos_x86_64|80ae021d6143c7f7cbf4571f65595d154561a2a25fd934b7a8ccc1ebf3014b9b|33020029",
            "1.0.7|linux_x86_64|bc79e47649e2529049a356f9e60e06b47462bf6743534a10a4c16594f443be7b|32671441"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--download-terraform-known-versions=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_DOWNLOAD_TERRAFORM_KNOWN_VERSIONS",
          "help": "\nKnown versions to verify downloads against.\n\nEach element is a pipe-separated string of `version|platform|sha256|length`, where:\n\n    - `version` is the version string\n    - `platform` is one of [linux_arm64,linux_x86_64,macos_arm64,macos_x86_64],\n    - `sha256` is the 64-character hex representation of the expected sha256\n    digest of the download file, as emitted by `shasum -a 256`\n    - `length` is the expected length of the download file in bytes, as emitted by\n    `wc -c`\n\nE.g., `3.1.2|macos_x86_64|6d0f18cd84b918c7b3edd0203e75569e0c7caecb1367bbbe409b44e28514f5be|42813`.\n\nValues are space-stripped, so pipes can be indented for readability if necessary.\n",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--download-terraform-known-versions"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--known-versions"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "1.0.7|macos_arm64 |cbab9aca5bc4e604565697355eed185bb699733811374761b92000cc188a7725|32071346",
                  "1.0.7|macos_x86_64|80ae021d6143c7f7cbf4571f65595d154561a2a25fd934b7a8ccc1ebf3014b9b|33020029",
                  "1.0.7|linux_x86_64|bc79e47649e2529049a356f9e60e06b47462bf6743534a10a4c16594f443be7b|32671441"
                ]
              }
            ]
          }
        },
        {
          "choices": [
            "error",
            "warning"
          ],
          "comma_separated_choices": "error, warning",
          "comma_separated_display_args": "--download-terraform-use-unsupported-version=<UnsupportedVersionUsage>",
          "config_key": "use_unsupported_version",
          "default": "error",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--download-terraform-use-unsupported-version=<UnsupportedVersionUsage>"
          ],
          "env_var": "PANTS_DOWNLOAD_TERRAFORM_USE_UNSUPPORTED_VERSION",
          "help": "\nWhat action to take in case the requested version of terraform is not supported.\n\nSupported terraform versions: unspecified\n",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--download-terraform-use-unsupported-version"
          ],
          "typ": "UnsupportedVersionUsage",
          "unscoped_cmd_line_args": [
            "--use-unsupported-version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "error"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--download-terraform-url-template=<str>",
          "config_key": "url_template",
          "default": "https://releases.hashicorp.com/terraform/{version}/terraform_{version}_{platform}.zip",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--download-terraform-url-template=<str>"
          ],
          "env_var": "PANTS_DOWNLOAD_TERRAFORM_URL_TEMPLATE",
          "help": "URL to download the tool, either as a single binary file or a compressed file (e.g. zip file). You can change this to point to your own hosted file, e.g. to work with proxies or for access via the filesystem through a `file:$abspath` URL (e.g. `file:/this/is/absolute`, possibly by [templating the buildroot in a config file](https://www.pantsbuild.org/v2.12/docs/options#config-file-entries)).\n\nUse `{version}` to have the value from --version substituted, and `{platform}` to have a value from --url-platform-mapping substituted in, depending on the current platform. For example, https://github.com/.../protoc-{version}-{platform}.zip.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--download-terraform-url-template"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--url-template"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "https://releases.hashicorp.com/terraform/{version}/terraform_{version}_{platform}.zip"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--download-terraform-url-platform-mapping=\"{'key1': val1, 'key2': val2, ...}\"",
          "config_key": "url_platform_mapping",
          "default": {
            "linux_x86_64": "linux_amd64",
            "macos_arm64": "darwin_arm64",
            "macos_x86_64": "darwin_amd64"
          },
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--download-terraform-url-platform-mapping=\"{'key1': val1, 'key2': val2, ...}\""
          ],
          "env_var": "PANTS_DOWNLOAD_TERRAFORM_URL_PLATFORM_MAPPING",
          "help": "A dictionary mapping platforms to strings to be used when generating the URL to download the tool.\n\nIn --url-template, anytime the `{platform}` string is used, Pants will determine the current platform, and substitute `{platform}` with the respective value from your dictionary.\n\nFor example, if you define `{\"macos_x86_64\": \"apple-darwin\", \"linux_x86_64\": \"unknown-linux\"}`, and run Pants on Linux with an intel architecture, then `{platform}` will be substituted in the --url-template option with unknown-linux.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--download-terraform-url-platform-mapping"
          ],
          "typ": "dict",
          "unscoped_cmd_line_args": [
            "--url-platform-mapping"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": {}
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": {
                  "linux_x86_64": "linux_amd64",
                  "macos_arm64": "darwin_arm64",
                  "macos_x86_64": "darwin_amd64"
                }
              }
            ]
          }
        }
      ],
      "basic": [],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Terraform (https://terraform.io)",
      "is_goal": false,
      "provider": "pants.backend.experimental.terraform",
      "scope": "download-terraform"
    },
    "experimental-bsp": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]experimental-bsp-server",
          "config_key": "server",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]experimental-bsp-server"
          ],
          "env_var": "PANTS_EXPERIMENTAL_BSP_SERVER",
          "help": "Run the Build Server Protocol server. Pants will receive BSP RPC requests via the console. This should only ever be invoked via the IDE.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--experimental-bsp-server",
            "--no-experimental-bsp-server"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--server",
            "--no-server"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--experimental-bsp-runner-env-vars=\"['<str>', '<str>', ...]\"",
          "config_key": "runner_env_vars",
          "default": [
            "PATH"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--experimental-bsp-runner-env-vars=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_EXPERIMENTAL_BSP_RUNNER_ENV_VARS",
          "help": "Environment variables to set in the BSP runner script when setting up BSP in a repository. Entries are either strings in the form `ENV_VAR=value` to set an explicit value; or just `ENV_VAR` to copy the value from Pants' own environment when the experimental-bsp goal was run.\n\nThis option only takes effect when the BSP runner script is written. If the option changes, you must run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 experimental-bsp` again to write a new copy of the BSP runner script.\n\nNote: The environment variables passed to the Pants BSP server will be those set for your IDE and not your shell. For example, on macOS, the IDE is generally launched by `launchd` after clicking on a Dock icon, and not from the shell. Thus, any environment variables set for your shell will likely not be seen by the Pants BSP server. At the very least, on macOS consider writing an explicit PATH into the BSP runner script via this option.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--experimental-bsp-runner-env-vars"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--runner-env-vars"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "PATH"
                ]
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--experimental-bsp-groups-config-files=\"[<file_option>, <file_option>, ...]\"",
          "config_key": "groups_config_files",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--experimental-bsp-groups-config-files=\"[<file_option>, <file_option>, ...]\""
          ],
          "env_var": "PANTS_EXPERIMENTAL_BSP_GROUPS_CONFIG_FILES",
          "help": "A list of config files that define groups of Pants targets to expose to IDEs via Build Server Protocol.\n\nPants generally uses fine-grained targets to define the components of a build (in many cases on a file-by-file basis). Many IDEs, however, favor coarse-grained targets that contain large numbers of source files. To accommodate this distinction, the Pants BSP server will compute a set of BSP build targets to use from the groups specified in the config files set for this option. Each group will become one or more BSP build targets.\n\nEach config file is a TOML file with a `groups` dictionary with the following format for an entry:\n\n    # The dictionary key is used to identify the group. It must be unique.\n    [groups.ID1]:\n    # One or more Pants address specs defining what targets to include in the group.\n    addresses = [\n      \"src/jvm::\",\n      \"tests/jvm::\",\n    ]\n    # Filter targets to a specific resolve. Targets in a group must be from a single resolve.\n    # Format of filter is `TYPE:RESOLVE_NAME`. The only supported TYPE is `jvm`. RESOLVE_NAME must be\n    # a valid resolve name.\n    resolve = \"jvm:jvm-default\"\n    display_name = \"Display Name\" # (Optional) Name shown to the user in the IDE.\n    base_directory = \"path/from/build/root\" # (Optional) Hint to the IDE for where the build target should \"live.\"\n\nPants will merge the contents of the config files together. If the same ID is used for a group definition, in multiple config files, the definition in the latter config file will take effect.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--experimental-bsp-groups-config-files"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--groups-config-files"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Setup repository for Build Server Protocol (https://build-server-protocol.github.io/).",
      "is_goal": true,
      "provider": "pants.core",
      "scope": "experimental-bsp"
    },
    "export": {
      "advanced": [],
      "basic": [],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Export Pants data for use in other tools, such as IDEs.",
      "is_goal": true,
      "provider": "pants.core",
      "scope": "export"
    },
    "export-codegen": {
      "advanced": [],
      "basic": [],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Write generated files to `dist/codegen` for use outside of Pants.",
      "is_goal": true,
      "provider": "pants.backend.docker",
      "scope": "export-codegen"
    },
    "filedeps": {
      "advanced": [],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--filedeps-output-file=<path>",
          "config_key": "output_file",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--filedeps-output-file=<path>"
          ],
          "env_var": "PANTS_FILEDEPS_OUTPUT_FILE",
          "help": "Output the goal's stdout to this file. If unspecified, outputs to stdout.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--filedeps-output-file"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--output-file"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--filedeps-sep=<separator>",
          "config_key": "sep",
          "default": "\\n",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--filedeps-sep=<separator>"
          ],
          "env_var": "PANTS_FILEDEPS_SEP",
          "help": "String to use to separate lines in line-oriented output.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--filedeps-sep"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--sep"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "\\n"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]filedeps-absolute",
          "config_key": "absolute",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]filedeps-absolute"
          ],
          "env_var": "PANTS_FILEDEPS_ABSOLUTE",
          "help": "If True, output with absolute path. If unspecified, output with path relative to the build root.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--filedeps-absolute",
            "--no-filedeps-absolute"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--absolute",
            "--no-absolute"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]filedeps-globs",
          "config_key": "globs",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]filedeps-globs"
          ],
          "env_var": "PANTS_FILEDEPS_GLOBS",
          "help": "Instead of outputting filenames, output the original globs used in the BUILD file. This will not include exclude globs (i.e. globs that start with `!`).",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--filedeps-globs",
            "--no-filedeps-globs"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--globs",
            "--no-globs"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]filedeps-transitive",
          "config_key": "transitive",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]filedeps-transitive"
          ],
          "env_var": "PANTS_FILEDEPS_TRANSITIVE",
          "help": "If True, list files from all dependencies, including transitive dependencies. If unspecified, only list files from the target.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--filedeps-transitive",
            "--no-filedeps-transitive"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--transitive",
            "--no-transitive"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "List all source and BUILD files a target depends on.",
      "is_goal": true,
      "provider": "pants.backend.project_info",
      "scope": "filedeps"
    },
    "filter": {
      "advanced": [],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--filter-output-file=<path>",
          "config_key": "output_file",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--filter-output-file=<path>"
          ],
          "env_var": "PANTS_FILTER_OUTPUT_FILE",
          "help": "Output the goal's stdout to this file. If unspecified, outputs to stdout.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--filter-output-file"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--output-file"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--filter-sep=<separator>",
          "config_key": "sep",
          "default": "\\n",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--filter-sep=<separator>"
          ],
          "env_var": "PANTS_FILTER_SEP",
          "help": "String to use to separate lines in line-oriented output.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--filter-sep"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--sep"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "\\n"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--filter-target-type=\"[[+-]type1,type2,..., [+-]type1,type2,..., ...]\"",
          "config_key": "target_type",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--filter-target-type=\"[[+-]type1,type2,..., [+-]type1,type2,..., ...]\""
          ],
          "env_var": "PANTS_FILTER_TARGET_TYPE",
          "help": "Filter on these target types, e.g. `resources` or `python_sources`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--filter-target-type"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--target-type"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": [
            "all",
            "file",
            "BUILD"
          ],
          "comma_separated_choices": "all, file, BUILD",
          "comma_separated_display_args": "--filter-granularity=<TargetGranularity>",
          "config_key": "granularity",
          "default": "all",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--filter-granularity=<TargetGranularity>"
          ],
          "env_var": "PANTS_FILTER_GRANULARITY",
          "help": "Filter to rendering only targets declared in BUILD files, only file-level targets, or all targets.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--filter-granularity"
          ],
          "typ": "TargetGranularity",
          "unscoped_cmd_line_args": [
            "--granularity"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "all"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--filter-address-regex=\"[[+-]regex1,regex2,..., [+-]regex1,regex2,..., ...]\"",
          "config_key": "address_regex",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--filter-address-regex=\"[[+-]regex1,regex2,..., [+-]regex1,regex2,..., ...]\""
          ],
          "env_var": "PANTS_FILTER_ADDRESS_REGEX",
          "help": "Filter on target addresses matching these regexes.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--filter-address-regex"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--address-regex"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--filter-tag-regex=\"[[+-]regex1,regex2,..., [+-]regex1,regex2,..., ...]\"",
          "config_key": "tag_regex",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--filter-tag-regex=\"[[+-]regex1,regex2,..., [+-]regex1,regex2,..., ...]\""
          ],
          "env_var": "PANTS_FILTER_TAG_REGEX",
          "help": "Filter on targets with tags matching these regexes.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--filter-tag-regex"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--tag-regex"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Filter the input targets based on various criteria.\n\nMost of the filtering options below are comma-separated lists of filtering criteria, with an implied logical OR between them, so that a target passes the filter if it matches any of the criteria in the list. A '-' prefix inverts the sense of the entire comma-separated list, so that a target passes the filter only if it matches none of the criteria in the list.\n\nEach of the filtering options may be specified multiple times, with an implied logical AND between them.",
      "is_goal": true,
      "provider": "pants.backend.project_info",
      "scope": "filter"
    },
    "flake8": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--flake8-version=<str>",
          "config_key": "version",
          "default": "flake8>=3.9.2,<4.0",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--flake8-version=<str>"
          ],
          "env_var": "PANTS_FLAKE8_VERSION",
          "help": "Requirement string for the tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--flake8-version"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "flake8>=3.9.2,<4.0"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--flake8-extra-requirements=\"['<str>', '<str>', ...]\"",
          "config_key": "extra_requirements",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--flake8-extra-requirements=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_FLAKE8_EXTRA_REQUIREMENTS",
          "help": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--flake8-extra-requirements"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--extra-requirements"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--flake8-lockfile=<str>",
          "config_key": "lockfile",
          "default": "<default>",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--flake8-lockfile=<str>"
          ],
          "env_var": "PANTS_FLAKE8_LOCKFILE",
          "help": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.12.1/src/python/pants/backend/python/lint/flake8/flake8.lock for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 generate-lockfiles --resolve=flake8`.\n\nAs explained at https://www.pantsbuild.org/v2.12/docs/python-third-party-dependencies, lockfile generation via `generate-lockfiles` does not always work and you may want to manually generate the lockfile. You will want to set `[python].invalid_lockfile_behavior = 'ignore'` so that Pants does not complain about missing lockfile headers.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--flake8-lockfile"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--lockfile"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "<default>"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--flake8-console-script=<str>",
          "config_key": "console_script",
          "default": "flake8",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--flake8-console-script=<str>"
          ],
          "env_var": "PANTS_FLAKE8_CONSOLE_SCRIPT",
          "help": "The console script for the tool. Using this option is generally preferable to (and mutually exclusive with) specifying an --entry-point since console script names have a higher expectation of staying stable across releases of the tool. Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--flake8-console-script"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--console-script"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "flake8"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--flake8-entry-point=<str>",
          "config_key": "entry_point",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--flake8-entry-point=<str>"
          ],
          "env_var": "PANTS_FLAKE8_ENTRY_POINT",
          "help": "The entry point for the tool. Generally you only want to use this option if the tool does not offer a --console-script (which this option is mutually exclusive with). Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--flake8-entry-point"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--entry-point"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--flake8-config=<file_option>",
          "config_key": "config",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--flake8-config=<file_option>"
          ],
          "env_var": "PANTS_FLAKE8_CONFIG",
          "help": "Path to an INI config file understood by Flake8 (https://flake8.pycqa.org/en/latest/user/configuration.html).\n\nSetting this option will disable `[flake8].config_discovery`. Use this option if the config is located in a non-standard location.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--flake8-config"
          ],
          "typ": "file_option",
          "unscoped_cmd_line_args": [
            "--config"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]flake8-config-discovery",
          "config_key": "config_discovery",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]flake8-config-discovery"
          ],
          "env_var": "PANTS_FLAKE8_CONFIG_DISCOVERY",
          "help": "If true, Pants will include any relevant config files during runs (`.flake8`, `flake8`, `setup.cfg`, and `tox.ini`).\n\nUse `[flake8].config` instead if your config is in a non-standard location.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--flake8-config-discovery",
            "--no-flake8-config-discovery"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--config-discovery",
            "--no-config-discovery"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--flake8-source-plugins=\"[<target_option>, <target_option>, ...]\"",
          "config_key": "source_plugins",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--flake8-source-plugins=\"[<target_option>, <target_option>, ...]\""
          ],
          "env_var": "PANTS_FLAKE8_SOURCE_PLUGINS",
          "help": "An optional list of `python_sources` target addresses to load first-party plugins.\n\nYou must set the plugin's parent directory as a source root. For example, if your plugin is at `build-support/flake8/custom_plugin.py`, add 'build-support/flake8' to `[source].root_patterns` in `pants.toml`. This is necessary for Pants to know how to tell Flake8 to discover your plugin. See https://www.pantsbuild.org/v2.12/docs/source-roots\n\nYou must also set `[flake8:local-plugins]` in your Flake8 config file.\n\nFor example:\n\n    ```\n    [flake8:local-plugins]\n        extension =\n            CUSTOMCODE = custom_plugin:MyChecker\n    ```\n\nWhile your plugin's code can depend on other first-party code and third-party requirements, all first-party dependencies of the plugin must live in the same directory or a subdirectory.\n\nTo instead load third-party plugins, set the option `[flake8].extra_requirements`.\n\nTip: it's often helpful to define a dedicated 'resolve' via `[python].resolves` for your Flake8 plugins such as 'flake8-plugins' so that the third-party requirements used by your plugin, like `flake8`, do not mix with the rest of your project. Read that option's help message for more info on resolves.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--flake8-source-plugins"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--source-plugins"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]flake8-skip",
          "config_key": "skip",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]flake8-skip"
          ],
          "env_var": "PANTS_FLAKE8_SKIP",
          "help": "Don't use Flake8 when running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 lint`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--flake8-skip",
            "--no-flake8-skip"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--skip",
            "--no-skip"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--flake8-args=\"[<shell_str>, <shell_str>, ...]\"",
          "config_key": "args",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--flake8-args=\"[<shell_str>, <shell_str>, ...]\""
          ],
          "env_var": "PANTS_FLAKE8_ARGS",
          "help": "Arguments to pass directly to Flake8, e.g. `--flake8-args='--ignore E123,W456 --enable-extensions H111'`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--flake8-args"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--args"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]flake8-export",
          "config_key": "export",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]flake8-export"
          ],
          "env_var": "PANTS_FLAKE8_EXPORT",
          "help": "If true, export a virtual environment with Flake8 when running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 export`.\n\nThis can be useful, for example, with IDE integrations to point your editor to the tool's binary.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--flake8-export",
            "--no-flake8-export"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--export",
            "--no-export"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "The Flake8 Python linter (https://flake8.pycqa.org/).",
      "is_goal": false,
      "provider": "pants.backend.python.lint.flake8",
      "scope": "flake8"
    },
    "fmt": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--fmt-batch-size=<int>",
          "config_key": "batch_size",
          "default": 128,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--fmt-batch-size=<int>"
          ],
          "env_var": "PANTS_FMT_BATCH_SIZE",
          "help": "The target number of files to be included in each formatter batch.\n\nFormatter processes are batched for a few reasons:\n\n1. to avoid OS argument length limits (in processes which don't support argument files)\n2. to support more stable cache keys than would be possible if all files were operated on in a single batch.\n3. to allow for parallelism in formatter processes which don't have internal parallelism, or -- if they do support internal parallelism -- to improve scheduling behavior when multiple processes are competing for cores and so internal parallelism cannot be used perfectly.\n\nIn order to improve cache hit rates (see 2.), batches are created at stable boundaries, and so this value is only a \"target\" batch size (rather than an exact value).",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--fmt-batch-size"
          ],
          "typ": "int",
          "unscoped_cmd_line_args": [
            "--batch-size"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": 128
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--fmt-only=\"['<str>', '<str>', ...]\"",
          "config_key": "only",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--fmt-only=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_FMT_ONLY",
          "help": "Only run these formatters and skip all others.\n\nThe formatter names are outputted at the final summary of running this goal, e.g. `isort` and `shfmt`. You can also run `fmt --only=fake` to get a list of all activated formatters.\n\nYou can repeat this option, e.g. `fmt --only=isort --only=shfmt` or `fmt --only=['isort', 'shfmt']`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--fmt-only"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--only"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Autoformat source code.",
      "is_goal": true,
      "provider": "pants.core",
      "scope": "fmt"
    },
    "generate-lockfiles": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--generate-lockfiles-custom-command=<str>",
          "config_key": "custom_command",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--generate-lockfiles-custom-command=<str>"
          ],
          "env_var": "PANTS_GENERATE_LOCKFILES_CUSTOM_COMMAND",
          "help": "If set, lockfile headers will say to run this command to regenerate the lockfile, rather than running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 generate-lockfiles --resolve=<name>` like normal.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--generate-lockfiles-custom-command"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--custom-command"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--generate-lockfiles-resolve=\"['<str>', '<str>', ...]\"",
          "config_key": "resolve",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--generate-lockfiles-resolve=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_GENERATE_LOCKFILES_RESOLVE",
          "help": "Only generate lockfiles for the specified resolve(s).\n\nResolves are the logical names for the different lockfiles used in your project. For your own code's dependencies, these come from the option `[python].resolves`. For tool lockfiles, resolve names are the options scope for that tool such as `black`, `pytest`, and `mypy-protobuf`.\n\nFor example, you can run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 generate-lockfiles --resolve=black --resolve=pytest --resolve=data-science` to only generate lockfiles for those two tools and your resolve named `data-science`.\n\nIf you specify an invalid resolve name, like 'fake', Pants will output all possible values.\n\nIf not specified, Pants will generate lockfiles for all resolves.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--generate-lockfiles-resolve"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--resolve"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Generate lockfiles for Python third-party dependencies.",
      "is_goal": true,
      "provider": "pants.core",
      "scope": "generate-lockfiles"
    },
    "go-test": {
      "advanced": [],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--go-test-args=\"[<shell_str>, <shell_str>, ...]\", ... -- [<shell_str> [<shell_str> [...]]]",
          "config_key": "args",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--go-test-args=\"[<shell_str>, <shell_str>, ...]\"",
            "... -- [<shell_str> [<shell_str> [...]]]"
          ],
          "env_var": "PANTS_GO_TEST_ARGS",
          "help": "Arguments to pass directly to Go test binary, e.g. `--go-test-args='-run TestFoo -v'`.\n\nKnown Go test options will be transformed into the form expected by the test binary, e.g. `-v` becomes `-test.v`. Run `go help testflag` from the Go SDK to learn more about the options supported by Go test binaries.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--go-test-args"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--args"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "from command-line flag",
                "rank": "FLAG",
                "value": []
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Options for Go tests.",
      "is_goal": false,
      "provider": "pants.backend.experimental.go",
      "scope": "go-test"
    },
    "gofmt": {
      "advanced": [],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]gofmt-skip",
          "config_key": "skip",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]gofmt-skip"
          ],
          "env_var": "PANTS_GOFMT_SKIP",
          "help": "Don't use gofmt when running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 fmt` and `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 lint`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--gofmt-skip",
            "--no-gofmt-skip"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--skip",
            "--no-skip"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Gofmt-specific options.",
      "is_goal": false,
      "provider": "pants.backend.experimental.go",
      "scope": "gofmt"
    },
    "golang": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--golang-subprocess-env-vars=\"['<str>', '<str>', ...]\"",
          "config_key": "subprocess_env_vars",
          "default": [
            "LANG",
            "LC_CTYPE",
            "LC_ALL",
            "PATH"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--golang-subprocess-env-vars=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_GOLANG_SUBPROCESS_ENV_VARS",
          "help": "Environment variables to set when invoking the `go` tool. Entries are either strings in the form `ENV_VAR=value` to set an explicit value; or just `ENV_VAR` to copy the value from Pants's own environment.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--golang-subprocess-env-vars"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--subprocess-env-vars"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "LANG",
                  "LC_CTYPE",
                  "LC_ALL",
                  "PATH"
                ]
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--golang-go-search-paths=\"['<str>', '<str>', ...]\"",
          "config_key": "go_search_paths",
          "default": [
            "<PATH>"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--golang-go-search-paths=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_GOLANG_GO_SEARCH_PATHS",
          "help": "A list of paths to search for Go.\n\nSpecify absolute paths to directories with the `go` binary, e.g. `/usr/bin`. Earlier entries will be searched first.\n\nThe special string `\"<PATH>\"` will expand to the contents of the PATH env var.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--golang-go-search-paths"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--go-search-paths"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "<PATH>"
                ]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--golang-expected-version=<str>",
          "config_key": "expected_version",
          "default": "1.17",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--golang-expected-version=<str>"
          ],
          "env_var": "PANTS_GOLANG_EXPECTED_VERSION",
          "help": "The Go version you are using, such as `1.17`.\n\nPants will only use Go distributions from `--go-search-paths` that have the expected version, and it will error if none are found.\n\nDo not include the patch version.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--golang-expected-version"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--expected-version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "1.17"
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Options for Golang support.",
      "is_goal": false,
      "provider": "pants.backend.experimental.go",
      "scope": "golang"
    },
    "google-java-format": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--google-java-format-version=<str>",
          "config_key": "version",
          "default": "1.13.0",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--google-java-format-version=<str>"
          ],
          "env_var": "PANTS_GOOGLE_JAVA_FORMAT_VERSION",
          "help": "Version string for the tool. This is available for substitution in the `[google-java-format].artifacts` option by including the string `{version}`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--google-java-format-version"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "1.13.0"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--google-java-format-artifacts=\"['<str>', '<str>', ...]\"",
          "config_key": "artifacts",
          "default": [
            "com.google.googlejavaformat:google-java-format:{version}"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--google-java-format-artifacts=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_GOOGLE_JAVA_FORMAT_ARTIFACTS",
          "help": "Artifact requirements for this tool using specified as either the address of a `jvm_artifact` target or, alternatively, as a colon-separated Maven coordinates (e.g., group:name:version). For Maven coordinates, the string `{version}` version will be substituted with the value of the `[google-java-format].version` option.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--google-java-format-artifacts"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--artifacts"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "com.google.googlejavaformat:google-java-format:{version}"
                ]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--google-java-format-lockfile=<str>",
          "config_key": "lockfile",
          "default": "<default>",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--google-java-format-lockfile=<str>"
          ],
          "env_var": "PANTS_GOOGLE_JAVA_FORMAT_LOCKFILE",
          "help": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` option. See https://github.com/pantsbuild/pants/blob/release_2.12.1/src/python/pants/backend/java/lint/google_java_format/google_java_format.default.lockfile.txt for the default lockfile contents.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 jvm-generate-lockfiles --resolve=google-java-format`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--google-java-format-lockfile"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--lockfile"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "<default>"
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]google-java-format-skip",
          "config_key": "skip",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]google-java-format-skip"
          ],
          "env_var": "PANTS_GOOGLE_JAVA_FORMAT_SKIP",
          "help": "Don't use Google Java Format when running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 fmt` and `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 lint`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--google-java-format-skip",
            "--no-google-java-format-skip"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--skip",
            "--no-skip"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]google-java-format-aosp",
          "config_key": "aosp",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]google-java-format-aosp"
          ],
          "env_var": "PANTS_GOOGLE_JAVA_FORMAT_AOSP",
          "help": "Use AOSP style instead of Google Style (4-space indentation). (\"AOSP\" is the Android Open Source Project.)",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--google-java-format-aosp",
            "--no-google-java-format-aosp"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--aosp",
            "--no-aosp"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Google Java Format (https://github.com/google/google-java-format)",
      "is_goal": false,
      "provider": "pants.backend.experimental.java.lint.google_java_format",
      "scope": "google-java-format"
    },
    "grpc-python-plugin": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--grpc-python-plugin-version=<str>",
          "config_key": "version",
          "default": "1.32.0",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--grpc-python-plugin-version=<str>"
          ],
          "env_var": "PANTS_GRPC_PYTHON_PLUGIN_VERSION",
          "help": "Use this version of grpcpythonplugin.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--grpc-python-plugin-version"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "1.32.0"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--grpc-python-plugin-known-versions=\"['<str>', '<str>', ...]\"",
          "config_key": "known_versions",
          "default": [
            "1.32.0|macos_arm64 |b2db586656463841aa2fd4aab34fb6bd3ef887b522d80e4f2f292146c357f533|6215304",
            "1.32.0|macos_x86_64|b2db586656463841aa2fd4aab34fb6bd3ef887b522d80e4f2f292146c357f533|6215304",
            "1.32.0|linux_arm64 |9365e728c603d64735963074340994245d324712344f63557ef3630864dd9f52|5233664",
            "1.32.0|linux_x86_64|1af99df9bf733c17a75cbe379f3f9d9ff1627d8a8035ea057c3c78575afe1687|4965728"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--grpc-python-plugin-known-versions=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_GRPC_PYTHON_PLUGIN_KNOWN_VERSIONS",
          "help": "\nKnown versions to verify downloads against.\n\nEach element is a pipe-separated string of `version|platform|sha256|length`, where:\n\n    - `version` is the version string\n    - `platform` is one of [linux_arm64,linux_x86_64,macos_arm64,macos_x86_64],\n    - `sha256` is the 64-character hex representation of the expected sha256\n    digest of the download file, as emitted by `shasum -a 256`\n    - `length` is the expected length of the download file in bytes, as emitted by\n    `wc -c`\n\nE.g., `3.1.2|macos_x86_64|6d0f18cd84b918c7b3edd0203e75569e0c7caecb1367bbbe409b44e28514f5be|42813`.\n\nValues are space-stripped, so pipes can be indented for readability if necessary.\n",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--grpc-python-plugin-known-versions"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--known-versions"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "1.32.0|macos_arm64 |b2db586656463841aa2fd4aab34fb6bd3ef887b522d80e4f2f292146c357f533|6215304",
                  "1.32.0|macos_x86_64|b2db586656463841aa2fd4aab34fb6bd3ef887b522d80e4f2f292146c357f533|6215304",
                  "1.32.0|linux_arm64 |9365e728c603d64735963074340994245d324712344f63557ef3630864dd9f52|5233664",
                  "1.32.0|linux_x86_64|1af99df9bf733c17a75cbe379f3f9d9ff1627d8a8035ea057c3c78575afe1687|4965728"
                ]
              }
            ]
          }
        },
        {
          "choices": [
            "error",
            "warning"
          ],
          "comma_separated_choices": "error, warning",
          "comma_separated_display_args": "--grpc-python-plugin-use-unsupported-version=<UnsupportedVersionUsage>",
          "config_key": "use_unsupported_version",
          "default": "error",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--grpc-python-plugin-use-unsupported-version=<UnsupportedVersionUsage>"
          ],
          "env_var": "PANTS_GRPC_PYTHON_PLUGIN_USE_UNSUPPORTED_VERSION",
          "help": "\nWhat action to take in case the requested version of grpcpythonplugin is not supported.\n\nSupported grpcpythonplugin versions: unspecified\n",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--grpc-python-plugin-use-unsupported-version"
          ],
          "typ": "UnsupportedVersionUsage",
          "unscoped_cmd_line_args": [
            "--use-unsupported-version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "error"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--grpc-python-plugin-url-template=<str>",
          "config_key": "url_template",
          "default": "https://binaries.pantsbuild.org/bin/grpc_python_plugin/{version}/{platform}/grpc_python_plugin",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--grpc-python-plugin-url-template=<str>"
          ],
          "env_var": "PANTS_GRPC_PYTHON_PLUGIN_URL_TEMPLATE",
          "help": "URL to download the tool, either as a single binary file or a compressed file (e.g. zip file). You can change this to point to your own hosted file, e.g. to work with proxies or for access via the filesystem through a `file:$abspath` URL (e.g. `file:/this/is/absolute`, possibly by [templating the buildroot in a config file](https://www.pantsbuild.org/v2.12/docs/options#config-file-entries)).\n\nUse `{version}` to have the value from --version substituted, and `{platform}` to have a value from --url-platform-mapping substituted in, depending on the current platform. For example, https://github.com/.../protoc-{version}-{platform}.zip.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--grpc-python-plugin-url-template"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--url-template"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "https://binaries.pantsbuild.org/bin/grpc_python_plugin/{version}/{platform}/grpc_python_plugin"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--grpc-python-plugin-url-platform-mapping=\"{'key1': val1, 'key2': val2, ...}\"",
          "config_key": "url_platform_mapping",
          "default": {
            "linux_arm64": "linux/arm64",
            "linux_x86_64": "linux/x86_64",
            "macos_arm64": "macos/x86_64",
            "macos_x86_64": "macos/x86_64"
          },
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--grpc-python-plugin-url-platform-mapping=\"{'key1': val1, 'key2': val2, ...}\""
          ],
          "env_var": "PANTS_GRPC_PYTHON_PLUGIN_URL_PLATFORM_MAPPING",
          "help": "A dictionary mapping platforms to strings to be used when generating the URL to download the tool.\n\nIn --url-template, anytime the `{platform}` string is used, Pants will determine the current platform, and substitute `{platform}` with the respective value from your dictionary.\n\nFor example, if you define `{\"macos_x86_64\": \"apple-darwin\", \"linux_x86_64\": \"unknown-linux\"}`, and run Pants on Linux with an intel architecture, then `{platform}` will be substituted in the --url-template option with unknown-linux.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--grpc-python-plugin-url-platform-mapping"
          ],
          "typ": "dict",
          "unscoped_cmd_line_args": [
            "--url-platform-mapping"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": {}
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": {
                  "linux_arm64": "linux/arm64",
                  "linux_x86_64": "linux/x86_64",
                  "macos_arm64": "macos/x86_64",
                  "macos_x86_64": "macos/x86_64"
                }
              }
            ]
          }
        }
      ],
      "basic": [],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "The gRPC Protobuf plugin for Python.",
      "is_goal": false,
      "provider": "pants.backend.codegen.protobuf.python",
      "scope": "grpc-python-plugin"
    },
    "hadolint": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--hadolint-version=<str>",
          "config_key": "version",
          "default": "v2.8.0",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--hadolint-version=<str>"
          ],
          "env_var": "PANTS_HADOLINT_VERSION",
          "help": "Use this version of Hadolint.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--hadolint-version"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "v2.8.0"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--hadolint-known-versions=\"['<str>', '<str>', ...]\"",
          "config_key": "known_versions",
          "default": [
            "v2.8.0|macos_x86_64|27985f257a216ecab06a16e643e8cb0123e7145b5d526cfcb4ce7a31fe99f357|2428944",
            "v2.8.0|macos_arm64 |27985f257a216ecab06a16e643e8cb0123e7145b5d526cfcb4ce7a31fe99f357|2428944",
            "v2.8.0|linux_x86_64|9dfc155139a1e1e9b3b28f3de9907736b9dfe7cead1c3a0ae7ff0158f3191674|5895708"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--hadolint-known-versions=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_HADOLINT_KNOWN_VERSIONS",
          "help": "\nKnown versions to verify downloads against.\n\nEach element is a pipe-separated string of `version|platform|sha256|length`, where:\n\n    - `version` is the version string\n    - `platform` is one of [linux_arm64,linux_x86_64,macos_arm64,macos_x86_64],\n    - `sha256` is the 64-character hex representation of the expected sha256\n    digest of the download file, as emitted by `shasum -a 256`\n    - `length` is the expected length of the download file in bytes, as emitted by\n    `wc -c`\n\nE.g., `3.1.2|macos_x86_64|6d0f18cd84b918c7b3edd0203e75569e0c7caecb1367bbbe409b44e28514f5be|42813`.\n\nValues are space-stripped, so pipes can be indented for readability if necessary.\n",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--hadolint-known-versions"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--known-versions"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "v2.8.0|macos_x86_64|27985f257a216ecab06a16e643e8cb0123e7145b5d526cfcb4ce7a31fe99f357|2428944",
                  "v2.8.0|macos_arm64 |27985f257a216ecab06a16e643e8cb0123e7145b5d526cfcb4ce7a31fe99f357|2428944",
                  "v2.8.0|linux_x86_64|9dfc155139a1e1e9b3b28f3de9907736b9dfe7cead1c3a0ae7ff0158f3191674|5895708"
                ]
              }
            ]
          }
        },
        {
          "choices": [
            "error",
            "warning"
          ],
          "comma_separated_choices": "error, warning",
          "comma_separated_display_args": "--hadolint-use-unsupported-version=<UnsupportedVersionUsage>",
          "config_key": "use_unsupported_version",
          "default": "error",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--hadolint-use-unsupported-version=<UnsupportedVersionUsage>"
          ],
          "env_var": "PANTS_HADOLINT_USE_UNSUPPORTED_VERSION",
          "help": "\nWhat action to take in case the requested version of Hadolint is not supported.\n\nSupported Hadolint versions: unspecified\n",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--hadolint-use-unsupported-version"
          ],
          "typ": "UnsupportedVersionUsage",
          "unscoped_cmd_line_args": [
            "--use-unsupported-version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "error"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--hadolint-url-template=<str>",
          "config_key": "url_template",
          "default": "https://github.com/hadolint/hadolint/releases/download/{version}/hadolint-{platform}",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--hadolint-url-template=<str>"
          ],
          "env_var": "PANTS_HADOLINT_URL_TEMPLATE",
          "help": "URL to download the tool, either as a single binary file or a compressed file (e.g. zip file). You can change this to point to your own hosted file, e.g. to work with proxies or for access via the filesystem through a `file:$abspath` URL (e.g. `file:/this/is/absolute`, possibly by [templating the buildroot in a config file](https://www.pantsbuild.org/v2.12/docs/options#config-file-entries)).\n\nUse `{version}` to have the value from --version substituted, and `{platform}` to have a value from --url-platform-mapping substituted in, depending on the current platform. For example, https://github.com/.../protoc-{version}-{platform}.zip.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--hadolint-url-template"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--url-template"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "https://github.com/hadolint/hadolint/releases/download/{version}/hadolint-{platform}"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--hadolint-url-platform-mapping=\"{'key1': val1, 'key2': val2, ...}\"",
          "config_key": "url_platform_mapping",
          "default": {
            "linux_x86_64": "Linux-x86_64",
            "macos_arm64": "Darwin-x86_64",
            "macos_x86_64": "Darwin-x86_64"
          },
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--hadolint-url-platform-mapping=\"{'key1': val1, 'key2': val2, ...}\""
          ],
          "env_var": "PANTS_HADOLINT_URL_PLATFORM_MAPPING",
          "help": "A dictionary mapping platforms to strings to be used when generating the URL to download the tool.\n\nIn --url-template, anytime the `{platform}` string is used, Pants will determine the current platform, and substitute `{platform}` with the respective value from your dictionary.\n\nFor example, if you define `{\"macos_x86_64\": \"apple-darwin\", \"linux_x86_64\": \"unknown-linux\"}`, and run Pants on Linux with an intel architecture, then `{platform}` will be substituted in the --url-template option with unknown-linux.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--hadolint-url-platform-mapping"
          ],
          "typ": "dict",
          "unscoped_cmd_line_args": [
            "--url-platform-mapping"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": {}
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": {
                  "linux_x86_64": "Linux-x86_64",
                  "macos_arm64": "Darwin-x86_64",
                  "macos_x86_64": "Darwin-x86_64"
                }
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--hadolint-config=<file_option>",
          "config_key": "config",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--hadolint-config=<file_option>"
          ],
          "env_var": "PANTS_HADOLINT_CONFIG",
          "help": "Path to an YAML config file understood by Hadolint (https://github.com/hadolint/hadolint#configure).\n\nSetting this option will disable `[hadolint].config_discovery`. Use this option if the config is located in a non-standard location.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--hadolint-config"
          ],
          "typ": "file_option",
          "unscoped_cmd_line_args": [
            "--config"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]hadolint-config-discovery",
          "config_key": "config_discovery",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]hadolint-config-discovery"
          ],
          "env_var": "PANTS_HADOLINT_CONFIG_DISCOVERY",
          "help": "If true, Pants will include all relevant config files during runs (`.hadolint.yaml` and `.hadolint.yml`).\n\nUse `[hadolint].config` instead if your config is in a non-standard location.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--hadolint-config-discovery",
            "--no-hadolint-config-discovery"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--config-discovery",
            "--no-config-discovery"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]hadolint-skip",
          "config_key": "skip",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]hadolint-skip"
          ],
          "env_var": "PANTS_HADOLINT_SKIP",
          "help": "Don't use Hadolint when running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 lint`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--hadolint-skip",
            "--no-hadolint-skip"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--skip",
            "--no-skip"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--hadolint-args=\"[<shell_str>, <shell_str>, ...]\"",
          "config_key": "args",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--hadolint-args=\"[<shell_str>, <shell_str>, ...]\""
          ],
          "env_var": "PANTS_HADOLINT_ARGS",
          "help": "Arguments to pass directly to Hadolint, e.g. `--hadolint-args='--format json'`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--hadolint-args"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--args"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "A linter for Dockerfiles.",
      "is_goal": false,
      "provider": "pants.backend.docker.lint.hadolint",
      "scope": "hadolint"
    },
    "helm": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--helm-version=<str>",
          "config_key": "version",
          "default": "3.8.0",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--helm-version=<str>"
          ],
          "env_var": "PANTS_HELM_VERSION",
          "help": "Use this version of helmsubsystem.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--helm-version"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "3.8.0"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--helm-known-versions=\"['<str>', '<str>', ...]\"",
          "config_key": "known_versions",
          "default": [
            "3.8.0|linux_arm64 |23e08035dc0106fe4e0bd85800fd795b2b9ecd9f32187aa16c49b0a917105161|12324642",
            "3.8.0|linux_x86_64|8408c91e846c5b9ba15eb6b1a5a79fc22dd4d33ac6ea63388e5698d1b2320c8b|13626774",
            "3.8.0|macos_arm64 |751348f1a4a876ffe089fd68df6aea310fd05fe3b163ab76aa62632e327122f3|14078604",
            "3.8.0|macos_x86_64|532ddd6213891084873e5c2dcafa577f425ca662a6594a3389e288fc48dc2089|14318316"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--helm-known-versions=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_HELM_KNOWN_VERSIONS",
          "help": "\nKnown versions to verify downloads against.\n\nEach element is a pipe-separated string of `version|platform|sha256|length`, where:\n\n    - `version` is the version string\n    - `platform` is one of [linux_arm64,linux_x86_64,macos_arm64,macos_x86_64],\n    - `sha256` is the 64-character hex representation of the expected sha256\n    digest of the download file, as emitted by `shasum -a 256`\n    - `length` is the expected length of the download file in bytes, as emitted by\n    `wc -c`\n\nE.g., `3.1.2|macos_x86_64|6d0f18cd84b918c7b3edd0203e75569e0c7caecb1367bbbe409b44e28514f5be|42813`.\n\nValues are space-stripped, so pipes can be indented for readability if necessary.\n",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--helm-known-versions"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--known-versions"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "3.8.0|linux_arm64 |23e08035dc0106fe4e0bd85800fd795b2b9ecd9f32187aa16c49b0a917105161|12324642",
                  "3.8.0|linux_x86_64|8408c91e846c5b9ba15eb6b1a5a79fc22dd4d33ac6ea63388e5698d1b2320c8b|13626774",
                  "3.8.0|macos_arm64 |751348f1a4a876ffe089fd68df6aea310fd05fe3b163ab76aa62632e327122f3|14078604",
                  "3.8.0|macos_x86_64|532ddd6213891084873e5c2dcafa577f425ca662a6594a3389e288fc48dc2089|14318316"
                ]
              }
            ]
          }
        },
        {
          "choices": [
            "error",
            "warning"
          ],
          "comma_separated_choices": "error, warning",
          "comma_separated_display_args": "--helm-use-unsupported-version=<UnsupportedVersionUsage>",
          "config_key": "use_unsupported_version",
          "default": "error",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--helm-use-unsupported-version=<UnsupportedVersionUsage>"
          ],
          "env_var": "PANTS_HELM_USE_UNSUPPORTED_VERSION",
          "help": "\nWhat action to take in case the requested version of helmsubsystem is not supported.\n\nSupported helmsubsystem versions: unspecified\n",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--helm-use-unsupported-version"
          ],
          "typ": "UnsupportedVersionUsage",
          "unscoped_cmd_line_args": [
            "--use-unsupported-version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "error"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--helm-url-template=<str>",
          "config_key": "url_template",
          "default": "https://get.helm.sh/helm-v{version}-{platform}.tar.gz",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--helm-url-template=<str>"
          ],
          "env_var": "PANTS_HELM_URL_TEMPLATE",
          "help": "URL to download the tool, either as a single binary file or a compressed file (e.g. zip file). You can change this to point to your own hosted file, e.g. to work with proxies or for access via the filesystem through a `file:$abspath` URL (e.g. `file:/this/is/absolute`, possibly by [templating the buildroot in a config file](https://www.pantsbuild.org/v2.12/docs/options#config-file-entries)).\n\nUse `{version}` to have the value from --version substituted, and `{platform}` to have a value from --url-platform-mapping substituted in, depending on the current platform. For example, https://github.com/.../protoc-{version}-{platform}.zip.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--helm-url-template"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--url-template"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "https://get.helm.sh/helm-v{version}-{platform}.tar.gz"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--helm-url-platform-mapping=\"{'key1': val1, 'key2': val2, ...}\"",
          "config_key": "url_platform_mapping",
          "default": {
            "linux_arm64": "linux-arm64",
            "linux_x86_64": "linux-amd64",
            "macos_arm64": "darwin-arm64",
            "macos_x86_64": "darwin-amd64"
          },
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--helm-url-platform-mapping=\"{'key1': val1, 'key2': val2, ...}\""
          ],
          "env_var": "PANTS_HELM_URL_PLATFORM_MAPPING",
          "help": "A dictionary mapping platforms to strings to be used when generating the URL to download the tool.\n\nIn --url-template, anytime the `{platform}` string is used, Pants will determine the current platform, and substitute `{platform}` with the respective value from your dictionary.\n\nFor example, if you define `{\"macos_x86_64\": \"apple-darwin\", \"linux_x86_64\": \"unknown-linux\"}`, and run Pants on Linux with an intel architecture, then `{platform}` will be substituted in the --url-template option with unknown-linux.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--helm-url-platform-mapping"
          ],
          "typ": "dict",
          "unscoped_cmd_line_args": [
            "--url-platform-mapping"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": {}
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": {
                  "linux_arm64": "linux-arm64",
                  "linux_x86_64": "linux-amd64",
                  "macos_arm64": "darwin-arm64",
                  "macos_x86_64": "darwin-amd64"
                }
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--helm-registries=\"{'key1': val1, 'key2': val2, ...}\"",
          "config_key": "registries",
          "default": {},
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--helm-registries=\"{'key1': val1, 'key2': val2, ...}\""
          ],
          "env_var": "PANTS_HELM_REGISTRIES",
          "help": "Configure Helm OCI registries. The schema for a registry entry is as follows:\n\n    {\n        \"registry-alias\": {\n            \"address\": \"oci://registry-domain:port\",\n            \"default\": bool,\n        },\n        ...\n    }\n\nIf no registries are provided in either a `helm_chart` target, then all default addresses will be used, if any.\n\nThe `helm_chart.registries` may be provided with a list of registry addresses and registry alias prefixed with `@` to be used instead of the defaults.\n\nA configured registry is marked as default either by setting `default = true` or with an alias of `\"default\"`.\n\nRegistries also participate in resolving third party Helm charts uplodaded to those registries.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--helm-registries"
          ],
          "typ": "dict",
          "unscoped_cmd_line_args": [
            "--registries"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": {}
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": {}
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]helm-lint-strict",
          "config_key": "lint_strict",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]helm-lint-strict"
          ],
          "env_var": "PANTS_HELM_LINT_STRICT",
          "help": "Enables strict linting of Helm charts",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--helm-lint-strict",
            "--no-helm-lint-strict"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--lint-strict",
            "--no-lint-strict"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--helm-default-registry-repository=<str>",
          "config_key": "default_registry_repository",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--helm-default-registry-repository=<str>"
          ],
          "env_var": "PANTS_HELM_DEFAULT_REGISTRY_REPOSITORY",
          "help": "Default location where to push Helm charts in the available registries when no specific one has been given.\n\nIf no registry repository is given, charts will be pushed to the root of the OCI registry.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--helm-default-registry-repository"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--default-registry-repository"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "The Helm command line (https://helm.sh)",
      "is_goal": false,
      "provider": "pants.backend.experimental.helm",
      "scope": "helm"
    },
    "helm-unittest": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--helm-unittest-version=<str>",
          "config_key": "version",
          "default": "0.2.8",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--helm-unittest-version=<str>"
          ],
          "env_var": "PANTS_HELM_UNITTEST_VERSION",
          "help": "Use this version of helmunittestsubsystem.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--helm-unittest-version"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "0.2.8"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--helm-unittest-known-versions=\"['<str>', '<str>', ...]\"",
          "config_key": "known_versions",
          "default": [
            "0.2.8|linux_x86_64|d7c452559ad4406a1197435394fbcffe51198060de1aa9b4cb6feaf876776ba0|18299096",
            "0.2.8|linux_arm64 |c793e241b063f0540ad9b4acc0a02e5a101bd9daea5bdf4d8562e9b2337fedb2|16943867",
            "0.2.8|macos_x86_64|1dc95699320894bdebf055c4f4cc084c2cfa0133d3cb7fd6a4c0adca94df5c96|18161928",
            "0.2.8|macos_arm64 |436e3167c26f71258b96e32c2877b4f97c051064db941de097cf3db2fc861342|17621648"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--helm-unittest-known-versions=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_HELM_UNITTEST_KNOWN_VERSIONS",
          "help": "\nKnown versions to verify downloads against.\n\nEach element is a pipe-separated string of `version|platform|sha256|length`, where:\n\n    - `version` is the version string\n    - `platform` is one of [linux_arm64,linux_x86_64,macos_arm64,macos_x86_64],\n    - `sha256` is the 64-character hex representation of the expected sha256\n    digest of the download file, as emitted by `shasum -a 256`\n    - `length` is the expected length of the download file in bytes, as emitted by\n    `wc -c`\n\nE.g., `3.1.2|macos_x86_64|6d0f18cd84b918c7b3edd0203e75569e0c7caecb1367bbbe409b44e28514f5be|42813`.\n\nValues are space-stripped, so pipes can be indented for readability if necessary.\n",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--helm-unittest-known-versions"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--known-versions"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "0.2.8|linux_x86_64|d7c452559ad4406a1197435394fbcffe51198060de1aa9b4cb6feaf876776ba0|18299096",
                  "0.2.8|linux_arm64 |c793e241b063f0540ad9b4acc0a02e5a101bd9daea5bdf4d8562e9b2337fedb2|16943867",
                  "0.2.8|macos_x86_64|1dc95699320894bdebf055c4f4cc084c2cfa0133d3cb7fd6a4c0adca94df5c96|18161928",
                  "0.2.8|macos_arm64 |436e3167c26f71258b96e32c2877b4f97c051064db941de097cf3db2fc861342|17621648"
                ]
              }
            ]
          }
        },
        {
          "choices": [
            "error",
            "warning"
          ],
          "comma_separated_choices": "error, warning",
          "comma_separated_display_args": "--helm-unittest-use-unsupported-version=<UnsupportedVersionUsage>",
          "config_key": "use_unsupported_version",
          "default": "error",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--helm-unittest-use-unsupported-version=<UnsupportedVersionUsage>"
          ],
          "env_var": "PANTS_HELM_UNITTEST_USE_UNSUPPORTED_VERSION",
          "help": "\nWhat action to take in case the requested version of helmunittestsubsystem is not supported.\n\nSupported helmunittestsubsystem versions: unspecified\n",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--helm-unittest-use-unsupported-version"
          ],
          "typ": "UnsupportedVersionUsage",
          "unscoped_cmd_line_args": [
            "--use-unsupported-version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "error"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--helm-unittest-url-template=<str>",
          "config_key": "url_template",
          "default": "https://github.com/quintush/helm-unittest/releases/download/v{version}/helm-unittest-{platform}-{version}.tgz",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--helm-unittest-url-template=<str>"
          ],
          "env_var": "PANTS_HELM_UNITTEST_URL_TEMPLATE",
          "help": "URL to download the tool, either as a single binary file or a compressed file (e.g. zip file). You can change this to point to your own hosted file, e.g. to work with proxies or for access via the filesystem through a `file:$abspath` URL (e.g. `file:/this/is/absolute`, possibly by [templating the buildroot in a config file](https://www.pantsbuild.org/v2.12/docs/options#config-file-entries)).\n\nUse `{version}` to have the value from --version substituted, and `{platform}` to have a value from --url-platform-mapping substituted in, depending on the current platform. For example, https://github.com/.../protoc-{version}-{platform}.zip.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--helm-unittest-url-template"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--url-template"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "https://github.com/quintush/helm-unittest/releases/download/v{version}/helm-unittest-{platform}-{version}.tgz"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--helm-unittest-url-platform-mapping=\"{'key1': val1, 'key2': val2, ...}\"",
          "config_key": "url_platform_mapping",
          "default": {
            "linux_arm64": "linux-arm64",
            "linux_x86_64": "linux-amd64",
            "macos_arm64": "macos-arm64",
            "macos_x86_64": "macos-amd64"
          },
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--helm-unittest-url-platform-mapping=\"{'key1': val1, 'key2': val2, ...}\""
          ],
          "env_var": "PANTS_HELM_UNITTEST_URL_PLATFORM_MAPPING",
          "help": "A dictionary mapping platforms to strings to be used when generating the URL to download the tool.\n\nIn --url-template, anytime the `{platform}` string is used, Pants will determine the current platform, and substitute `{platform}` with the respective value from your dictionary.\n\nFor example, if you define `{\"macos_x86_64\": \"apple-darwin\", \"linux_x86_64\": \"unknown-linux\"}`, and run Pants on Linux with an intel architecture, then `{platform}` will be substituted in the --url-template option with unknown-linux.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--helm-unittest-url-platform-mapping"
          ],
          "typ": "dict",
          "unscoped_cmd_line_args": [
            "--url-platform-mapping"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": {}
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": {
                  "linux_arm64": "linux-arm64",
                  "linux_x86_64": "linux-amd64",
                  "macos_arm64": "macos-arm64",
                  "macos_x86_64": "macos-amd64"
                }
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": [
            "XUnit",
            "NUnit",
            "JUnit"
          ],
          "comma_separated_choices": "XUnit, NUnit, JUnit",
          "comma_separated_display_args": "--helm-unittest-output-type=<HelmUnitTestReportFormat>",
          "config_key": "output_type",
          "default": "XUnit",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--helm-unittest-output-type=<HelmUnitTestReportFormat>"
          ],
          "env_var": "PANTS_HELM_UNITTEST_OUTPUT_TYPE",
          "help": "Output type used for the test report",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--helm-unittest-output-type"
          ],
          "typ": "HelmUnitTestReportFormat",
          "unscoped_cmd_line_args": [
            "--output-type"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "XUnit"
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "BDD styled unit test framework for Kubernetes Helm charts as a Helm plugin. (https://github.com/quintush/helm-unittest)",
      "is_goal": false,
      "provider": "pants.backend.experimental.helm",
      "scope": "helm-unittest"
    },
    "help": {
      "advanced": [],
      "basic": [],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Display usage message.",
      "is_goal": true,
      "provider": "pants.goal",
      "scope": "help"
    },
    "help-advanced": {
      "advanced": [],
      "basic": [],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Help for advanced options.",
      "is_goal": true,
      "provider": "pants.goal",
      "scope": "help-advanced"
    },
    "help-all": {
      "advanced": [],
      "basic": [],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Print a JSON object containing all help info.",
      "is_goal": true,
      "provider": "pants.goal",
      "scope": "help-all"
    },
    "ipython": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--ipython-version=<str>",
          "config_key": "version",
          "default": "ipython==7.16.1",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--ipython-version=<str>"
          ],
          "env_var": "PANTS_IPYTHON_VERSION",
          "help": "Requirement string for the tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--ipython-version"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "ipython==7.16.1"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--ipython-extra-requirements=\"['<str>', '<str>', ...]\"",
          "config_key": "extra_requirements",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--ipython-extra-requirements=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_IPYTHON_EXTRA_REQUIREMENTS",
          "help": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--ipython-extra-requirements"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--extra-requirements"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--ipython-lockfile=<str>",
          "config_key": "lockfile",
          "default": "<default>",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--ipython-lockfile=<str>"
          ],
          "env_var": "PANTS_IPYTHON_LOCKFILE",
          "help": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.12.1/src/python/pants/backend/python/subsystems/ipython.lock for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 generate-lockfiles --resolve=ipython`.\n\nAs explained at https://www.pantsbuild.org/v2.12/docs/python-third-party-dependencies, lockfile generation via `generate-lockfiles` does not always work and you may want to manually generate the lockfile. You will want to set `[python].invalid_lockfile_behavior = 'ignore'` so that Pants does not complain about missing lockfile headers.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--ipython-lockfile"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--lockfile"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "<default>"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--ipython-console-script=<str>",
          "config_key": "console_script",
          "default": "ipython",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--ipython-console-script=<str>"
          ],
          "env_var": "PANTS_IPYTHON_CONSOLE_SCRIPT",
          "help": "The console script for the tool. Using this option is generally preferable to (and mutually exclusive with) specifying an --entry-point since console script names have a higher expectation of staying stable across releases of the tool. Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--ipython-console-script"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--console-script"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "ipython"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--ipython-entry-point=<str>",
          "config_key": "entry_point",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--ipython-entry-point=<str>"
          ],
          "env_var": "PANTS_IPYTHON_ENTRY_POINT",
          "help": "The entry point for the tool. Generally you only want to use this option if the tool does not offer a --console-script (which this option is mutually exclusive with). Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--ipython-entry-point"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--entry-point"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]ipython-ignore-cwd",
          "config_key": "ignore_cwd",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]ipython-ignore-cwd"
          ],
          "env_var": "PANTS_IPYTHON_IGNORE_CWD",
          "help": "Whether to tell IPython not to put the CWD on the import path.\n\nNormally you want this to be True, so that imports come from the hermetic environment Pants creates.\n\nHowever IPython<7.13.0 doesn't support this option, so if you're using an earlier version (e.g., because you have Python 2.7 code) then you will need to set this to False, and you may have issues with imports from your CWD shading the hermetic environment.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--ipython-ignore-cwd",
            "--no-ipython-ignore-cwd"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--ignore-cwd",
            "--no-ignore-cwd"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        }
      ],
      "basic": [],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "The IPython enhanced REPL (https://ipython.org/).",
      "is_goal": false,
      "provider": "pants.backend.python",
      "scope": "ipython"
    },
    "isort": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--isort-version=<str>",
          "config_key": "version",
          "default": "isort[pyproject,colors]>=5.9.3,<6.0",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--isort-version=<str>"
          ],
          "env_var": "PANTS_ISORT_VERSION",
          "help": "Requirement string for the tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--isort-version"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "isort[pyproject,colors]>=5.9.3,<6.0"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--isort-extra-requirements=\"['<str>', '<str>', ...]\"",
          "config_key": "extra_requirements",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--isort-extra-requirements=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_ISORT_EXTRA_REQUIREMENTS",
          "help": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--isort-extra-requirements"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--extra-requirements"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--isort-interpreter-constraints=\"['<str>', '<str>', ...]\"",
          "config_key": "interpreter_constraints",
          "default": [
            "CPython>=3.7,<4"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--isort-interpreter-constraints=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_ISORT_INTERPRETER_CONSTRAINTS",
          "help": "Python interpreter constraints for this tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--isort-interpreter-constraints"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--interpreter-constraints"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "CPython>=3.7,<4"
                ]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--isort-lockfile=<str>",
          "config_key": "lockfile",
          "default": "<default>",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--isort-lockfile=<str>"
          ],
          "env_var": "PANTS_ISORT_LOCKFILE",
          "help": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.12.1/src/python/pants/backend/python/lint/isort/isort.lock for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 generate-lockfiles --resolve=isort`.\n\nAs explained at https://www.pantsbuild.org/v2.12/docs/python-third-party-dependencies, lockfile generation via `generate-lockfiles` does not always work and you may want to manually generate the lockfile. You will want to set `[python].invalid_lockfile_behavior = 'ignore'` so that Pants does not complain about missing lockfile headers.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--isort-lockfile"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--lockfile"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "<default>"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--isort-console-script=<str>",
          "config_key": "console_script",
          "default": "isort",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--isort-console-script=<str>"
          ],
          "env_var": "PANTS_ISORT_CONSOLE_SCRIPT",
          "help": "The console script for the tool. Using this option is generally preferable to (and mutually exclusive with) specifying an --entry-point since console script names have a higher expectation of staying stable across releases of the tool. Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--isort-console-script"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--console-script"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "isort"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--isort-entry-point=<str>",
          "config_key": "entry_point",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--isort-entry-point=<str>"
          ],
          "env_var": "PANTS_ISORT_ENTRY_POINT",
          "help": "The entry point for the tool. Generally you only want to use this option if the tool does not offer a --console-script (which this option is mutually exclusive with). Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--isort-entry-point"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--entry-point"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--isort-config=\"[<file_option>, <file_option>, ...]\"",
          "config_key": "config",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--isort-config=\"[<file_option>, <file_option>, ...]\""
          ],
          "env_var": "PANTS_ISORT_CONFIG",
          "help": "Path to config file understood by isort (https://pycqa.github.io/isort/docs/configuration/config_files/).\n\nSetting this option will disable `[isort].config_discovery`. Use this option if the config is located in a non-standard location.\n\nIf using isort 5+ and you specify only 1 config file, Pants will configure isort's argv to point to your config file.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--isort-config"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--config"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]isort-config-discovery",
          "config_key": "config_discovery",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]isort-config-discovery"
          ],
          "env_var": "PANTS_ISORT_CONFIG_DISCOVERY",
          "help": "If true, Pants will include any relevant config files during runs (`.isort.cfg`, `pyproject.toml`, `setup.cfg`, `tox.ini` and `.editorconfig`).\n\nUse `[isort].config` instead if your config is in a non-standard location.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--isort-config-discovery",
            "--no-isort-config-discovery"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--config-discovery",
            "--no-config-discovery"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]isort-skip",
          "config_key": "skip",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]isort-skip"
          ],
          "env_var": "PANTS_ISORT_SKIP",
          "help": "Don't use isort when running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 fmt` and `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 lint`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--isort-skip",
            "--no-isort-skip"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--skip",
            "--no-skip"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--isort-args=\"[<shell_str>, <shell_str>, ...]\"",
          "config_key": "args",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--isort-args=\"[<shell_str>, <shell_str>, ...]\""
          ],
          "env_var": "PANTS_ISORT_ARGS",
          "help": "Arguments to pass directly to isort, e.g. `--isort-args='--case-sensitive --trailing-comma'`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--isort-args"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--args"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]isort-export",
          "config_key": "export",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]isort-export"
          ],
          "env_var": "PANTS_ISORT_EXPORT",
          "help": "If true, export a virtual environment with isort when running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 export`.\n\nThis can be useful, for example, with IDE integrations to point your editor to the tool's binary.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--isort-export",
            "--no-isort-export"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--export",
            "--no-export"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "The Python import sorter tool (https://pycqa.github.io/isort/).",
      "is_goal": false,
      "provider": "pants.backend.python.lint.isort",
      "scope": "isort"
    },
    "java-infer": {
      "advanced": [],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]java-infer-imports",
          "config_key": "imports",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]java-infer-imports"
          ],
          "env_var": "PANTS_JAVA_INFER_IMPORTS",
          "help": "Infer a target's dependencies by parsing import statements from sources.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--java-infer-imports",
            "--no-java-infer-imports"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--imports",
            "--no-imports"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]java-infer-consumed-types",
          "config_key": "consumed_types",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]java-infer-consumed-types"
          ],
          "env_var": "PANTS_JAVA_INFER_CONSUMED_TYPES",
          "help": "Infer a target's dependencies by parsing consumed types from sources.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--java-infer-consumed-types",
            "--no-java-infer-consumed-types"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--consumed-types",
            "--no-consumed-types"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--java-infer-third-party-import-mapping=\"{'key1': val1, 'key2': val2, ...}\"",
          "config_key": "third_party_import_mapping",
          "default": {},
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--java-infer-third-party-import-mapping=\"{'key1': val1, 'key2': val2, ...}\""
          ],
          "env_var": "PANTS_JAVA_INFER_THIRD_PARTY_IMPORT_MAPPING",
          "help": "A dictionary mapping a Java package path to a JVM artifact coordinate (GROUP:ARTIFACT) without the version.\n\nSee `jvm_artifact` for more information on the mapping syntax.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--java-infer-third-party-import-mapping"
          ],
          "typ": "dict",
          "unscoped_cmd_line_args": [
            "--third-party-import-mapping"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": {}
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": {}
              }
            ]
          }
        }
      ],
      "deprecated": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]java-infer-third-party-imports",
          "config_key": "third_party_imports",
          "default": true,
          "deprecated_message": "Deprecated, is scheduled to be removed in version: 2.13.0.dev0.",
          "deprecation_active": true,
          "display_args": [
            "--[no-]java-infer-third-party-imports"
          ],
          "env_var": "PANTS_JAVA_INFER_THIRD_PARTY_IMPORTS",
          "help": "Infer a target's third-party dependencies using Java import statements.",
          "removal_hint": "Controlled by the `--imports` flag.",
          "removal_version": "2.13.0.dev0",
          "scoped_cmd_line_args": [
            "--java-infer-third-party-imports",
            "--no-java-infer-third-party-imports"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--third-party-imports",
            "--no-third-party-imports"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        }
      ],
      "deprecated_scope": null,
      "description": "Options controlling which dependencies will be inferred for Java targets.",
      "is_goal": false,
      "provider": "pants.backend.experimental.java",
      "scope": "java-infer"
    },
    "javac": {
      "advanced": [],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--javac-args=\"[<shell_str>, <shell_str>, ...]\"",
          "config_key": "args",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--javac-args=\"[<shell_str>, <shell_str>, ...]\""
          ],
          "env_var": "PANTS_JAVAC_ARGS",
          "help": "Arguments to pass directly to javac, e.g. `--javac-args='-g -deprecation'`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--javac-args"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--args"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "The javac Java source compiler.",
      "is_goal": false,
      "provider": "pants.backend.experimental.java",
      "scope": "javac"
    },
    "junit": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--junit-version=<str>",
          "config_key": "version",
          "default": "5.7.2",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--junit-version=<str>"
          ],
          "env_var": "PANTS_JUNIT_VERSION",
          "help": "Version string for the tool. This is available for substitution in the `[junit].artifacts` option by including the string `{version}`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--junit-version"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "5.7.2"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--junit-artifacts=\"['<str>', '<str>', ...]\"",
          "config_key": "artifacts",
          "default": [
            "org.junit.platform:junit-platform-console:1.7.2",
            "org.junit.jupiter:junit-jupiter-engine:{version}",
            "org.junit.vintage:junit-vintage-engine:{version}"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--junit-artifacts=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_JUNIT_ARTIFACTS",
          "help": "Artifact requirements for this tool using specified as either the address of a `jvm_artifact` target or, alternatively, as a colon-separated Maven coordinates (e.g., group:name:version). For Maven coordinates, the string `{version}` version will be substituted with the value of the `[junit].version` option.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--junit-artifacts"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--artifacts"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "org.junit.platform:junit-platform-console:1.7.2",
                  "org.junit.jupiter:junit-jupiter-engine:{version}",
                  "org.junit.vintage:junit-vintage-engine:{version}"
                ]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--junit-lockfile=<str>",
          "config_key": "lockfile",
          "default": "<default>",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--junit-lockfile=<str>"
          ],
          "env_var": "PANTS_JUNIT_LOCKFILE",
          "help": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` option. See https://github.com/pantsbuild/pants/blob/release_2.12.1/src/python/pants/jvm/test/junit.default.lockfile.txt for the default lockfile contents.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 jvm-generate-lockfiles --resolve=junit`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--junit-lockfile"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--lockfile"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "<default>"
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--junit-args=\"[<shell_str>, <shell_str>, ...]\", ... -- [<shell_str> [<shell_str> [...]]]",
          "config_key": "args",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--junit-args=\"[<shell_str>, <shell_str>, ...]\"",
            "... -- [<shell_str> [<shell_str> [...]]]"
          ],
          "env_var": "PANTS_JUNIT_ARGS",
          "help": "Arguments to pass directly to JUnit, e.g. `--junit-args='--disable-ansi-colors'`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--junit-args"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--args"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "from command-line flag",
                "rank": "FLAG",
                "value": []
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "The JUnit test framework (https://junit.org)",
      "is_goal": false,
      "provider": "pants.backend.experimental.java",
      "scope": "junit"
    },
    "jvm": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--jvm-tool-jdk=<str>",
          "config_key": "tool_jdk",
          "default": "temurin:1.11",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--jvm-tool-jdk=<str>"
          ],
          "env_var": "PANTS_JVM_TOOL_JDK",
          "help": "The JDK to use when building and running Pants' internal JVM support code and other non-compiler tools. See `jvm` help for supported values.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--jvm-tool-jdk"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--tool-jdk"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "temurin:1.11"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--jvm-jdk=<str>",
          "config_key": "jdk",
          "default": "temurin:1.11",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--jvm-jdk=<str>"
          ],
          "env_var": "PANTS_JVM_JDK",
          "help": "The JDK to use.\n\nThis string will be passed directly to Coursier's `--jvm` parameter. Run `cs java --available` to see a list of available JVM versions on your platform.\n\nIf the string 'system' is passed, Coursier's `--system-jvm` option will be used instead, but note that this can lead to inconsistent behavior since the JVM version will be whatever happens to be found first on the system's PATH.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--jvm-jdk"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--jdk"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "temurin:1.11"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--jvm-global-options=\"['<str>', '<str>', ...]\"",
          "config_key": "global_options",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--jvm-global-options=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_JVM_GLOBAL_OPTIONS",
          "help": "List of JVM options to pass to all JVM processes.\n\nOptions set here will be used by any JVM processes required by Pants, with the exception of heap memory settings like `-Xmx`, which need to be set using `[GLOBAL].process_total_child_memory_usage` and `[GLOBAL].process_per_child_memory_usage`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--jvm-global-options"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--global-options"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--jvm-resolves=\"{'key1': val1, 'key2': val2, ...}\"",
          "config_key": "resolves",
          "default": {
            "jvm-default": "3rdparty/jvm/default.lock"
          },
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--jvm-resolves=\"{'key1': val1, 'key2': val2, ...}\""
          ],
          "env_var": "PANTS_JVM_RESOLVES",
          "help": "A dictionary mapping resolve names to the path of their lockfile.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--jvm-resolves"
          ],
          "typ": "dict",
          "unscoped_cmd_line_args": [
            "--resolves"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": {}
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": {
                  "jvm-default": "3rdparty/jvm/default.lock"
                }
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--jvm-default-resolve=<str>",
          "config_key": "default_resolve",
          "default": "jvm-default",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--jvm-default-resolve=<str>"
          ],
          "env_var": "PANTS_JVM_DEFAULT_RESOLVE",
          "help": "The default value used for the `resolve` and `compatible_resolves` fields.\n\nThe name must be defined as a resolve in `[jvm].resolves`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--jvm-default-resolve"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--default-resolve"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "jvm-default"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--jvm-debug-args=\"['<str>', '<str>', ...]\"",
          "config_key": "debug_args",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--jvm-debug-args=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_JVM_DEBUG_ARGS",
          "help": "Extra JVM arguments to use when running tests in debug mode.\n\nFor example, if you want to attach a remote debugger, use something like ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005']",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--jvm-debug-args"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--debug-args"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Options for general JVM functionality.\n\nJDK strings will be passed directly to Coursier's `--jvm` parameter. Run `cs java --available` to see a list of available JVM versions on your platform.\n\nIf the string 'system' is passed, Coursier's `--system-jvm` option will be used instead, but note that this can lead to inconsistent behavior since the JVM version will be whatever happens to be found first on the system's PATH.",
      "is_goal": false,
      "provider": "pants.backend.experimental.java",
      "scope": "jvm"
    },
    "kotlin": {
      "advanced": [],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--kotlin-version-for-resolve=\"{'key1': val1, 'key2': val2, ...}\"",
          "config_key": "version_for_resolve",
          "default": {},
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--kotlin-version-for-resolve=\"{'key1': val1, 'key2': val2, ...}\""
          ],
          "env_var": "PANTS_KOTLIN_VERSION_FOR_RESOLVE",
          "help": "A dictionary mapping the name of a resolve to the Kotlin version to use for all Kotlin targets consuming that resolve.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--kotlin-version-for-resolve"
          ],
          "typ": "dict",
          "unscoped_cmd_line_args": [
            "--version-for-resolve"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": {}
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": {}
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "The Kotlin programming language (https://kotlinlang.org/).",
      "is_goal": false,
      "provider": "pants.backend.experimental.kotlin",
      "scope": "kotlin"
    },
    "kotlin-infer": {
      "advanced": [],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]kotlin-infer-imports",
          "config_key": "imports",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]kotlin-infer-imports"
          ],
          "env_var": "PANTS_KOTLIN_INFER_IMPORTS",
          "help": "Infer a target's dependencies by parsing import statements from sources.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--kotlin-infer-imports",
            "--no-kotlin-infer-imports"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--imports",
            "--no-imports"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]kotlin-infer-consumed-types",
          "config_key": "consumed_types",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]kotlin-infer-consumed-types"
          ],
          "env_var": "PANTS_KOTLIN_INFER_CONSUMED_TYPES",
          "help": "Infer a target's dependencies by parsing consumed types from sources.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--kotlin-infer-consumed-types",
            "--no-kotlin-infer-consumed-types"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--consumed-types",
            "--no-consumed-types"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Options controlling which dependencies will be inferred for Kotlin targets.",
      "is_goal": false,
      "provider": "pants.backend.experimental.kotlin",
      "scope": "kotlin-infer"
    },
    "kotlinc": {
      "advanced": [],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--kotlinc-args=\"[<shell_str>, <shell_str>, ...]\"",
          "config_key": "args",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--kotlinc-args=\"[<shell_str>, <shell_str>, ...]\""
          ],
          "env_var": "PANTS_KOTLINC_ARGS",
          "help": "Arguments to pass directly to kotlinc, e.g. `--kotlinc-args='-Werror'`.\n\nSee https://kotlinlang.org/docs/compiler-reference.html for supported arguments.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--kotlinc-args"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--args"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--kotlinc-plugins-for-resolve=\"{'key1': val1, 'key2': val2, ...}\"",
          "config_key": "plugins_for_resolve",
          "default": {},
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--kotlinc-plugins-for-resolve=\"{'key1': val1, 'key2': val2, ...}\""
          ],
          "env_var": "PANTS_KOTLINC_PLUGINS_FOR_RESOLVE",
          "help": "A dictionary, whose keys are the names of each JVM resolve that requires default `kotlinc` plugins, and the value is a comma-separated string consisting of kotlinc plugin names. Each specified plugin must have a corresponding `kotlinc_plugin` target that specifies that name in either its `plugin_name` field or is the same as its target name.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--kotlinc-plugins-for-resolve"
          ],
          "typ": "dict",
          "unscoped_cmd_line_args": [
            "--plugins-for-resolve"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": {}
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": {}
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "The Kotlin programming language (https://kotlinlang.org/).",
      "is_goal": false,
      "provider": "pants.backend.experimental.kotlin",
      "scope": "kotlinc"
    },
    "ktlint": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--ktlint-version=<str>",
          "config_key": "version",
          "default": "0.45.2",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--ktlint-version=<str>"
          ],
          "env_var": "PANTS_KTLINT_VERSION",
          "help": "Version string for the tool. This is available for substitution in the `[ktlint].artifacts` option by including the string `{version}`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--ktlint-version"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "0.45.2"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--ktlint-artifacts=\"['<str>', '<str>', ...]\"",
          "config_key": "artifacts",
          "default": [
            "com.pinterest:ktlint:{version}"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--ktlint-artifacts=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_KTLINT_ARTIFACTS",
          "help": "Artifact requirements for this tool using specified as either the address of a `jvm_artifact` target or, alternatively, as a colon-separated Maven coordinates (e.g., group:name:version). For Maven coordinates, the string `{version}` version will be substituted with the value of the `[ktlint].version` option.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--ktlint-artifacts"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--artifacts"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "com.pinterest:ktlint:{version}"
                ]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--ktlint-lockfile=<str>",
          "config_key": "lockfile",
          "default": "<default>",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--ktlint-lockfile=<str>"
          ],
          "env_var": "PANTS_KTLINT_LOCKFILE",
          "help": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` option. See https://github.com/pantsbuild/pants/blob/release_2.12.1/src/python/pants/backend/kotlin/lint/ktlint/ktlint.lock for the default lockfile contents.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 jvm-generate-lockfiles --resolve=ktlint`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--ktlint-lockfile"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--lockfile"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "<default>"
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]ktlint-skip",
          "config_key": "skip",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]ktlint-skip"
          ],
          "env_var": "PANTS_KTLINT_SKIP",
          "help": "Don't use Ktlint when running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 fmt` and `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 lint`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--ktlint-skip",
            "--no-ktlint-skip"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--skip",
            "--no-skip"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Ktlint, the anti-bikeshedding Kotlin linter with built-in formatter (https://ktlint.github.io/)",
      "is_goal": false,
      "provider": "pants.backend.experimental.kotlin.lint.ktlint",
      "scope": "ktlint"
    },
    "lambdex": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--lambdex-version=<str>",
          "config_key": "version",
          "default": "lambdex==0.1.6",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--lambdex-version=<str>"
          ],
          "env_var": "PANTS_LAMBDEX_VERSION",
          "help": "Requirement string for the tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--lambdex-version"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "lambdex==0.1.6"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--lambdex-extra-requirements=\"['<str>', '<str>', ...]\"",
          "config_key": "extra_requirements",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--lambdex-extra-requirements=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_LAMBDEX_EXTRA_REQUIREMENTS",
          "help": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--lambdex-extra-requirements"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--extra-requirements"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--lambdex-interpreter-constraints=\"['<str>', '<str>', ...]\"",
          "config_key": "interpreter_constraints",
          "default": [
            "CPython>=3.7,<3.10"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--lambdex-interpreter-constraints=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_LAMBDEX_INTERPRETER_CONSTRAINTS",
          "help": "Python interpreter constraints for this tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--lambdex-interpreter-constraints"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--interpreter-constraints"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "CPython>=3.7,<3.10"
                ]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--lambdex-lockfile=<str>",
          "config_key": "lockfile",
          "default": "<default>",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--lambdex-lockfile=<str>"
          ],
          "env_var": "PANTS_LAMBDEX_LOCKFILE",
          "help": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.12.1/src/python/pants/backend/python/subsystems/lambdex.lock for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 generate-lockfiles --resolve=lambdex`.\n\nAs explained at https://www.pantsbuild.org/v2.12/docs/python-third-party-dependencies, lockfile generation via `generate-lockfiles` does not always work and you may want to manually generate the lockfile. You will want to set `[python].invalid_lockfile_behavior = 'ignore'` so that Pants does not complain about missing lockfile headers.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--lambdex-lockfile"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--lockfile"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "<default>"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--lambdex-console-script=<str>",
          "config_key": "console_script",
          "default": "lambdex",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--lambdex-console-script=<str>"
          ],
          "env_var": "PANTS_LAMBDEX_CONSOLE_SCRIPT",
          "help": "The console script for the tool. Using this option is generally preferable to (and mutually exclusive with) specifying an --entry-point since console script names have a higher expectation of staying stable across releases of the tool. Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--lambdex-console-script"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--console-script"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "lambdex"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--lambdex-entry-point=<str>",
          "config_key": "entry_point",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--lambdex-entry-point=<str>"
          ],
          "env_var": "PANTS_LAMBDEX_ENTRY_POINT",
          "help": "The entry point for the tool. Generally you only want to use this option if the tool does not offer a --console-script (which this option is mutually exclusive with). Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--lambdex-entry-point"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--entry-point"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        }
      ],
      "basic": [],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "A tool for turning .pex files into Function-as-a-Service artifacts (https://github.com/pantsbuild/lambdex).",
      "is_goal": false,
      "provider": "pants.backend.awslambda.python",
      "scope": "lambdex"
    },
    "lint": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--lint-batch-size=<int>",
          "config_key": "batch_size",
          "default": 128,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--lint-batch-size=<int>"
          ],
          "env_var": "PANTS_LINT_BATCH_SIZE",
          "help": "The target number of files to be included in each linter batch.\n\nLinter processes are batched for a few reasons:\n\n1. to avoid OS argument length limits (in processes which don't support argument files)\n2. to support more stable cache keys than would be possible if all files were operated on in a single batch.\n3. to allow for parallelism in linter processes which don't have internal parallelism, or -- if they do support internal parallelism -- to improve scheduling behavior when multiple processes are competing for cores and so internal parallelism cannot be used perfectly.\n\nIn order to improve cache hit rates (see 2.), batches are created at stable boundaries, and so this value is only a \"target\" batch size (rather than an exact value).",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--lint-batch-size"
          ],
          "typ": "int",
          "unscoped_cmd_line_args": [
            "--batch-size"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": 128
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--lint-only=\"['<str>', '<str>', ...]\"",
          "config_key": "only",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--lint-only=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_LINT_ONLY",
          "help": "Only run these linters and skip all others.\n\nThe linter names are outputted at the final summary of running this goal, e.g. `flake8` and `shellcheck`. You can also run `lint --only=fake` to get a list of all activated linters.\n\nYou can repeat this option, e.g. `lint --only=flake8 --only=shellcheck` or `lint --only=['flake8', 'shellcheck']`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--lint-only"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--only"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Run all linters and/or formatters in check mode.",
      "is_goal": true,
      "provider": "pants.core",
      "scope": "lint"
    },
    "list": {
      "advanced": [],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--list-output-file=<path>",
          "config_key": "output_file",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--list-output-file=<path>"
          ],
          "env_var": "PANTS_LIST_OUTPUT_FILE",
          "help": "Output the goal's stdout to this file. If unspecified, outputs to stdout.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--list-output-file"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--output-file"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--list-sep=<separator>",
          "config_key": "sep",
          "default": "\\n",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--list-sep=<separator>"
          ],
          "env_var": "PANTS_LIST_SEP",
          "help": "String to use to separate lines in line-oriented output.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--list-sep"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--sep"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "\\n"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]list-documented",
          "config_key": "documented",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]list-documented"
          ],
          "env_var": "PANTS_LIST_DOCUMENTED",
          "help": "Print only targets that are documented with a description.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--list-documented",
            "--no-list-documented"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--documented",
            "--no-documented"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Lists all targets matching the file or target arguments.",
      "is_goal": true,
      "provider": "pants.backend.project_info",
      "scope": "list"
    },
    "mypy": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--mypy-version=<str>",
          "config_key": "version",
          "default": "mypy==0.910",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--mypy-version=<str>"
          ],
          "env_var": "PANTS_MYPY_VERSION",
          "help": "Requirement string for the tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--mypy-version"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "mypy==0.910"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--mypy-extra-requirements=\"['<str>', '<str>', ...]\"",
          "config_key": "extra_requirements",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--mypy-extra-requirements=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_MYPY_EXTRA_REQUIREMENTS",
          "help": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--mypy-extra-requirements"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--extra-requirements"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--mypy-interpreter-constraints=\"['<str>', '<str>', ...]\"",
          "config_key": "interpreter_constraints",
          "default": [
            "CPython>=3.7,<4"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--mypy-interpreter-constraints=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_MYPY_INTERPRETER_CONSTRAINTS",
          "help": "Python interpreter constraints for this tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--mypy-interpreter-constraints"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--interpreter-constraints"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "CPython>=3.7,<4"
                ]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--mypy-lockfile=<str>",
          "config_key": "lockfile",
          "default": "<default>",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--mypy-lockfile=<str>"
          ],
          "env_var": "PANTS_MYPY_LOCKFILE",
          "help": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.12.1/src/python/pants/backend/python/typecheck/mypy/mypy.lock for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 generate-lockfiles --resolve=mypy`.\n\nAs explained at https://www.pantsbuild.org/v2.12/docs/python-third-party-dependencies, lockfile generation via `generate-lockfiles` does not always work and you may want to manually generate the lockfile. You will want to set `[python].invalid_lockfile_behavior = 'ignore'` so that Pants does not complain about missing lockfile headers.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--mypy-lockfile"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--lockfile"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "<default>"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--mypy-console-script=<str>",
          "config_key": "console_script",
          "default": "mypy",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--mypy-console-script=<str>"
          ],
          "env_var": "PANTS_MYPY_CONSOLE_SCRIPT",
          "help": "The console script for the tool. Using this option is generally preferable to (and mutually exclusive with) specifying an --entry-point since console script names have a higher expectation of staying stable across releases of the tool. Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--mypy-console-script"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--console-script"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "mypy"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--mypy-entry-point=<str>",
          "config_key": "entry_point",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--mypy-entry-point=<str>"
          ],
          "env_var": "PANTS_MYPY_ENTRY_POINT",
          "help": "The entry point for the tool. Generally you only want to use this option if the tool does not offer a --console-script (which this option is mutually exclusive with). Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--mypy-entry-point"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--entry-point"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--mypy-config=<file_option>",
          "config_key": "config",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--mypy-config=<file_option>"
          ],
          "env_var": "PANTS_MYPY_CONFIG",
          "help": "Path to a config file understood by MyPy (https://mypy.readthedocs.io/en/stable/config_file.html).\n\nSetting this option will disable `[mypy].config_discovery`. Use this option if the config is located in a non-standard location.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--mypy-config"
          ],
          "typ": "file_option",
          "unscoped_cmd_line_args": [
            "--config"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]mypy-config-discovery",
          "config_key": "config_discovery",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]mypy-config-discovery"
          ],
          "env_var": "PANTS_MYPY_CONFIG_DISCOVERY",
          "help": "If true, Pants will include any relevant config files during runs (`mypy.ini`, `.mypy.ini`, and `setup.cfg`).\n\nUse `[mypy].config` instead if your config is in a non-standard location.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--mypy-config-discovery",
            "--no-mypy-config-discovery"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--config-discovery",
            "--no-config-discovery"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--mypy-source-plugins=\"[<target_option>, <target_option>, ...]\"",
          "config_key": "source_plugins",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--mypy-source-plugins=\"[<target_option>, <target_option>, ...]\""
          ],
          "env_var": "PANTS_MYPY_SOURCE_PLUGINS",
          "help": "An optional list of `python_sources` target addresses to load first-party plugins.\n\nYou must also set `plugins = path.to.module` in your `mypy.ini`, and set the `[mypy].config` option in your `pants.toml`.\n\nTo instead load third-party plugins, set the option `[mypy].extra_requirements` and set the `plugins` option in `mypy.ini`. Tip: it's often helpful to define a dedicated 'resolve' via `[python].resolves` for your MyPy plugins such as 'mypy-plugins' so that the third-party requirements used by your plugin, like `mypy`, do not mix with the rest of your project. Read that option's help message for more info on resolves.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--mypy-source-plugins"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--source-plugins"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--mypy-extra-type-stubs=\"['<str>', '<str>', ...]\"",
          "config_key": "extra_type_stubs",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--mypy-extra-type-stubs=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_MYPY_EXTRA_TYPE_STUBS",
          "help": "Extra type stub requirements to install when running MyPy.\n\nNormally, type stubs can be installed as typical requirements, such as putting them in `requirements.txt` or using a `python_requirement` target. Alternatively, you can use this option so that the dependencies are solely used when running MyPy and are not runtime dependencies.\n\nExpects a list of pip-style requirement strings, like `['types-requests==2.25.9']`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--mypy-extra-type-stubs"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--extra-type-stubs"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]mypy-skip",
          "config_key": "skip",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]mypy-skip"
          ],
          "env_var": "PANTS_MYPY_SKIP",
          "help": "Don't use MyPy when running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 check`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--mypy-skip",
            "--no-mypy-skip"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--skip",
            "--no-skip"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--mypy-args=\"[<shell_str>, <shell_str>, ...]\"",
          "config_key": "args",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--mypy-args=\"[<shell_str>, <shell_str>, ...]\""
          ],
          "env_var": "PANTS_MYPY_ARGS",
          "help": "Arguments to pass directly to MyPy, e.g. `--mypy-args='--python-version 3.7 --disallow-any-expr'`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--mypy-args"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--args"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]mypy-export",
          "config_key": "export",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]mypy-export"
          ],
          "env_var": "PANTS_MYPY_EXPORT",
          "help": "If true, export a virtual environment with MyPy when running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 export`.\n\nThis can be useful, for example, with IDE integrations to point your editor to the tool's binary.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--mypy-export",
            "--no-mypy-export"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--export",
            "--no-export"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "The MyPy Python type checker (http://mypy-lang.org/).",
      "is_goal": false,
      "provider": "pants.backend.python.typecheck.mypy",
      "scope": "mypy"
    },
    "mypy-protobuf": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--mypy-protobuf-version=<str>",
          "config_key": "version",
          "default": "mypy-protobuf==2.10",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--mypy-protobuf-version=<str>"
          ],
          "env_var": "PANTS_MYPY_PROTOBUF_VERSION",
          "help": "Requirement string for the tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--mypy-protobuf-version"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "mypy-protobuf==2.10"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--mypy-protobuf-extra-requirements=\"['<str>', '<str>', ...]\"",
          "config_key": "extra_requirements",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--mypy-protobuf-extra-requirements=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_MYPY_PROTOBUF_EXTRA_REQUIREMENTS",
          "help": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--mypy-protobuf-extra-requirements"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--extra-requirements"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--mypy-protobuf-interpreter-constraints=\"['<str>', '<str>', ...]\"",
          "config_key": "interpreter_constraints",
          "default": [
            "CPython>=3.7,<4"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--mypy-protobuf-interpreter-constraints=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_MYPY_PROTOBUF_INTERPRETER_CONSTRAINTS",
          "help": "Python interpreter constraints for this tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--mypy-protobuf-interpreter-constraints"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--interpreter-constraints"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "CPython>=3.7,<4"
                ]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--mypy-protobuf-lockfile=<str>",
          "config_key": "lockfile",
          "default": "<default>",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--mypy-protobuf-lockfile=<str>"
          ],
          "env_var": "PANTS_MYPY_PROTOBUF_LOCKFILE",
          "help": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.12.1/src/python/pants/backend/codegen/protobuf/python/mypy_protobuf.lock for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 generate-lockfiles --resolve=mypy-protobuf`.\n\nAs explained at https://www.pantsbuild.org/v2.12/docs/python-third-party-dependencies, lockfile generation via `generate-lockfiles` does not always work and you may want to manually generate the lockfile. You will want to set `[python].invalid_lockfile_behavior = 'ignore'` so that Pants does not complain about missing lockfile headers.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--mypy-protobuf-lockfile"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--lockfile"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "<default>"
              }
            ]
          }
        }
      ],
      "basic": [],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Configuration of the mypy-protobuf type stub generation plugin.",
      "is_goal": false,
      "provider": "pants.backend.codegen.protobuf.python",
      "scope": "mypy-protobuf"
    },
    "package": {
      "advanced": [],
      "basic": [],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Create a distributable package.",
      "is_goal": true,
      "provider": "pants.core",
      "scope": "package"
    },
    "paths": {
      "advanced": [],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--paths-output-file=<path>",
          "config_key": "output_file",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--paths-output-file=<path>"
          ],
          "env_var": "PANTS_PATHS_OUTPUT_FILE",
          "help": "Output the goal's stdout to this file. If unspecified, outputs to stdout.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--paths-output-file"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--output-file"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--paths-from=<str>",
          "config_key": "from",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--paths-from=<str>"
          ],
          "env_var": "PANTS_PATHS_FROM",
          "help": "The path starting address",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--paths-from"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--from"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--paths-to=<str>",
          "config_key": "to",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--paths-to=<str>"
          ],
          "env_var": "PANTS_PATHS_TO",
          "help": "The path end address",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--paths-to"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--to"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "List the paths between two addresses.",
      "is_goal": true,
      "provider": "pants.backend.project_info",
      "scope": "paths"
    },
    "peek": {
      "advanced": [],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--peek-output-file=<path>",
          "config_key": "output_file",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--peek-output-file=<path>"
          ],
          "env_var": "PANTS_PEEK_OUTPUT_FILE",
          "help": "Output the goal's stdout to this file. If unspecified, outputs to stdout.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--peek-output-file"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--output-file"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]peek-exclude-defaults",
          "config_key": "exclude_defaults",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]peek-exclude-defaults"
          ],
          "env_var": "PANTS_PEEK_EXCLUDE_DEFAULTS",
          "help": "Whether to leave off values that match the target-defined default values.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--peek-exclude-defaults",
            "--no-peek-exclude-defaults"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--exclude-defaults",
            "--no-exclude-defaults"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Display BUILD target info",
      "is_goal": true,
      "provider": "pants.backend.project_info",
      "scope": "peek"
    },
    "pex": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pex-executable-search-paths=\"[<binary-paths>, <binary-paths>, ...]\"",
          "config_key": "executable_search_paths",
          "default": [
            "<PATH>"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pex-executable-search-paths=\"[<binary-paths>, <binary-paths>, ...]\""
          ],
          "env_var": "PANTS_PEX_EXECUTABLE_SEARCH_PATHS",
          "help": "The PATH value that will be used by the PEX subprocess and any subprocesses it spawns.\n\nThe special string `\"<PATH>\"` will expand to the contents of the PATH env var.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pex-executable-search-paths"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--executable-search-paths"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "<PATH>"
                ]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pex-verbosity=<int>",
          "config_key": "verbosity",
          "default": 0,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pex-verbosity=<int>"
          ],
          "env_var": "PANTS_PEX_VERBOSITY",
          "help": "Set the verbosity level of PEX logging, from 0 (no logging) up to 9 (max logging).",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pex-verbosity"
          ],
          "typ": "int",
          "unscoped_cmd_line_args": [
            "--verbosity"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": 0
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]pex-venv-use-symlinks",
          "config_key": "venv_use_symlinks",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]pex-venv-use-symlinks"
          ],
          "env_var": "PANTS_PEX_VENV_USE_SYMLINKS",
          "help": "When possible, use venvs whose site-packages directories are populated with symlinks.\n\nEnabling this can save space in the `--named-caches-dir` directory and lead to slightly faster execution times for Pants Python goals. Some distributions do not work with symlinked venvs though, so you may not be able to enable this optimization as a result.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pex-venv-use-symlinks",
            "--no-pex-venv-use-symlinks"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--venv-use-symlinks",
            "--no-venv-use-symlinks"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        }
      ],
      "basic": [],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "How Pants uses Pex to run Python subprocesses.",
      "is_goal": false,
      "provider": "pants.core",
      "scope": "pex"
    },
    "pex-binary-defaults": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]pex-binary-defaults-emit-warnings",
          "config_key": "emit_warnings",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]pex-binary-defaults-emit-warnings"
          ],
          "env_var": "PANTS_PEX_BINARY_DEFAULTS_EMIT_WARNINGS",
          "help": "Whether built PEX binaries should emit PEX warnings at runtime by default.\n\nCan be overridden by specifying the `emit_warnings` parameter of individual `pex_binary` targets",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pex-binary-defaults-emit-warnings",
            "--no-pex-binary-defaults-emit-warnings"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--emit-warnings",
            "--no-emit-warnings"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]pex-binary-defaults-resolve-local-platforms",
          "config_key": "resolve_local_platforms",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]pex-binary-defaults-resolve-local-platforms"
          ],
          "env_var": "PANTS_PEX_BINARY_DEFAULTS_RESOLVE_LOCAL_PLATFORMS",
          "help": "For each of the `platforms` specified for a `pex_binary` target, attempt to find a local interpreter that matches.\n\nIf a matching interpreter is found, use the interpreter to resolve distributions and build any that are only available in source distribution form. If no matching interpreter is found (or if this option is `False`), resolve for the platform by accepting only pre-built binary distributions (wheels).",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pex-binary-defaults-resolve-local-platforms",
            "--no-pex-binary-defaults-resolve-local-platforms"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--resolve-local-platforms",
            "--no-resolve-local-platforms"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        }
      ],
      "basic": [],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Default settings for creating PEX executables.",
      "is_goal": false,
      "provider": "pants.backend.python",
      "scope": "pex-binary-defaults"
    },
    "pex-cli": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pex-cli-version=<str>",
          "config_key": "version",
          "default": "v2.1.90",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pex-cli-version=<str>"
          ],
          "env_var": "PANTS_PEX_CLI_VERSION",
          "help": "Use this version of pex.\n\nSupported pex versions: >=2.1.90,<3.0",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pex-cli-version"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "v2.1.90"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pex-cli-known-versions=\"['<str>', '<str>', ...]\"",
          "config_key": "known_versions",
          "default": [
            "v2.1.90|macos_arm64|2781255baf77c2a8fdc85c5e830f7191a6048fd91d2e20b5c7a20e5a0b7beb66|3755345",
            "v2.1.90|macos_x86_64|2781255baf77c2a8fdc85c5e830f7191a6048fd91d2e20b5c7a20e5a0b7beb66|3755345",
            "v2.1.90|linux_x86_64|2781255baf77c2a8fdc85c5e830f7191a6048fd91d2e20b5c7a20e5a0b7beb66|3755345"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pex-cli-known-versions=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_PEX_CLI_KNOWN_VERSIONS",
          "help": "\nKnown versions to verify downloads against.\n\nEach element is a pipe-separated string of `version|platform|sha256|length`, where:\n\n    - `version` is the version string\n    - `platform` is one of [linux_arm64,linux_x86_64,macos_arm64,macos_x86_64],\n    - `sha256` is the 64-character hex representation of the expected sha256\n    digest of the download file, as emitted by `shasum -a 256`\n    - `length` is the expected length of the download file in bytes, as emitted by\n    `wc -c`\n\nE.g., `3.1.2|macos_x86_64|6d0f18cd84b918c7b3edd0203e75569e0c7caecb1367bbbe409b44e28514f5be|42813`.\n\nValues are space-stripped, so pipes can be indented for readability if necessary.\n",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pex-cli-known-versions"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--known-versions"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "v2.1.90|macos_arm64|2781255baf77c2a8fdc85c5e830f7191a6048fd91d2e20b5c7a20e5a0b7beb66|3755345",
                  "v2.1.90|macos_x86_64|2781255baf77c2a8fdc85c5e830f7191a6048fd91d2e20b5c7a20e5a0b7beb66|3755345",
                  "v2.1.90|linux_x86_64|2781255baf77c2a8fdc85c5e830f7191a6048fd91d2e20b5c7a20e5a0b7beb66|3755345"
                ]
              }
            ]
          }
        },
        {
          "choices": [
            "error",
            "warning"
          ],
          "comma_separated_choices": "error, warning",
          "comma_separated_display_args": "--pex-cli-use-unsupported-version=<UnsupportedVersionUsage>",
          "config_key": "use_unsupported_version",
          "default": "error",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pex-cli-use-unsupported-version=<UnsupportedVersionUsage>"
          ],
          "env_var": "PANTS_PEX_CLI_USE_UNSUPPORTED_VERSION",
          "help": "\nWhat action to take in case the requested version of pex is not supported.\n\nSupported pex versions: >=2.1.90,<3.0\n",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pex-cli-use-unsupported-version"
          ],
          "typ": "UnsupportedVersionUsage",
          "unscoped_cmd_line_args": [
            "--use-unsupported-version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "error"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pex-cli-url-template=<str>",
          "config_key": "url_template",
          "default": "https://github.com/pantsbuild/pex/releases/download/{version}/pex",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pex-cli-url-template=<str>"
          ],
          "env_var": "PANTS_PEX_CLI_URL_TEMPLATE",
          "help": "URL to download the tool, either as a single binary file or a compressed file (e.g. zip file). You can change this to point to your own hosted file, e.g. to work with proxies or for access via the filesystem through a `file:$abspath` URL (e.g. `file:/this/is/absolute`, possibly by [templating the buildroot in a config file](https://www.pantsbuild.org/v2.12/docs/options#config-file-entries)).\n\nUse `{version}` to have the value from --version substituted, and `{platform}` to have a value from --url-platform-mapping substituted in, depending on the current platform. For example, https://github.com/.../protoc-{version}-{platform}.zip.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pex-cli-url-template"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--url-template"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "https://github.com/pantsbuild/pex/releases/download/{version}/pex"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pex-cli-url-platform-mapping=\"{'key1': val1, 'key2': val2, ...}\"",
          "config_key": "url_platform_mapping",
          "default": {},
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pex-cli-url-platform-mapping=\"{'key1': val1, 'key2': val2, ...}\""
          ],
          "env_var": "PANTS_PEX_CLI_URL_PLATFORM_MAPPING",
          "help": "A dictionary mapping platforms to strings to be used when generating the URL to download the tool.\n\nIn --url-template, anytime the `{platform}` string is used, Pants will determine the current platform, and substitute `{platform}` with the respective value from your dictionary.\n\nFor example, if you define `{\"macos_x86_64\": \"apple-darwin\", \"linux_x86_64\": \"unknown-linux\"}`, and run Pants on Linux with an intel architecture, then `{platform}` will be substituted in the --url-template option with unknown-linux.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pex-cli-url-platform-mapping"
          ],
          "typ": "dict",
          "unscoped_cmd_line_args": [
            "--url-platform-mapping"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": {}
              }
            ]
          }
        }
      ],
      "basic": [],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "The PEX (Python EXecutable) tool (https://github.com/pantsbuild/pex).",
      "is_goal": false,
      "provider": "pants.core",
      "scope": "pex-cli"
    },
    "poetry": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--poetry-version=<str>",
          "config_key": "version",
          "default": "poetry==1.1.14",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--poetry-version=<str>"
          ],
          "env_var": "PANTS_POETRY_VERSION",
          "help": "Requirement string for the tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--poetry-version"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "poetry==1.1.14"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--poetry-extra-requirements=\"['<str>', '<str>', ...]\"",
          "config_key": "extra_requirements",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--poetry-extra-requirements=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_POETRY_EXTRA_REQUIREMENTS",
          "help": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--poetry-extra-requirements"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--extra-requirements"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--poetry-interpreter-constraints=\"['<str>', '<str>', ...]\"",
          "config_key": "interpreter_constraints",
          "default": [
            "CPython>=3.7,<4"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--poetry-interpreter-constraints=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_POETRY_INTERPRETER_CONSTRAINTS",
          "help": "Python interpreter constraints for this tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--poetry-interpreter-constraints"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--interpreter-constraints"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "CPython>=3.7,<4"
                ]
              }
            ]
          }
        }
      ],
      "basic": [],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Used to generate lockfiles for third-party Python dependencies.",
      "is_goal": false,
      "provider": "pants.backend.docker",
      "scope": "poetry"
    },
    "protoc": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--protoc-version=<str>",
          "config_key": "version",
          "default": "3.20.1",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--protoc-version=<str>"
          ],
          "env_var": "PANTS_PROTOC_VERSION",
          "help": "Use this version of protoc.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--protoc-version"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "3.20.1"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--protoc-known-versions=\"['<str>', '<str>', ...]\"",
          "config_key": "known_versions",
          "default": [
            "3.20.1|linux_arm64 |8a5a51876259f934cd2acc2bc59dba0e9a51bd631a5c37a4b9081d6e4dbc7591|1804837",
            "3.20.1|linux_x86_64|3a0e900f9556fbcac4c3a913a00d07680f0fdf6b990a341462d822247b265562|1714731",
            "3.20.1|macos_arm64 |b362acae78542872bb6aac8dba73aaf0dc6e94991b8b0a065d6c3e703fec2a8b|2708249",
            "3.20.1|macos_x86_64|b4f36b18202d54d343a66eebc9f8ae60809a2a96cc2d1b378137550bbe4cf33c|2708249"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--protoc-known-versions=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_PROTOC_KNOWN_VERSIONS",
          "help": "\nKnown versions to verify downloads against.\n\nEach element is a pipe-separated string of `version|platform|sha256|length`, where:\n\n    - `version` is the version string\n    - `platform` is one of [linux_arm64,linux_x86_64,macos_arm64,macos_x86_64],\n    - `sha256` is the 64-character hex representation of the expected sha256\n    digest of the download file, as emitted by `shasum -a 256`\n    - `length` is the expected length of the download file in bytes, as emitted by\n    `wc -c`\n\nE.g., `3.1.2|macos_x86_64|6d0f18cd84b918c7b3edd0203e75569e0c7caecb1367bbbe409b44e28514f5be|42813`.\n\nValues are space-stripped, so pipes can be indented for readability if necessary.\n",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--protoc-known-versions"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--known-versions"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "3.20.1|linux_arm64 |8a5a51876259f934cd2acc2bc59dba0e9a51bd631a5c37a4b9081d6e4dbc7591|1804837",
                  "3.20.1|linux_x86_64|3a0e900f9556fbcac4c3a913a00d07680f0fdf6b990a341462d822247b265562|1714731",
                  "3.20.1|macos_arm64 |b362acae78542872bb6aac8dba73aaf0dc6e94991b8b0a065d6c3e703fec2a8b|2708249",
                  "3.20.1|macos_x86_64|b4f36b18202d54d343a66eebc9f8ae60809a2a96cc2d1b378137550bbe4cf33c|2708249"
                ]
              }
            ]
          }
        },
        {
          "choices": [
            "error",
            "warning"
          ],
          "comma_separated_choices": "error, warning",
          "comma_separated_display_args": "--protoc-use-unsupported-version=<UnsupportedVersionUsage>",
          "config_key": "use_unsupported_version",
          "default": "error",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--protoc-use-unsupported-version=<UnsupportedVersionUsage>"
          ],
          "env_var": "PANTS_PROTOC_USE_UNSUPPORTED_VERSION",
          "help": "\nWhat action to take in case the requested version of protoc is not supported.\n\nSupported protoc versions: unspecified\n",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--protoc-use-unsupported-version"
          ],
          "typ": "UnsupportedVersionUsage",
          "unscoped_cmd_line_args": [
            "--use-unsupported-version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "error"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--protoc-url-template=<str>",
          "config_key": "url_template",
          "default": "https://github.com/protocolbuffers/protobuf/releases/download/v{version}/protoc-{version}-{platform}.zip",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--protoc-url-template=<str>"
          ],
          "env_var": "PANTS_PROTOC_URL_TEMPLATE",
          "help": "URL to download the tool, either as a single binary file or a compressed file (e.g. zip file). You can change this to point to your own hosted file, e.g. to work with proxies or for access via the filesystem through a `file:$abspath` URL (e.g. `file:/this/is/absolute`, possibly by [templating the buildroot in a config file](https://www.pantsbuild.org/v2.12/docs/options#config-file-entries)).\n\nUse `{version}` to have the value from --version substituted, and `{platform}` to have a value from --url-platform-mapping substituted in, depending on the current platform. For example, https://github.com/.../protoc-{version}-{platform}.zip.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--protoc-url-template"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--url-template"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "https://github.com/protocolbuffers/protobuf/releases/download/v{version}/protoc-{version}-{platform}.zip"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--protoc-url-platform-mapping=\"{'key1': val1, 'key2': val2, ...}\"",
          "config_key": "url_platform_mapping",
          "default": {
            "linux_arm64": "linux-aarch_64",
            "linux_x86_64": "linux-x86_64",
            "macos_arm64": "osx-aarch_64",
            "macos_x86_64": "osx-x86_64"
          },
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--protoc-url-platform-mapping=\"{'key1': val1, 'key2': val2, ...}\""
          ],
          "env_var": "PANTS_PROTOC_URL_PLATFORM_MAPPING",
          "help": "A dictionary mapping platforms to strings to be used when generating the URL to download the tool.\n\nIn --url-template, anytime the `{platform}` string is used, Pants will determine the current platform, and substitute `{platform}` with the respective value from your dictionary.\n\nFor example, if you define `{\"macos_x86_64\": \"apple-darwin\", \"linux_x86_64\": \"unknown-linux\"}`, and run Pants on Linux with an intel architecture, then `{platform}` will be substituted in the --url-template option with unknown-linux.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--protoc-url-platform-mapping"
          ],
          "typ": "dict",
          "unscoped_cmd_line_args": [
            "--url-platform-mapping"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": {}
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": {
                  "linux_arm64": "linux-aarch_64",
                  "linux_x86_64": "linux-x86_64",
                  "macos_arm64": "osx-aarch_64",
                  "macos_x86_64": "osx-x86_64"
                }
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]protoc-dependency-inference",
          "config_key": "dependency_inference",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]protoc-dependency-inference"
          ],
          "env_var": "PANTS_PROTOC_DEPENDENCY_INFERENCE",
          "help": "Infer Protobuf dependencies on other Protobuf files by analyzing import statements.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--protoc-dependency-inference",
            "--no-protoc-dependency-inference"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--dependency-inference",
            "--no-dependency-inference"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "The protocol buffer compiler (https://developers.google.com/protocol-buffers).",
      "is_goal": false,
      "provider": "pants.backend.codegen.protobuf.python",
      "scope": "protoc"
    },
    "publish": {
      "advanced": [],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--publish-output=<str>",
          "config_key": "output",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--publish-output=<str>"
          ],
          "env_var": "PANTS_PUBLISH_OUTPUT",
          "help": "Filename for JSON structured publish information.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--publish-output"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--output"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Publish deliverables (assets, distributions, images, etc).",
      "is_goal": true,
      "provider": "pants.core",
      "scope": "publish"
    },
    "py-constraints": {
      "advanced": [],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--py-constraints-output-file=<path>",
          "config_key": "output_file",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--py-constraints-output-file=<path>"
          ],
          "env_var": "PANTS_PY_CONSTRAINTS_OUTPUT_FILE",
          "help": "Output the goal's stdout to this file. If unspecified, outputs to stdout.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--py-constraints-output-file"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--output-file"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]py-constraints-summary",
          "config_key": "summary",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]py-constraints-summary"
          ],
          "env_var": "PANTS_PY_CONSTRAINTS_SUMMARY",
          "help": "Output a CSV summary of interpreter constraints for your whole repository. The headers are `Target`, `Constraints`, `Transitive Constraints`, `# Dependencies`, and `# Dependees`.\n\nThis information can be useful when prioritizing a migration from one Python version to another (e.g. to Python 3). Use `# Dependencies` and `# Dependees` to help prioritize which targets are easiest to port (low # dependencies) and highest impact to port (high # dependees).\n\nUse a tool like Pandas or Excel to process the CSV. Use the option `--py-constraints-output-file=summary.csv` to write directly to a file.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--py-constraints-summary",
            "--no-py-constraints-summary"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--summary",
            "--no-summary"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Determine what Python interpreter constraints are used by files/targets.",
      "is_goal": true,
      "provider": "pants.backend.python.mixed_interpreter_constraints",
      "scope": "py-constraints"
    },
    "pylint": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pylint-version=<str>",
          "config_key": "version",
          "default": "pylint>=2.11.0,<2.12",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pylint-version=<str>"
          ],
          "env_var": "PANTS_PYLINT_VERSION",
          "help": "Requirement string for the tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pylint-version"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "pylint>=2.11.0,<2.12"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pylint-extra-requirements=\"['<str>', '<str>', ...]\"",
          "config_key": "extra_requirements",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pylint-extra-requirements=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_PYLINT_EXTRA_REQUIREMENTS",
          "help": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pylint-extra-requirements"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--extra-requirements"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pylint-lockfile=<str>",
          "config_key": "lockfile",
          "default": "<default>",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pylint-lockfile=<str>"
          ],
          "env_var": "PANTS_PYLINT_LOCKFILE",
          "help": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.12.1/src/python/pants/backend/python/lint/pylint/pylint.lock for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 generate-lockfiles --resolve=pylint`.\n\nAs explained at https://www.pantsbuild.org/v2.12/docs/python-third-party-dependencies, lockfile generation via `generate-lockfiles` does not always work and you may want to manually generate the lockfile. You will want to set `[python].invalid_lockfile_behavior = 'ignore'` so that Pants does not complain about missing lockfile headers.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pylint-lockfile"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--lockfile"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "<default>"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pylint-console-script=<str>",
          "config_key": "console_script",
          "default": "pylint",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pylint-console-script=<str>"
          ],
          "env_var": "PANTS_PYLINT_CONSOLE_SCRIPT",
          "help": "The console script for the tool. Using this option is generally preferable to (and mutually exclusive with) specifying an --entry-point since console script names have a higher expectation of staying stable across releases of the tool. Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pylint-console-script"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--console-script"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "pylint"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pylint-entry-point=<str>",
          "config_key": "entry_point",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pylint-entry-point=<str>"
          ],
          "env_var": "PANTS_PYLINT_ENTRY_POINT",
          "help": "The entry point for the tool. Generally you only want to use this option if the tool does not offer a --console-script (which this option is mutually exclusive with). Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pylint-entry-point"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--entry-point"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pylint-config=<file_option>",
          "config_key": "config",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pylint-config=<file_option>"
          ],
          "env_var": "PANTS_PYLINT_CONFIG",
          "help": "Path to a config file understood by Pylint (http://pylint.pycqa.org/en/latest/user_guide/run.html#command-line-options).\n\nSetting this option will disable `[pylint].config_discovery`. Use this option if the config is located in a non-standard location.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pylint-config"
          ],
          "typ": "file_option",
          "unscoped_cmd_line_args": [
            "--config"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]pylint-config-discovery",
          "config_key": "config_discovery",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]pylint-config-discovery"
          ],
          "env_var": "PANTS_PYLINT_CONFIG_DISCOVERY",
          "help": "If true, Pants will include any relevant config files during runs (`.pylintrc`, `pylintrc`, `pyproject.toml`, and `setup.cfg`).\n\nUse `[pylint].config` instead if your config is in a non-standard location.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pylint-config-discovery",
            "--no-pylint-config-discovery"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--config-discovery",
            "--no-config-discovery"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pylint-source-plugins=\"[<target_option>, <target_option>, ...]\"",
          "config_key": "source_plugins",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pylint-source-plugins=\"[<target_option>, <target_option>, ...]\""
          ],
          "env_var": "PANTS_PYLINT_SOURCE_PLUGINS",
          "help": "An optional list of `python_sources` target addresses to load first-party plugins.\n\nYou must set the plugin's parent directory as a source root. For example, if your plugin is at `build-support/pylint/custom_plugin.py`, add 'build-support/pylint' to `[source].root_patterns` in `pants.toml`. This is necessary for Pants to know how to tell Pylint to discover your plugin. See https://www.pantsbuild.org/v2.12/docs/source-roots\n\nYou must also set `load-plugins=$module_name` in your Pylint config file.\n\nWhile your plugin's code can depend on other first-party code and third-party requirements, all first-party dependencies of the plugin must live in the same directory or a subdirectory.\n\nTo instead load third-party plugins, set the option `[pylint].extra_requirements` and set the `load-plugins` option in your Pylint config.\n\nTip: it's often helpful to define a dedicated 'resolve' via `[python].resolves` for your Pylint plugins such as 'pylint-plugins' so that the third-party requirements used by your plugin, like `pylint`, do not mix with the rest of your project. Read that option's help message for more info on resolves.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pylint-source-plugins"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--source-plugins"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]pylint-skip",
          "config_key": "skip",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]pylint-skip"
          ],
          "env_var": "PANTS_PYLINT_SKIP",
          "help": "Don't use Pylint when running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 lint`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pylint-skip",
            "--no-pylint-skip"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--skip",
            "--no-skip"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pylint-args=\"[<shell_str>, <shell_str>, ...]\"",
          "config_key": "args",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pylint-args=\"[<shell_str>, <shell_str>, ...]\""
          ],
          "env_var": "PANTS_PYLINT_ARGS",
          "help": "Arguments to pass directly to Pylint, e.g. `--pylint-args='--ignore=foo.py,bar.py --disable=C0330,W0311'`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pylint-args"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--args"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]pylint-export",
          "config_key": "export",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]pylint-export"
          ],
          "env_var": "PANTS_PYLINT_EXPORT",
          "help": "If true, export a virtual environment with Pylint when running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 export`.\n\nThis can be useful, for example, with IDE integrations to point your editor to the tool's binary.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pylint-export",
            "--no-pylint-export"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--export",
            "--no-export"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "The Pylint linter for Python code (https://www.pylint.org/).",
      "is_goal": false,
      "provider": "pants.backend.python.lint.pylint",
      "scope": "pylint"
    },
    "pyoxidizer": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pyoxidizer-version=<str>",
          "config_key": "version",
          "default": "pyoxidizer==0.18.0",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pyoxidizer-version=<str>"
          ],
          "env_var": "PANTS_PYOXIDIZER_VERSION",
          "help": "Requirement string for the tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pyoxidizer-version"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "pyoxidizer==0.18.0"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pyoxidizer-extra-requirements=\"['<str>', '<str>', ...]\"",
          "config_key": "extra_requirements",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pyoxidizer-extra-requirements=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_PYOXIDIZER_EXTRA_REQUIREMENTS",
          "help": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pyoxidizer-extra-requirements"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--extra-requirements"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pyoxidizer-interpreter-constraints=\"['<str>', '<str>', ...]\"",
          "config_key": "interpreter_constraints",
          "default": [
            "CPython>=3.8,<4"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pyoxidizer-interpreter-constraints=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_PYOXIDIZER_INTERPRETER_CONSTRAINTS",
          "help": "Python interpreter constraints for this tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pyoxidizer-interpreter-constraints"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--interpreter-constraints"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "CPython>=3.8,<4"
                ]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pyoxidizer-console-script=<str>",
          "config_key": "console_script",
          "default": "pyoxidizer",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pyoxidizer-console-script=<str>"
          ],
          "env_var": "PANTS_PYOXIDIZER_CONSOLE_SCRIPT",
          "help": "The console script for the tool. Using this option is generally preferable to (and mutually exclusive with) specifying an --entry-point since console script names have a higher expectation of staying stable across releases of the tool. Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pyoxidizer-console-script"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--console-script"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "pyoxidizer"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pyoxidizer-entry-point=<str>",
          "config_key": "entry_point",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pyoxidizer-entry-point=<str>"
          ],
          "env_var": "PANTS_PYOXIDIZER_ENTRY_POINT",
          "help": "The entry point for the tool. Generally you only want to use this option if the tool does not offer a --console-script (which this option is mutually exclusive with). Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pyoxidizer-entry-point"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--entry-point"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pyoxidizer-args=\"[<shell_str>, <shell_str>, ...]\"",
          "config_key": "args",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pyoxidizer-args=\"[<shell_str>, <shell_str>, ...]\""
          ],
          "env_var": "PANTS_PYOXIDIZER_ARGS",
          "help": "Arguments to pass directly to PyOxidizer, e.g. `--pyoxidizer-args='--release'`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pyoxidizer-args"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--args"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "The PyOxidizer utility for packaging Python code in a Rust binary (https://pyoxidizer.readthedocs.io/en/stable/pyoxidizer.html).\n\nUsed with the `pyoxidizer_binary` target.",
      "is_goal": false,
      "provider": "pants.backend.experimental.python.packaging.pyoxidizer",
      "scope": "pyoxidizer"
    },
    "pytest": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pytest-version=<str>",
          "config_key": "version",
          "default": "pytest==7.0.1",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pytest-version=<str>"
          ],
          "env_var": "PANTS_PYTEST_VERSION",
          "help": "Requirement string for the tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pytest-version"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "pytest==7.0.1"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pytest-extra-requirements=\"['<str>', '<str>', ...]\"",
          "config_key": "extra_requirements",
          "default": [
            "pytest-cov>=2.12,!=2.12.1,<3.1"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pytest-extra-requirements=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_PYTEST_EXTRA_REQUIREMENTS",
          "help": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pytest-extra-requirements"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--extra-requirements"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "pytest-cov>=2.12,!=2.12.1,<3.1"
                ]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pytest-lockfile=<str>",
          "config_key": "lockfile",
          "default": "<default>",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pytest-lockfile=<str>"
          ],
          "env_var": "PANTS_PYTEST_LOCKFILE",
          "help": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.12.1/src/python/pants/backend/python/subsystems/pytest.lock for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 generate-lockfiles --resolve=pytest`.\n\nAs explained at https://www.pantsbuild.org/v2.12/docs/python-third-party-dependencies, lockfile generation via `generate-lockfiles` does not always work and you may want to manually generate the lockfile. You will want to set `[python].invalid_lockfile_behavior = 'ignore'` so that Pants does not complain about missing lockfile headers.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pytest-lockfile"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--lockfile"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "<default>"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pytest-console-script=<str>",
          "config_key": "console_script",
          "default": "pytest",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pytest-console-script=<str>"
          ],
          "env_var": "PANTS_PYTEST_CONSOLE_SCRIPT",
          "help": "The console script for the tool. Using this option is generally preferable to (and mutually exclusive with) specifying an --entry-point since console script names have a higher expectation of staying stable across releases of the tool. Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pytest-console-script"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--console-script"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "pytest"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pytest-entry-point=<str>",
          "config_key": "entry_point",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pytest-entry-point=<str>"
          ],
          "env_var": "PANTS_PYTEST_ENTRY_POINT",
          "help": "The entry point for the tool. Generally you only want to use this option if the tool does not offer a --console-script (which this option is mutually exclusive with). Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pytest-entry-point"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--entry-point"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pytest-timeout-default=<int>",
          "config_key": "timeout_default",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pytest-timeout-default=<int>"
          ],
          "env_var": "PANTS_PYTEST_TIMEOUT_DEFAULT",
          "help": "The default timeout (in seconds) for a test target if the `timeout` field is not set on the target.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pytest-timeout-default"
          ],
          "typ": "int",
          "unscoped_cmd_line_args": [
            "--timeout-default"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pytest-timeout-maximum=<int>",
          "config_key": "timeout_maximum",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pytest-timeout-maximum=<int>"
          ],
          "env_var": "PANTS_PYTEST_TIMEOUT_MAXIMUM",
          "help": "The maximum timeout (in seconds) that may be used on a `python_tests` target.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pytest-timeout-maximum"
          ],
          "typ": "int",
          "unscoped_cmd_line_args": [
            "--timeout-maximum"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pytest-junit-family=<str>",
          "config_key": "junit_family",
          "default": "xunit2",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pytest-junit-family=<str>"
          ],
          "env_var": "PANTS_PYTEST_JUNIT_FAMILY",
          "help": "The format of generated junit XML files. See https://docs.pytest.org/en/latest/reference.html#confval-junit_family.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pytest-junit-family"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--junit-family"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "xunit2"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pytest-execution-slot-var=<str>",
          "config_key": "execution_slot_var",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pytest-execution-slot-var=<str>"
          ],
          "env_var": "PANTS_PYTEST_EXECUTION_SLOT_VAR",
          "help": "If a non-empty string, the process execution slot id (an integer) will be exposed to tests under this environment variable name.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pytest-execution-slot-var"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--execution-slot-var"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]pytest-config-discovery",
          "config_key": "config_discovery",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]pytest-config-discovery"
          ],
          "env_var": "PANTS_PYTEST_CONFIG_DISCOVERY",
          "help": "If true, Pants will include all relevant Pytest config files (e.g. `pytest.ini`) during runs. See https://docs.pytest.org/en/stable/customize.html#finding-the-rootdir for where config files should be located for Pytest to discover them.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pytest-config-discovery",
            "--no-pytest-config-discovery"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--config-discovery",
            "--no-config-discovery"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pytest-args=\"[<shell_str>, <shell_str>, ...]\", ... -- [<shell_str> [<shell_str> [...]]]",
          "config_key": "args",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pytest-args=\"[<shell_str>, <shell_str>, ...]\"",
            "... -- [<shell_str> [<shell_str> [...]]]"
          ],
          "env_var": "PANTS_PYTEST_ARGS",
          "help": "Arguments to pass directly to Pytest, e.g. `--pytest-args='-k test_foo --quiet'`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pytest-args"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--args"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "from command-line flag",
                "rank": "FLAG",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]pytest-timeouts",
          "config_key": "timeouts",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]pytest-timeouts"
          ],
          "env_var": "PANTS_PYTEST_TIMEOUTS",
          "help": "Enable test target timeouts. If timeouts are enabled then test targets with a timeout= parameter set on their target will time out after the given number of seconds if not completed. If no timeout is set, then either the default timeout is used or no timeout is configured.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pytest-timeouts",
            "--no-pytest-timeouts"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--timeouts",
            "--no-timeouts"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]pytest-export",
          "config_key": "export",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]pytest-export"
          ],
          "env_var": "PANTS_PYTEST_EXPORT",
          "help": "If true, export a virtual environment with Pytest when running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 export`.\n\nThis can be useful, for example, with IDE integrations to point your editor to the tool's binary.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pytest-export",
            "--no-pytest-export"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--export",
            "--no-export"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "The pytest Python test framework (https://docs.pytest.org/).",
      "is_goal": false,
      "provider": "pants.backend.python",
      "scope": "pytest"
    },
    "python": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--python-interpreter-constraints=\"[<requirement>, <requirement>, ...]\"",
          "config_key": "interpreter_constraints",
          "default": [
            "CPython>=3.7,<4"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--python-interpreter-constraints=\"[<requirement>, <requirement>, ...]\""
          ],
          "env_var": "PANTS_PYTHON_INTERPRETER_CONSTRAINTS",
          "help": "The Python interpreters your codebase is compatible with.\n\nThese constraints are used as the default value for the `interpreter_constraints` field of Python targets.\n\nSpecify with requirement syntax, e.g. 'CPython>=2.7,<3' (A CPython interpreter with version >=2.7 AND version <3) or 'PyPy' (A pypy interpreter of any version). Multiple constraint strings will be ORed together.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--python-interpreter-constraints"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--interpreter-constraints"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "CPython>=3.7,<4"
                ]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--python-interpreter-versions-universe=\"['<str>', '<str>', ...]\"",
          "config_key": "interpreter_versions_universe",
          "default": [
            "2.7",
            "3.5",
            "3.6",
            "3.7",
            "3.8",
            "3.9",
            "3.10",
            "3.11"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--python-interpreter-versions-universe=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_PYTHON_INTERPRETER_VERSIONS_UNIVERSE",
          "help": "All known Python major/minor interpreter versions that may be used by either your code or tools used by your code.\n\nThis is used by Pants to robustly handle interpreter constraints, such as knowing when generating lockfiles which Python versions to check if your code is using.\n\nThis does not control which interpreter your code will use. Instead, to set your interpreter constraints, update `[python].interpreter_constraints`, the `interpreter_constraints` field, and relevant tool options like `[isort].interpreter_constraints` to tell Pants which interpreters your code actually uses. See https://www.pantsbuild.org/v2.12/docs/python-interpreter-compatibility.\n\nAll elements must be the minor and major Python version, e.g. '2.7' or '3.10'. Do not include the patch version.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--python-interpreter-versions-universe"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--interpreter-versions-universe"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "2.7",
                  "3.5",
                  "3.6",
                  "3.7",
                  "3.8",
                  "3.9",
                  "3.10",
                  "3.11"
                ]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]python-enable-resolves",
          "config_key": "enable_resolves",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]python-enable-resolves"
          ],
          "env_var": "PANTS_PYTHON_ENABLE_RESOLVES",
          "help": "Set to true to enable lockfiles for user code. See `[python].resolves` for an explanation of this feature.\n\nWarning: the `generate-lockfiles` goal does not yet work if you have local requirements, regardless of using Pex vs. Poetry for the lockfile generator. Support is coming in a future Pants release. In the meantime, the workaround is to host the files in a custom repository with `[python-repos]` (https://www.pantsbuild.org/v2.12/docs/python-third-party-dependencies#custom-repositories).\n\nYou may also run into issues generating lockfiles when using Poetry as the generator, rather than Pex. See the option `[python].lockfile_generator` for more information.\n\nThis option is mutually exclusive with `[python].requirement_constraints`. We strongly recommend using this option because it:\n\n  1. Uses `--hash` to validate that all downloaded files are expected, which reduces the risk of supply chain attacks.\n  2. Enforces that all transitive dependencies are in the lockfile, whereas constraints allow you to leave off dependencies. This ensures your build is more stable and reduces the risk of supply chain attacks.\n  3. Allows you to have multiple lockfiles in your repository.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--python-enable-resolves",
            "--no-python-enable-resolves"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--enable-resolves",
            "--no-enable-resolves"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--python-resolves=\"{'key1': val1, 'key2': val2, ...}\"",
          "config_key": "resolves",
          "default": {
            "python-default": "3rdparty/python/default.lock"
          },
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--python-resolves=\"{'key1': val1, 'key2': val2, ...}\""
          ],
          "env_var": "PANTS_PYTHON_RESOLVES",
          "help": "A mapping of logical names to lockfile paths used in your project.\n\nMany organizations only need a single resolve for their whole project, which is a good default and often the simplest thing to do. However, you may need multiple resolves, such as if you use two conflicting versions of a requirement in your repository.\n\nIf you only need a single resolve, run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 generate-lockfiles` to generate the lockfile.\n\nIf you need multiple resolves:\n\n  1. Via this option, define multiple resolve names and their lockfile paths. The names should be meaningful to your repository, such as `data-science` or `pants-plugins`.\n  2. Set the default with `[python].default_resolve`.\n  3. Update your `python_requirement` targets with the `resolve` field to declare which resolve they should be available in. They default to `[python].default_resolve`, so you only need to update targets that you want in non-default resolves. (Often you'll set this via the `python_requirements` or `poetry_requirements` target generators)\n  4. Run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 generate-lockfiles` to generate the lockfiles. If the results aren't what you'd expect, adjust the prior step.\n  5. Update any targets like `python_source` / `python_sources`, `python_test` / `python_tests`, and `pex_binary` which need to set a non-default resolve with the `resolve` field.\n\nIf a target can work with multiple resolves, you can either use the `parametrize` mechanism or manually create a distinct target per resolve. See https://www.pantsbuild.org/v2.12/docs/targets for information about `parametrize`.\n\nFor example:\n\n    python_sources(\n        resolve=parametrize(\"data-science\", \"web-app\"),\n    )\n\nYou can name the lockfile paths what you would like; Pants does not expect a certain file extension or location.\n\nOnly applies if `[python].enable_resolves` is true.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--python-resolves"
          ],
          "typ": "dict",
          "unscoped_cmd_line_args": [
            "--resolves"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": {}
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": {
                  "python-default": "3rdparty/python/default.lock"
                }
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--python-default-resolve=<str>",
          "config_key": "default_resolve",
          "default": "python-default",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--python-default-resolve=<str>"
          ],
          "env_var": "PANTS_PYTHON_DEFAULT_RESOLVE",
          "help": "The default value used for the `resolve` field.\n\nThe name must be defined as a resolve in `[python].resolves`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--python-default-resolve"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--default-resolve"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "python-default"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--python-resolves-to-interpreter-constraints=\"{'key1': val1, 'key2': val2, ...}\"",
          "config_key": "resolves_to_interpreter_constraints",
          "default": {},
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--python-resolves-to-interpreter-constraints=\"{'key1': val1, 'key2': val2, ...}\""
          ],
          "env_var": "PANTS_PYTHON_RESOLVES_TO_INTERPRETER_CONSTRAINTS",
          "help": "Override the interpreter constraints to use when generating a resolve's lockfile with the `generate-lockfiles` goal.\n\nBy default, each resolve from `[python].resolves` will use your global interpreter constraints set in `[python].interpreter_constraints`. With this option, you can override each resolve to use certain interpreter constraints, such as `{'data-science': ['==3.8.*']}`.\n\nWarning: this does NOT impact the interpreter constraints used by targets within the resolve, which is instead set by the option `[python.interpreter_constraints` and the `interpreter_constraints` field. It only impacts how the lockfile is generated.\n\nPants will validate that the interpreter constraints of your code using a resolve are compatible with that resolve's own constraints. For example, if your code is set to use ['==3.9.*'] via the `interpreter_constraints` field, but it's using a resolve whose interpreter constraints are set to ['==3.7.*'], then Pants will error explaining the incompatibility.\n\nThe keys must be defined as resolves in `[python].resolves`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--python-resolves-to-interpreter-constraints"
          ],
          "typ": "dict",
          "unscoped_cmd_line_args": [
            "--resolves-to-interpreter-constraints"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": {}
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": {}
              }
            ]
          }
        },
        {
          "choices": [
            "error",
            "ignore",
            "warn"
          ],
          "comma_separated_choices": "error, ignore, warn",
          "comma_separated_display_args": "--python-invalid-lockfile-behavior=<InvalidLockfileBehavior>",
          "config_key": "invalid_lockfile_behavior",
          "default": "error",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--python-invalid-lockfile-behavior=<InvalidLockfileBehavior>"
          ],
          "env_var": "PANTS_PYTHON_INVALID_LOCKFILE_BEHAVIOR",
          "help": "The behavior when a lockfile has requirements or interpreter constraints that are not compatible with what the current build is using.\n\nWe recommend keeping the default of `error` for CI builds.\n\nNote that `warn` will still expect a Pants lockfile header, it only won't error if the lockfile is stale and should be regenerated. Use `ignore` to avoid needing a lockfile header at all, e.g. if you are manually managing lockfiles rather than using the `generate-lockfiles` goal.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--python-invalid-lockfile-behavior"
          ],
          "typ": "InvalidLockfileBehavior",
          "unscoped_cmd_line_args": [
            "--invalid-lockfile-behavior"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "error"
              }
            ]
          }
        },
        {
          "choices": [
            "pex",
            "poetry"
          ],
          "comma_separated_choices": "pex, poetry",
          "comma_separated_display_args": "--python-lockfile-generator=<LockfileGenerator>",
          "config_key": "lockfile_generator",
          "default": "pex",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--python-lockfile-generator=<LockfileGenerator>"
          ],
          "env_var": "PANTS_PYTHON_LOCKFILE_GENERATOR",
          "help": "Whether to use Pex or Poetry with the `generate-lockfiles` goal.\n\nPoetry does not support these features:\n\n  1) `[python-repos]` for custom indexes/cheeseshops.\n  2) VCS (Git) requirements.\n  3) `[GLOBAL].ca_certs_path`.\n\nIf you use any of these features, you should use Pex.\n\nSeveral users have also had issues with how Poetry's lockfile generation handles environment markers for transitive dependencies; certain dependencies end up with nonsensical environment markers which cause the dependency to not be installed, then for Pants/Pex to complain the dependency is missing, even though it's in the lockfile. There is a workaround: for `[python].resolves`, manually create a `python_requirement` target for the problematic transitive dependencies so that they are seen as direct requirements, rather than transitive. For tool lockfiles, add the problematic transitive dependency to `[tool].extra_requirements`, e.g. `[isort].extra_requirements`. Then, regenerate the lockfile(s) with the `generate-lockfiles` goal. Alternatively, use Pex for generation.\n\nFinally, installing from a Poetry-generated lockfile is slower than installing from a Pex lockfile. When using a Pex lockfile, Pants will only install the subset needed for the current task.\n\nHowever, Pex lockfile generation is a new feature. Given how vast the Python packaging ecosystem is, it is possible you may experience edge cases / bugs we haven't yet covered. Bug reports are appreciated! https://github.com/pantsbuild/pants/issues/new/choose\n\nNote that while Pex generates locks in a proprietary JSON format, you can use the `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 export` goal for Pants to create a virtual environment for interoperability with tools like IDEs.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--python-lockfile-generator"
          ],
          "typ": "LockfileGenerator",
          "unscoped_cmd_line_args": [
            "--lockfile-generator"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "pex"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]python-resolves-generate-lockfiles",
          "config_key": "resolves_generate_lockfiles",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]python-resolves-generate-lockfiles"
          ],
          "env_var": "PANTS_PYTHON_RESOLVES_GENERATE_LOCKFILES",
          "help": "If False, Pants will not attempt to generate lockfiles for `[python].resolves` when running the `generate-lockfiles` goal.\n\nThis is intended to allow you to manually generate lockfiles as a workaround for the issues described in the `[python].lockfile_generator` option, if you are not yet ready to use Pex.\n\nIf you set this to False, Pants will not attempt to validate the metadata headers for your user lockfiles. This is useful so that you can keep `[python].invalid_lockfile_behavior` to `error` or `warn` if you'd like so that tool lockfiles continue to be validated, while user lockfiles are skipped.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--python-resolves-generate-lockfiles",
            "--no-python-resolves-generate-lockfiles"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--resolves-generate-lockfiles",
            "--no-resolves-generate-lockfiles"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]python-run-against-entire-lockfile",
          "config_key": "run_against_entire_lockfile",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]python-run-against-entire-lockfile"
          ],
          "env_var": "PANTS_PYTHON_RUN_AGAINST_ENTIRE_LOCKFILE",
          "help": "If enabled, when running binaries, tests, and repls, Pants will use the entire lockfile file instead of just the relevant subset.\n\nWe generally do not recommend this if `[python].lockfile_generator` is set to `\"pex\"` thanks to performance enhancements we've made. When using Pex lockfiles, you should get similar performance to using this option but without the downsides mentioned below.\n\nOtherwise, if not using Pex lockfiles, this option can improve performance and reduce cache size. But it has two consequences: 1) All cached test results will be invalidated if any requirement in the lockfile changes, rather than just those that depend on the changed requirement. 2) Requirements unneeded by a test/run/repl will be present on the sys.path, which might in rare cases cause their behavior to change.\n\nThis option does not affect packaging deployable artifacts, such as PEX files, wheels and cloud functions, which will still use just the exact subset of requirements needed.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--python-run-against-entire-lockfile",
            "--no-python-run-against-entire-lockfile"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--run-against-entire-lockfile",
            "--no-run-against-entire-lockfile"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--python-requirement-constraints=<file_option>",
          "config_key": "requirement_constraints",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--python-requirement-constraints=<file_option>"
          ],
          "env_var": "PANTS_PYTHON_REQUIREMENT_CONSTRAINTS",
          "help": "When resolving third-party requirements for your own code (vs. tools you run), use this constraints file to determine which versions to use.\n\nMutually exclusive with `[python].enable_resolves`, which we generally recommend as an improvement over constraints file.\n\nSee https://pip.pypa.io/en/stable/user_guide/#constraints-files for more information on the format of constraint files and how constraints are applied in Pex and pip.\n\nThis only applies when resolving user requirements, rather than tools you run like Black and Pytest. To constrain tools, set `[tool].lockfile`, e.g. `[black].lockfile`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--python-requirement-constraints"
          ],
          "typ": "file_option",
          "unscoped_cmd_line_args": [
            "--requirement-constraints"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]python-resolve-all-constraints",
          "config_key": "resolve_all_constraints",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]python-resolve-all-constraints"
          ],
          "env_var": "PANTS_PYTHON_RESOLVE_ALL_CONSTRAINTS",
          "help": "(Only relevant when using `[python].requirement_constraints.`) If enabled, when resolving requirements, Pants will first resolve your entire constraints file as a single global resolve. Then, if the code uses a subset of your constraints file, Pants will extract the relevant requirements from that global resolve so that only what's actually needed gets used. If disabled, Pants will not use a global resolve and will resolve each subset of your requirements independently.\n\nUsually this option should be enabled because it can result in far fewer resolves.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--python-resolve-all-constraints",
            "--no-python-resolve-all-constraints"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--resolve-all-constraints",
            "--no-resolve-all-constraints"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--python-resolver-manylinux=<str>",
          "config_key": "resolver_manylinux",
          "default": "manylinux2014",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--python-resolver-manylinux=<str>"
          ],
          "env_var": "PANTS_PYTHON_RESOLVER_MANYLINUX",
          "help": "Whether to allow resolution of manylinux wheels when resolving requirements for foreign linux platforms. The value should be a manylinux platform upper bound, e.g.: 'manylinux2010', or else the string 'no' to disallow.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--python-resolver-manylinux"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--resolver-manylinux"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "manylinux2014"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]python-tailor-ignore-solitary-init-files",
          "config_key": "tailor_ignore_solitary_init_files",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]python-tailor-ignore-solitary-init-files"
          ],
          "env_var": "PANTS_PYTHON_TAILOR_IGNORE_SOLITARY_INIT_FILES",
          "help": "Don't tailor `python_sources` targets for solitary `__init__.py` files, as those usually exist as import scaffolding rather than true library code.\n\nSet to False if you commonly have packages containing real code in `__init__.py` and there are no other .py files in the package.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--python-tailor-ignore-solitary-init-files",
            "--no-python-tailor-ignore-solitary-init-files"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--tailor-ignore-solitary-init-files",
            "--no-tailor-ignore-solitary-init-files"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]python-tailor-requirements-targets",
          "config_key": "tailor_requirements_targets",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]python-tailor-requirements-targets"
          ],
          "env_var": "PANTS_PYTHON_TAILOR_REQUIREMENTS_TARGETS",
          "help": "Tailor python_requirements() targets for requirements files.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--python-tailor-requirements-targets",
            "--no-python-tailor-requirements-targets"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--tailor-requirements-targets",
            "--no-tailor-requirements-targets"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]python-tailor-pex-binary-targets",
          "config_key": "tailor_pex_binary_targets",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]python-tailor-pex-binary-targets"
          ],
          "env_var": "PANTS_PYTHON_TAILOR_PEX_BINARY_TARGETS",
          "help": "Tailor pex_binary() targets for Python entry point files.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--python-tailor-pex-binary-targets",
            "--no-python-tailor-pex-binary-targets"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--tailor-pex-binary-targets",
            "--no-tailor-pex-binary-targets"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]python-macos-big-sur-compatibility",
          "config_key": "macos_big_sur_compatibility",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]python-macos-big-sur-compatibility"
          ],
          "env_var": "PANTS_PYTHON_MACOS_BIG_SUR_COMPATIBILITY",
          "help": "If set, and if running on MacOS Big Sur, use macosx_10_16 as the platform when building wheels. Otherwise, the default of macosx_11_0 will be used. This may be required for pip to be able to install the resulting distribution on Big Sur.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--python-macos-big-sur-compatibility",
            "--no-python-macos-big-sur-compatibility"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--macos-big-sur-compatibility",
            "--no-macos-big-sur-compatibility"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--python-no-binary=\"['<str>', '<str>', ...]\"",
          "config_key": "no_binary",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--python-no-binary=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_PYTHON_NO_BINARY",
          "help": "Do not use binary packages (i.e., wheels) for these 3rdparty projects.\n\nAlso accepts `:all:` to disable all binary packages.\n\nNote that some packages are tricky to compile and may fail to install when this option is used on them. See https://pip.pypa.io/en/stable/cli/pip_install/#install-no-binary for details.\n\nNote: Only takes effect if you use Pex lockfiles. Set `[python].lockfile_generator = \"pex\"` and run the `generate-lockfiles` goal.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--python-no-binary"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--no-binary"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--python-only-binary=\"['<str>', '<str>', ...]\"",
          "config_key": "only_binary",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--python-only-binary=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_PYTHON_ONLY_BINARY",
          "help": "Do not use source packages (i.e., sdists) for these 3rdparty projects.\n\nAlso accepts `:all:` to disable all source packages.\n\nPackages without binary distributions will fail to install when this option is used on them. See https://pip.pypa.io/en/stable/cli/pip_install/#install-only-binary for details.\n\nNote: Only takes effect if you use Pex lockfiles. Set `[python].lockfile_generator = \"pex\"` and run the `generate-lockfiles` goal.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--python-only-binary"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--only-binary"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Options for Pants's Python backend.",
      "is_goal": false,
      "provider": "pants.core",
      "scope": "python"
    },
    "python-bootstrap": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--python-bootstrap-search-path=\"[<binary-paths>, <binary-paths>, ...]\"",
          "config_key": "search_path",
          "default": [
            "<PYENV>",
            "<PATH>"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--python-bootstrap-search-path=\"[<binary-paths>, <binary-paths>, ...]\""
          ],
          "env_var": "PANTS_PYTHON_BOOTSTRAP_SEARCH_PATH",
          "help": "A list of paths to search for Python interpreters.\n\nWhich interpeters are actually used from these paths is context-specific: the Python backend selects interpreters using options on the `python` subsystem, in particular, the `[python].interpreter_constraints` option.\n\nYou can specify absolute paths to interpreter binaries and/or to directories containing interpreter binaries. The order of entries does not matter.\n\nThe following special strings are supported:\n\n  * `<PATH>`, the contents of the PATH env var\n  * `<ASDF>`, all Python versions currently configured by ASDF `(asdf shell, ${HOME}/.tool-versions)`, with a fallback to all installed versions\n  * `<ASDF_LOCAL>`, the ASDF interpreter with the version in BUILD_ROOT/.tool-versions\n  * `<PYENV>`, all Python versions under $(pyenv root)/versions\n  * `<PYENV_LOCAL>`, the Pyenv interpreter with the version in BUILD_ROOT/.python-version\n  * `<PEXRC>`, paths in the PEX_PYTHON_PATH variable in /etc/pexrc or ~/.pexrc",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--python-bootstrap-search-path"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--search-path"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "<PYENV>",
                  "<PATH>"
                ]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--python-bootstrap-names=\"[<python-binary-names>, <python-binary-names>, ...]\"",
          "config_key": "names",
          "default": [
            "python",
            "python3"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--python-bootstrap-names=\"[<python-binary-names>, <python-binary-names>, ...]\""
          ],
          "env_var": "PANTS_PYTHON_BOOTSTRAP_NAMES",
          "help": "The names of Python binaries to search for. See the `--search-path` option to influence where interpreters are searched for.\n\nThis does not impact which Python interpreter is used to run your code, only what is used to run internal tools.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--python-bootstrap-names"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--names"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "python",
                  "python3"
                ]
              }
            ]
          }
        }
      ],
      "basic": [],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Options used to locate Python interpreters used by all Pants backends.\n\nThis subsystem controls where and how Pants will locate Python, but beyond that it does not control which Python interpreter versions are actually used for your code: see the `python` subsystem for that.",
      "is_goal": false,
      "provider": "pants.core",
      "scope": "python-bootstrap"
    },
    "python-infer": {
      "advanced": [],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]python-infer-imports",
          "config_key": "imports",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]python-infer-imports"
          ],
          "env_var": "PANTS_PYTHON_INFER_IMPORTS",
          "help": "Infer a target's imported dependencies by parsing import statements from sources.\n\nTo ignore a false positive, you can either put `# pants: no-infer-dep` on the line of the import or put `!{bad_address}` in the `dependencies` field of your target.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--python-infer-imports",
            "--no-python-infer-imports"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--imports",
            "--no-imports"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]python-infer-string-imports",
          "config_key": "string_imports",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]python-infer-string-imports"
          ],
          "env_var": "PANTS_PYTHON_INFER_STRING_IMPORTS",
          "help": "Infer a target's dependencies based on strings that look like dynamic dependencies, such as Django settings files expressing dependencies as strings.\n\nTo ignore any false positives, put `!{bad_address}` in the `dependencies` field of your target.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--python-infer-string-imports",
            "--no-python-infer-string-imports"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--string-imports",
            "--no-string-imports"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--python-infer-string-imports-min-dots=<int>",
          "config_key": "string_imports_min_dots",
          "default": 2,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--python-infer-string-imports-min-dots=<int>"
          ],
          "env_var": "PANTS_PYTHON_INFER_STRING_IMPORTS_MIN_DOTS",
          "help": "If --string-imports is True, treat valid-looking strings with at least this many dots in them as potential dynamic dependencies. E.g., `'foo.bar.Baz'` will be treated as a potential dependency if this option is set to 2 but not if set to 3.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--python-infer-string-imports-min-dots"
          ],
          "typ": "int",
          "unscoped_cmd_line_args": [
            "--string-imports-min-dots"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": 2
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]python-infer-assets",
          "config_key": "assets",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]python-infer-assets"
          ],
          "env_var": "PANTS_PYTHON_INFER_ASSETS",
          "help": "Infer a target's asset dependencies based on strings that look like Posix filepaths, such as those given to `open` or `pkgutil.get_data`. To ignore any false positives, put `!{bad_address}` in the `dependencies` field of your target.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--python-infer-assets",
            "--no-python-infer-assets"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--assets",
            "--no-assets"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--python-infer-assets-min-slashes=<int>",
          "config_key": "assets_min_slashes",
          "default": 1,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--python-infer-assets-min-slashes=<int>"
          ],
          "env_var": "PANTS_PYTHON_INFER_ASSETS_MIN_SLASHES",
          "help": "If --assets is True, treat valid-looking strings with at least this many forward slash characters as potential assets. E.g. `'data/databases/prod.db'` will be treated as a potential candidate if this option is set to 2 but not to 3.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--python-infer-assets-min-slashes"
          ],
          "typ": "int",
          "unscoped_cmd_line_args": [
            "--assets-min-slashes"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": 1
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]python-infer-inits",
          "config_key": "inits",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]python-infer-inits"
          ],
          "env_var": "PANTS_PYTHON_INFER_INITS",
          "help": "Infer a target's dependencies on any `__init__.py` files in the packages it is located in (recursively upward in the directory structure).\n\nEven if this is disabled, Pants will still include any ancestor `__init__.py` files, only they will not be 'proper' dependencies, e.g. they will not show up in `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 dependencies` and their own dependencies will not be used.\n\nIf you have empty `__init__.py` files, it's safe to leave this option off; otherwise, you should enable this option.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--python-infer-inits",
            "--no-python-infer-inits"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--inits",
            "--no-inits"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]python-infer-conftests",
          "config_key": "conftests",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]python-infer-conftests"
          ],
          "env_var": "PANTS_PYTHON_INFER_CONFTESTS",
          "help": "Infer a test target's dependencies on any conftest.py files in the current directory and ancestor directories.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--python-infer-conftests",
            "--no-python-infer-conftests"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--conftests",
            "--no-conftests"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]python-infer-entry-points",
          "config_key": "entry_points",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]python-infer-entry-points"
          ],
          "env_var": "PANTS_PYTHON_INFER_ENTRY_POINTS",
          "help": "Infer dependencies on targets' entry points, e.g. `pex_binary`'s `entry_point` field, `python_awslambda`'s `handler` field and `python_distribution`'s `entry_points` field.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--python-infer-entry-points",
            "--no-python-infer-entry-points"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--entry-points",
            "--no-entry-points"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        },
        {
          "choices": [
            "error",
            "warning",
            "ignore"
          ],
          "comma_separated_choices": "error, warning, ignore",
          "comma_separated_display_args": "--python-infer-unowned-dependency-behavior=<UnownedDependencyUsage>",
          "config_key": "unowned_dependency_behavior",
          "default": "ignore",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--python-infer-unowned-dependency-behavior=<UnownedDependencyUsage>"
          ],
          "env_var": "PANTS_PYTHON_INFER_UNOWNED_DEPENDENCY_BEHAVIOR",
          "help": "How to handle imports that don't have an inferrable owner.\n\nUsually when an import cannot be inferred, it represents an issue like Pants not being properly configured, e.g. targets not set up. Often, missing dependencies will result in confusing runtime errors like `ModuleNotFoundError`, so this option can be helpful to error more eagerly.\n\nTo ignore any false positives, either add `# pants: no-infer-dep` to the line of the import or put the import inside a `try: except ImportError:` block.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--python-infer-unowned-dependency-behavior"
          ],
          "typ": "UnownedDependencyUsage",
          "unscoped_cmd_line_args": [
            "--unowned-dependency-behavior"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "ignore"
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Options controlling which dependencies will be inferred for Python targets.",
      "is_goal": false,
      "provider": "pants.backend.python",
      "scope": "python-infer"
    },
    "python-native-code": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--python-native-code-cpp-flags=\"['<str>', '<str>', ...]\"",
          "config_key": "cpp_flags",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--python-native-code-cpp-flags=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_PYTHON_NATIVE_CODE_CPP_FLAGS",
          "help": "Override the `CPPFLAGS` environment variable for any forked subprocesses.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--python-native-code-cpp-flags"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--cpp-flags"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--python-native-code-ld-flags=\"['<str>', '<str>', ...]\"",
          "config_key": "ld_flags",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--python-native-code-ld-flags=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_PYTHON_NATIVE_CODE_LD_FLAGS",
          "help": "Override the `LDFLAGS` environment variable for any forked subprocesses.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--python-native-code-ld-flags"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--ld-flags"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        }
      ],
      "basic": [],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Options for building native code using Python, e.g. when resolving distributions.",
      "is_goal": false,
      "provider": "pants.core",
      "scope": "python-native-code"
    },
    "python-protobuf": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]python-protobuf-infer-runtime-dependency",
          "config_key": "infer_runtime_dependency",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]python-protobuf-infer-runtime-dependency"
          ],
          "env_var": "PANTS_PYTHON_PROTOBUF_INFER_RUNTIME_DEPENDENCY",
          "help": "If True, will add a dependency on a `python_requirement` target exposing the `protobuf` module (usually from the `protobuf` requirement). If the `protobuf_source` target sets `grpc=True`, will also add a dependency on the `python_requirement` target exposing the `grpcio` module.\n\nIf `[python].enable_resolves` is set, Pants will only infer dependencies on `python_requirement` targets that use the same resolve as the particular `protobuf_source` / `protobuf_sources` target uses, which is set via its `python_resolve` field.\n\nUnless this option is disabled, Pants will error if no relevant target is found or if more than one is found which causes ambiguity.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--python-protobuf-infer-runtime-dependency",
            "--no-python-protobuf-infer-runtime-dependency"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--infer-runtime-dependency",
            "--no-infer-runtime-dependency"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]python-protobuf-mypy-plugin",
          "config_key": "mypy_plugin",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]python-protobuf-mypy-plugin"
          ],
          "env_var": "PANTS_PYTHON_PROTOBUF_MYPY_PLUGIN",
          "help": "Use the `mypy-protobuf` plugin (https://github.com/dropbox/mypy-protobuf) to also generate .pyi type stubs.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--python-protobuf-mypy-plugin",
            "--no-python-protobuf-mypy-plugin"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--mypy-plugin",
            "--no-mypy-plugin"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Options related to the Protobuf Python backend.\n\nSee https://www.pantsbuild.org/v2.12/docs/protobuf-python.",
      "is_goal": false,
      "provider": "pants.backend.codegen.protobuf.python",
      "scope": "python-protobuf"
    },
    "python-repos": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--python-repos-repos=\"['<str>', '<str>', ...]\"",
          "config_key": "repos",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--python-repos-repos=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_PYTHON_REPOS_REPOS",
          "help": "URLs of code repositories to look for requirements. In Pip and Pex, this option corresponds to the `--find-links` option.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--python-repos-repos"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--repos"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--python-repos-indexes=\"['<str>', '<str>', ...]\"",
          "config_key": "indexes",
          "default": [
            "https://pypi.org/simple/"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--python-repos-indexes=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_PYTHON_REPOS_INDEXES",
          "help": "URLs of code repository indexes to look for requirements. If set to an empty list, then Pex will use no indices (meaning it will not use PyPI). The values should be compliant with PEP 503.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--python-repos-indexes"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--indexes"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "https://pypi.org/simple/"
                ]
              }
            ]
          }
        }
      ],
      "basic": [],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "External Python code repositories, such as PyPI.\n\nThese options may be used to point to custom cheeseshops when resolving requirements.",
      "is_goal": false,
      "provider": "pants.core",
      "scope": "python-repos"
    },
    "python-thrift": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]python-thrift-infer-runtime-dependency",
          "config_key": "infer_runtime_dependency",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]python-thrift-infer-runtime-dependency"
          ],
          "env_var": "PANTS_PYTHON_THRIFT_INFER_RUNTIME_DEPENDENCY",
          "help": "If True, will add a dependency on a `python_requirement` target exposing the `thrift` module (usually from the `thrift` requirement).\n\nIf `[python].enable_resolves` is set, Pants will only infer dependencies on `python_requirement` targets that use the same resolve as the particular `thrift_source` / `thrift_source` target uses, which is set via its `python_resolve` field.\n\nUnless this option is disabled, Pants will error if no relevant target is found or more than one is found which causes ambiguity.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--python-thrift-infer-runtime-dependency",
            "--no-python-thrift-infer-runtime-dependency"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--infer-runtime-dependency",
            "--no-infer-runtime-dependency"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--python-thrift-options=\"['<str>', '<str>', ...]\"",
          "config_key": "options",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--python-thrift-options=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_PYTHON_THRIFT_OPTIONS",
          "help": "Code generation options specific to the Python code generator to pass to the Apache `thift` binary via the `-gen py` argument. See `thrift -help` for supported values.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--python-thrift-options"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--options"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Options specific to generating Python from Thrift using Apache Thrift",
      "is_goal": false,
      "provider": "pants.backend.codegen.thrift.apache.python",
      "scope": "python-thrift"
    },
    "pyupgrade": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pyupgrade-version=<str>",
          "config_key": "version",
          "default": "pyupgrade>=2.31.0,<2.32",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pyupgrade-version=<str>"
          ],
          "env_var": "PANTS_PYUPGRADE_VERSION",
          "help": "Requirement string for the tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pyupgrade-version"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "pyupgrade>=2.31.0,<2.32"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pyupgrade-extra-requirements=\"['<str>', '<str>', ...]\"",
          "config_key": "extra_requirements",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pyupgrade-extra-requirements=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_PYUPGRADE_EXTRA_REQUIREMENTS",
          "help": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pyupgrade-extra-requirements"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--extra-requirements"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pyupgrade-interpreter-constraints=\"['<str>', '<str>', ...]\"",
          "config_key": "interpreter_constraints",
          "default": [
            "CPython>=3.7,<4"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pyupgrade-interpreter-constraints=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_PYUPGRADE_INTERPRETER_CONSTRAINTS",
          "help": "Python interpreter constraints for this tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pyupgrade-interpreter-constraints"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--interpreter-constraints"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "CPython>=3.7,<4"
                ]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pyupgrade-lockfile=<str>",
          "config_key": "lockfile",
          "default": "<default>",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pyupgrade-lockfile=<str>"
          ],
          "env_var": "PANTS_PYUPGRADE_LOCKFILE",
          "help": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.12.1/src/python/pants/backend/python/lint/pyupgrade/pyupgrade.lock for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 generate-lockfiles --resolve=pyupgrade`.\n\nAs explained at https://www.pantsbuild.org/v2.12/docs/python-third-party-dependencies, lockfile generation via `generate-lockfiles` does not always work and you may want to manually generate the lockfile. You will want to set `[python].invalid_lockfile_behavior = 'ignore'` so that Pants does not complain about missing lockfile headers.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pyupgrade-lockfile"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--lockfile"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "<default>"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pyupgrade-console-script=<str>",
          "config_key": "console_script",
          "default": "pyupgrade",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pyupgrade-console-script=<str>"
          ],
          "env_var": "PANTS_PYUPGRADE_CONSOLE_SCRIPT",
          "help": "The console script for the tool. Using this option is generally preferable to (and mutually exclusive with) specifying an --entry-point since console script names have a higher expectation of staying stable across releases of the tool. Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pyupgrade-console-script"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--console-script"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "pyupgrade"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pyupgrade-entry-point=<str>",
          "config_key": "entry_point",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pyupgrade-entry-point=<str>"
          ],
          "env_var": "PANTS_PYUPGRADE_ENTRY_POINT",
          "help": "The entry point for the tool. Generally you only want to use this option if the tool does not offer a --console-script (which this option is mutually exclusive with). Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pyupgrade-entry-point"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--entry-point"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]pyupgrade-skip",
          "config_key": "skip",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]pyupgrade-skip"
          ],
          "env_var": "PANTS_PYUPGRADE_SKIP",
          "help": "Don't use pyupgrade when running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 fmt` and `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 lint`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pyupgrade-skip",
            "--no-pyupgrade-skip"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--skip",
            "--no-skip"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pyupgrade-args=\"[<shell_str>, <shell_str>, ...]\"",
          "config_key": "args",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pyupgrade-args=\"[<shell_str>, <shell_str>, ...]\""
          ],
          "env_var": "PANTS_PYUPGRADE_ARGS",
          "help": "Arguments to pass directly to pyupgrade, e.g. `--pyupgrade-args='--py39-plus --keep-runtime-typing'`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pyupgrade-args"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--args"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]pyupgrade-export",
          "config_key": "export",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]pyupgrade-export"
          ],
          "env_var": "PANTS_PYUPGRADE_EXPORT",
          "help": "If true, export a virtual environment with pyupgrade when running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 export`.\n\nThis can be useful, for example, with IDE integrations to point your editor to the tool's binary.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pyupgrade-export",
            "--no-pyupgrade-export"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--export",
            "--no-export"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Upgrade syntax for newer versions of the language (https://github.com/asottile/pyupgrade).",
      "is_goal": false,
      "provider": "pants.backend.experimental.python.lint.pyupgrade",
      "scope": "pyupgrade"
    },
    "regex-lint": {
      "advanced": [],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--regex-lint-config=\"{'key1': val1, 'key2': val2, ...}\"",
          "config_key": "config",
          "default": {},
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--regex-lint-config=\"{'key1': val1, 'key2': val2, ...}\""
          ],
          "env_var": "PANTS_REGEX_LINT_CONFIG",
          "help": "Config schema is as follows:\n\n    ```\n    {\n    'required_matches': {\n        'path_pattern1': [content_pattern1, content_pattern2],\n        'path_pattern2': [content_pattern1, content_pattern3],\n        ...\n    },\n    'path_patterns': [\n        {\n        'name': path_pattern1',\n        'pattern': <path regex pattern>,\n        'inverted': True|False (defaults to False),\n        'content_encoding': <encoding> (defaults to utf8)\n        },\n        ...\n    ],\n    'content_patterns': [\n        {\n        'name': 'content_pattern1',\n        'pattern': <content regex pattern>,\n        'inverted': True|False (defaults to False)\n        }\n        ...\n    ]\n    }\n    ```\n\nMeaning: if a file matches some path pattern, its content must match all the corresponding content patterns.\n\nIt's often helpful to load this config from a JSON or YAML file. To do that, set `[regex-lint].config = '@path/to/config.yaml'`, for example.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--regex-lint-config"
          ],
          "typ": "dict",
          "unscoped_cmd_line_args": [
            "--config"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": {}
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": {}
              }
            ]
          }
        },
        {
          "choices": [
            "none",
            "summary",
            "nonmatching",
            "names",
            "all"
          ],
          "comma_separated_choices": "none, summary, nonmatching, names, all",
          "comma_separated_display_args": "--regex-lint-detail-level=<DetailLevel>",
          "config_key": "detail_level",
          "default": "nonmatching",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--regex-lint-detail-level=<DetailLevel>"
          ],
          "env_var": "PANTS_REGEX_LINT_DETAIL_LEVEL",
          "help": "How much detail to include in the result.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--regex-lint-detail-level"
          ],
          "typ": "DetailLevel",
          "unscoped_cmd_line_args": [
            "--detail-level"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "nonmatching"
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Lint your code using regex patterns, e.g. to check for copyright headers.\n\nTo activate this with the `lint` goal, you must set `[regex-lint].config`.\n\nUnlike other linters, this can run on files not owned by targets, such as BUILD files. To run on those, use `lint '**'` rather than `lint ::`, for example. Unfortunately, `--changed-since=<sha>` does not yet cause this linter to run. We are exploring how to improve both these gotchas.",
      "is_goal": false,
      "provider": "pants.backend.project_info",
      "scope": "regex-lint"
    },
    "repl": {
      "advanced": [],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--repl-shell=<str>",
          "config_key": "shell",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--repl-shell=<str>"
          ],
          "env_var": "PANTS_REPL_SHELL",
          "help": "Override the automatically-detected REPL program for the target(s) specified.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--repl-shell"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--shell"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]repl-restartable",
          "config_key": "restartable",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]repl-restartable"
          ],
          "env_var": "PANTS_REPL_RESTARTABLE",
          "help": "True if the REPL should be restarted if its inputs have changed.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--repl-restartable",
            "--no-repl-restartable"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--restartable",
            "--no-restartable"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Open a REPL with the specified code loadable.",
      "is_goal": true,
      "provider": "pants.core",
      "scope": "repl"
    },
    "roots": {
      "advanced": [],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--roots-output-file=<path>",
          "config_key": "output_file",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--roots-output-file=<path>"
          ],
          "env_var": "PANTS_ROOTS_OUTPUT_FILE",
          "help": "Output the goal's stdout to this file. If unspecified, outputs to stdout.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--roots-output-file"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--output-file"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--roots-sep=<separator>",
          "config_key": "sep",
          "default": "\\n",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--roots-sep=<separator>"
          ],
          "env_var": "PANTS_ROOTS_SEP",
          "help": "String to use to separate lines in line-oriented output.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--roots-sep"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--sep"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "\\n"
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "List the repo's registered source roots.",
      "is_goal": true,
      "provider": "pants.backend.project_info",
      "scope": "roots"
    },
    "run": {
      "advanced": [],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--run-args=\"[<shell_str>, <shell_str>, ...]\", ... -- [<shell_str> [<shell_str> [...]]]",
          "config_key": "args",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--run-args=\"[<shell_str>, <shell_str>, ...]\"",
            "... -- [<shell_str> [<shell_str> [...]]]"
          ],
          "env_var": "PANTS_RUN_ARGS",
          "help": "Arguments to pass directly to the executed target, e.g. `--run-args='val1 val2 --debug'`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--run-args"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--args"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "from command-line flag",
                "rank": "FLAG",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]run-cleanup",
          "config_key": "cleanup",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]run-cleanup"
          ],
          "env_var": "PANTS_RUN_CLEANUP",
          "help": "Whether to clean up the temporary directory in which the binary is chrooted. Set to false to retain the directory, e.g., for debugging.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--run-cleanup",
            "--no-run-cleanup"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--cleanup",
            "--no-cleanup"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Runs a binary target.\n\nThis goal propagates the return code of the underlying executable.\n\nIf your application can safely be restarted while it is running, you can pass `restartable=True` on your binary target (for supported types), and the `run` goal will automatically restart them as all relevant files change. This can be particularly useful for server applications.",
      "is_goal": true,
      "provider": "pants.core",
      "scope": "run"
    },
    "scala": {
      "advanced": [],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--scala-version-for-resolve=\"{'key1': val1, 'key2': val2, ...}\"",
          "config_key": "version_for_resolve",
          "default": {},
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--scala-version-for-resolve=\"{'key1': val1, 'key2': val2, ...}\""
          ],
          "env_var": "PANTS_SCALA_VERSION_FOR_RESOLVE",
          "help": "A dictionary mapping the name of a resolve to the Scala version to use for all Scala targets consuming that resolve.\n\nAll Scala-compiled jars on a resolve's classpath must be \"compatible\" with one another and with all Scala-compiled first-party sources from `scala_sources` (and other Scala target types) using that resolve. The option sets the Scala version that will be used to compile all first-party sources using the resolve. This ensures that the compatibility property is maintained for a resolve. To support multiple Scala versions, use multiple resolves.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--scala-version-for-resolve"
          ],
          "typ": "dict",
          "unscoped_cmd_line_args": [
            "--version-for-resolve"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": {}
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": {}
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Scala programming language",
      "is_goal": false,
      "provider": "pants.backend.experimental.scala",
      "scope": "scala"
    },
    "scala-infer": {
      "advanced": [],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]scala-infer-imports",
          "config_key": "imports",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]scala-infer-imports"
          ],
          "env_var": "PANTS_SCALA_INFER_IMPORTS",
          "help": "Infer a target's dependencies by parsing import statements from sources.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--scala-infer-imports",
            "--no-scala-infer-imports"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--imports",
            "--no-imports"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]scala-infer-consumed-types",
          "config_key": "consumed_types",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]scala-infer-consumed-types"
          ],
          "env_var": "PANTS_SCALA_INFER_CONSUMED_TYPES",
          "help": "Infer a target's dependencies by parsing consumed types from sources.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--scala-infer-consumed-types",
            "--no-scala-infer-consumed-types"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--consumed-types",
            "--no-consumed-types"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Options controlling which dependencies will be inferred for Scala targets.",
      "is_goal": false,
      "provider": "pants.backend.experimental.scala",
      "scope": "scala-infer"
    },
    "scalac": {
      "advanced": [],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--scalac-args=\"[<shell_str>, <shell_str>, ...]\"",
          "config_key": "args",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--scalac-args=\"[<shell_str>, <shell_str>, ...]\""
          ],
          "env_var": "PANTS_SCALAC_ARGS",
          "help": "Arguments to pass directly to scalac, e.g. `--scalac-args='-encoding UTF-8'`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--scalac-args"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--args"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--scalac-plugins-for-resolve=\"{'key1': val1, 'key2': val2, ...}\"",
          "config_key": "plugins_for_resolve",
          "default": {},
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--scalac-plugins-for-resolve=\"{'key1': val1, 'key2': val2, ...}\""
          ],
          "env_var": "PANTS_SCALAC_PLUGINS_FOR_RESOLVE",
          "help": "A dictionary, whose keys are the names of each JVM resolve that requires default `scalac` plugins, and the value is a comma-separated string consisting of scalac plugin names. Each specified plugin must have a corresponding `scalac_plugin` target that specifies that name in either its `plugin_name` field or is the same as its target name.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--scalac-plugins-for-resolve"
          ],
          "typ": "dict",
          "unscoped_cmd_line_args": [
            "--plugins-for-resolve"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": {}
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": {}
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "The Scala compiler.",
      "is_goal": false,
      "provider": "pants.backend.experimental.scala",
      "scope": "scalac"
    },
    "scalafmt": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--scalafmt-version=<str>",
          "config_key": "version",
          "default": "3.2.1",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--scalafmt-version=<str>"
          ],
          "env_var": "PANTS_SCALAFMT_VERSION",
          "help": "Version string for the tool. This is available for substitution in the `[scalafmt].artifacts` option by including the string `{version}`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--scalafmt-version"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "3.2.1"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--scalafmt-artifacts=\"['<str>', '<str>', ...]\"",
          "config_key": "artifacts",
          "default": [
            "org.scalameta:scalafmt-cli_2.13:{version}"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--scalafmt-artifacts=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_SCALAFMT_ARTIFACTS",
          "help": "Artifact requirements for this tool using specified as either the address of a `jvm_artifact` target or, alternatively, as a colon-separated Maven coordinates (e.g., group:name:version). For Maven coordinates, the string `{version}` version will be substituted with the value of the `[scalafmt].version` option.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--scalafmt-artifacts"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--artifacts"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "org.scalameta:scalafmt-cli_2.13:{version}"
                ]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--scalafmt-lockfile=<str>",
          "config_key": "lockfile",
          "default": "<default>",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--scalafmt-lockfile=<str>"
          ],
          "env_var": "PANTS_SCALAFMT_LOCKFILE",
          "help": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` option. See https://github.com/pantsbuild/pants/blob/release_2.12.1/src/python/pants/backend/scala/lint/scalafmt/scalafmt.default.lockfile.txt for the default lockfile contents.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 jvm-generate-lockfiles --resolve=scalafmt`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--scalafmt-lockfile"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--lockfile"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "<default>"
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]scalafmt-skip",
          "config_key": "skip",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]scalafmt-skip"
          ],
          "env_var": "PANTS_SCALAFMT_SKIP",
          "help": "Don't use scalafmt when running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 fmt` and `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 lint`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--scalafmt-skip",
            "--no-scalafmt-skip"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--skip",
            "--no-skip"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "scalafmt (https://scalameta.org/scalafmt/)",
      "is_goal": false,
      "provider": "pants.backend.experimental.scala.lint.scalafmt",
      "scope": "scalafmt"
    },
    "scalapb": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--scalapb-version=<str>",
          "config_key": "version",
          "default": "0.11.6",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--scalapb-version=<str>"
          ],
          "env_var": "PANTS_SCALAPB_VERSION",
          "help": "Version string for the tool. This is available for substitution in the `[scalapb].artifacts` option by including the string `{version}`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--scalapb-version"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "0.11.6"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--scalapb-artifacts=\"['<str>', '<str>', ...]\"",
          "config_key": "artifacts",
          "default": [
            "com.thesamet.scalapb:scalapbc_2.13:{version}"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--scalapb-artifacts=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_SCALAPB_ARTIFACTS",
          "help": "Artifact requirements for this tool using specified as either the address of a `jvm_artifact` target or, alternatively, as a colon-separated Maven coordinates (e.g., group:name:version). For Maven coordinates, the string `{version}` version will be substituted with the value of the `[scalapb].version` option.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--scalapb-artifacts"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--artifacts"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "com.thesamet.scalapb:scalapbc_2.13:{version}"
                ]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--scalapb-lockfile=<str>",
          "config_key": "lockfile",
          "default": "<default>",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--scalapb-lockfile=<str>"
          ],
          "env_var": "PANTS_SCALAPB_LOCKFILE",
          "help": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` option. See https://github.com/pantsbuild/pants/blob/release_2.12.1/src/python/pants/backend/codegen/protobuf/scala/scalapbc.default.lockfile.txt for the default lockfile contents.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 jvm-generate-lockfiles --resolve=scalapb`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--scalapb-lockfile"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--lockfile"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "<default>"
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--scalapb-jvm-plugins=\"['<str>', '<str>', ...]\"",
          "config_key": "jvm_plugins",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--scalapb-jvm-plugins=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_SCALAPB_JVM_PLUGINS",
          "help": "A list of JVM-based `protoc` plugins to invoke when generating Scala code from protobuf files. The format for each plugin specifier is `NAME=ARTIFACT` where NAME is the name of the plugin and ARTIFACT is either the address of a `jvm_artifact` target or the colon-separated Maven coordinate for the plugin's jar artifact.\n\nFor example, to invoke the fs2-grpc protoc plugin, the following option would work: `--scalapb-jvm-plugins=fs2=org.typelevel:fs2-grpc-codegen_2.12:2.3.1`. (Note: you would also need to set --scalapb-runtime-dependencies appropriately to include the applicable runtime libraries for your chosen protoc plugins.)",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--scalapb-jvm-plugins"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--jvm-plugins"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "The ScalaPB protocol buffer compiler (https://scalapb.github.io/).",
      "is_goal": false,
      "provider": "pants.backend.experimental.codegen.protobuf.scala",
      "scope": "scalapb"
    },
    "scalatest": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--scalatest-version=<str>",
          "config_key": "version",
          "default": "3.2.10",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--scalatest-version=<str>"
          ],
          "env_var": "PANTS_SCALATEST_VERSION",
          "help": "Version string for the tool. This is available for substitution in the `[scalatest].artifacts` option by including the string `{version}`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--scalatest-version"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "3.2.10"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--scalatest-artifacts=\"['<str>', '<str>', ...]\"",
          "config_key": "artifacts",
          "default": [
            "org.scalatest:scalatest_2.13:{version}"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--scalatest-artifacts=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_SCALATEST_ARTIFACTS",
          "help": "Artifact requirements for this tool using specified as either the address of a `jvm_artifact` target or, alternatively, as a colon-separated Maven coordinates (e.g., group:name:version). For Maven coordinates, the string `{version}` version will be substituted with the value of the `[scalatest].version` option.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--scalatest-artifacts"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--artifacts"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "org.scalatest:scalatest_2.13:{version}"
                ]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--scalatest-lockfile=<str>",
          "config_key": "lockfile",
          "default": "<default>",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--scalatest-lockfile=<str>"
          ],
          "env_var": "PANTS_SCALATEST_LOCKFILE",
          "help": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` option. See https://github.com/pantsbuild/pants/blob/release_2.12.1/src/python/pants/backend/scala/subsystems/scalatest.default.lockfile.txt for the default lockfile contents.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 jvm-generate-lockfiles --resolve=scalatest`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--scalatest-lockfile"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--lockfile"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "<default>"
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--scalatest-args=\"[<shell_str>, <shell_str>, ...]\", ... -- [<shell_str> [<shell_str> [...]]]",
          "config_key": "args",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--scalatest-args=\"[<shell_str>, <shell_str>, ...]\"",
            "... -- [<shell_str> [<shell_str> [...]]]"
          ],
          "env_var": "PANTS_SCALATEST_ARGS",
          "help": "Arguments to pass directly to Scalatest, e.g. `--scalatest-args='-t $testname'`.\n\nSee https://www.scalatest.org/user_guide/using_the_runner for supported arguments.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--scalatest-args"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--args"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "from command-line flag",
                "rank": "FLAG",
                "value": []
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "The Scalatest test framework (https://www.scalatest.org/)",
      "is_goal": false,
      "provider": "pants.backend.experimental.scala",
      "scope": "scalatest"
    },
    "scc": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--scc-version=<str>",
          "config_key": "version",
          "default": "3.0.0",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--scc-version=<str>"
          ],
          "env_var": "PANTS_SCC_VERSION",
          "help": "Use this version of SCC.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--scc-version"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "3.0.0"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--scc-known-versions=\"['<str>', '<str>', ...]\"",
          "config_key": "known_versions",
          "default": [
            "3.0.0|macos_arm64 |846cb1b25025a0794d455719bc17cfb3f588576a58af1d95036f6c654e294f98|2006145",
            "3.0.0|macos_x86_64|9c3064e477ab36e16204ad34f649372034bca4df669615eff5de4aa05b2ddf1a|2048134",
            "3.0.0|linux_arm64 |04f9e797b70a678833e49df5e744f95080dfb7f963c0cd34f5b5d4712d290f33|1768037",
            "3.0.0|linux_x86_64|13ca47ce00b5bd032f97f3af7aa8eb3c717b8972b404b155a378b09110e4aa0c|1948341"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--scc-known-versions=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_SCC_KNOWN_VERSIONS",
          "help": "\nKnown versions to verify downloads against.\n\nEach element is a pipe-separated string of `version|platform|sha256|length`, where:\n\n    - `version` is the version string\n    - `platform` is one of [linux_arm64,linux_x86_64,macos_arm64,macos_x86_64],\n    - `sha256` is the 64-character hex representation of the expected sha256\n    digest of the download file, as emitted by `shasum -a 256`\n    - `length` is the expected length of the download file in bytes, as emitted by\n    `wc -c`\n\nE.g., `3.1.2|macos_x86_64|6d0f18cd84b918c7b3edd0203e75569e0c7caecb1367bbbe409b44e28514f5be|42813`.\n\nValues are space-stripped, so pipes can be indented for readability if necessary.\n",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--scc-known-versions"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--known-versions"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "3.0.0|macos_arm64 |846cb1b25025a0794d455719bc17cfb3f588576a58af1d95036f6c654e294f98|2006145",
                  "3.0.0|macos_x86_64|9c3064e477ab36e16204ad34f649372034bca4df669615eff5de4aa05b2ddf1a|2048134",
                  "3.0.0|linux_arm64 |04f9e797b70a678833e49df5e744f95080dfb7f963c0cd34f5b5d4712d290f33|1768037",
                  "3.0.0|linux_x86_64|13ca47ce00b5bd032f97f3af7aa8eb3c717b8972b404b155a378b09110e4aa0c|1948341"
                ]
              }
            ]
          }
        },
        {
          "choices": [
            "error",
            "warning"
          ],
          "comma_separated_choices": "error, warning",
          "comma_separated_display_args": "--scc-use-unsupported-version=<UnsupportedVersionUsage>",
          "config_key": "use_unsupported_version",
          "default": "error",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--scc-use-unsupported-version=<UnsupportedVersionUsage>"
          ],
          "env_var": "PANTS_SCC_USE_UNSUPPORTED_VERSION",
          "help": "\nWhat action to take in case the requested version of SCC is not supported.\n\nSupported SCC versions: unspecified\n",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--scc-use-unsupported-version"
          ],
          "typ": "UnsupportedVersionUsage",
          "unscoped_cmd_line_args": [
            "--use-unsupported-version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "error"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--scc-url-template=<str>",
          "config_key": "url_template",
          "default": "https://github.com/boyter/scc/releases/download/v{version}/scc-{version}-{platform}.zip",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--scc-url-template=<str>"
          ],
          "env_var": "PANTS_SCC_URL_TEMPLATE",
          "help": "URL to download the tool, either as a single binary file or a compressed file (e.g. zip file). You can change this to point to your own hosted file, e.g. to work with proxies or for access via the filesystem through a `file:$abspath` URL (e.g. `file:/this/is/absolute`, possibly by [templating the buildroot in a config file](https://www.pantsbuild.org/v2.12/docs/options#config-file-entries)).\n\nUse `{version}` to have the value from --version substituted, and `{platform}` to have a value from --url-platform-mapping substituted in, depending on the current platform. For example, https://github.com/.../protoc-{version}-{platform}.zip.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--scc-url-template"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--url-template"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "https://github.com/boyter/scc/releases/download/v{version}/scc-{version}-{platform}.zip"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--scc-url-platform-mapping=\"{'key1': val1, 'key2': val2, ...}\"",
          "config_key": "url_platform_mapping",
          "default": {
            "linux_arm64": "arm64-unknown-linux",
            "linux_x86_64": "x86_64-unknown-linux",
            "macos_arm64": "arm64-apple-darwin",
            "macos_x86_64": "x86_64-apple-darwin"
          },
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--scc-url-platform-mapping=\"{'key1': val1, 'key2': val2, ...}\""
          ],
          "env_var": "PANTS_SCC_URL_PLATFORM_MAPPING",
          "help": "A dictionary mapping platforms to strings to be used when generating the URL to download the tool.\n\nIn --url-template, anytime the `{platform}` string is used, Pants will determine the current platform, and substitute `{platform}` with the respective value from your dictionary.\n\nFor example, if you define `{\"macos_x86_64\": \"apple-darwin\", \"linux_x86_64\": \"unknown-linux\"}`, and run Pants on Linux with an intel architecture, then `{platform}` will be substituted in the --url-template option with unknown-linux.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--scc-url-platform-mapping"
          ],
          "typ": "dict",
          "unscoped_cmd_line_args": [
            "--url-platform-mapping"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": {}
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": {
                  "linux_arm64": "arm64-unknown-linux",
                  "linux_x86_64": "x86_64-unknown-linux",
                  "macos_arm64": "arm64-apple-darwin",
                  "macos_x86_64": "x86_64-apple-darwin"
                }
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--scc-args=\"[<shell_str>, <shell_str>, ...]\", ... -- [<shell_str> [<shell_str> [...]]]",
          "config_key": "args",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--scc-args=\"[<shell_str>, <shell_str>, ...]\"",
            "... -- [<shell_str> [<shell_str> [...]]]"
          ],
          "env_var": "PANTS_SCC_ARGS",
          "help": "Arguments to pass directly to SCC, e.g. `--scc-args='--no-cocomo'`.\n\nRefer to to https://github.com/boyter/scc.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--scc-args"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--args"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "from command-line flag",
                "rank": "FLAG",
                "value": []
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "The Succinct Code Counter, aka `scc` (https://github.com/boyter/scc).",
      "is_goal": false,
      "provider": "pants.backend.project_info",
      "scope": "scc"
    },
    "setup-py-generation": {
      "advanced": [],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]setup-py-generation-generate-setup-default",
          "config_key": "generate_setup_default",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]setup-py-generation-generate-setup-default"
          ],
          "env_var": "PANTS_SETUP_PY_GENERATION_GENERATE_SETUP_DEFAULT",
          "help": "The default value for the `generate_setup` field on `python_distribution` targets. Can be overridden per-target by setting that field explicitly. Set this to False if you mostly rely on handwritten setup files (setup.py, setup.cfg and similar). Leave as True if you mostly rely on Pants generating setup files for you.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--setup-py-generation-generate-setup-default",
            "--no-setup-py-generation-generate-setup-default"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--generate-setup-default",
            "--no-generate-setup-default"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        },
        {
          "choices": [
            "exact",
            "compatible",
            "any"
          ],
          "comma_separated_choices": "exact, compatible, any",
          "comma_separated_display_args": "--setup-py-generation-first-party-dependency-version-scheme=<FirstPartyDependencyVersionScheme>",
          "config_key": "first_party_dependency_version_scheme",
          "default": "exact",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--setup-py-generation-first-party-dependency-version-scheme=<FirstPartyDependencyVersionScheme>"
          ],
          "env_var": "PANTS_SETUP_PY_GENERATION_FIRST_PARTY_DEPENDENCY_VERSION_SCHEME",
          "help": "What version to set in `install_requires` when a `python_distribution` depends on other `python_distribution`s. If `exact`, will use `==`. If `compatible`, will use `~=`. If `any`, will leave off the version. See https://www.python.org/dev/peps/pep-0440/#version-specifiers.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--setup-py-generation-first-party-dependency-version-scheme"
          ],
          "typ": "FirstPartyDependencyVersionScheme",
          "unscoped_cmd_line_args": [
            "--first-party-dependency-version-scheme"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "exact"
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Options to control how setup.py is generated from a `python_distribution` target.",
      "is_goal": false,
      "provider": "pants.backend.python",
      "scope": "setup-py-generation"
    },
    "setuptools": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--setuptools-version=<str>",
          "config_key": "version",
          "default": "setuptools>=63.1.0,<64.0",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--setuptools-version=<str>"
          ],
          "env_var": "PANTS_SETUPTOOLS_VERSION",
          "help": "Requirement string for the tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--setuptools-version"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "setuptools>=63.1.0,<64.0"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--setuptools-extra-requirements=\"['<str>', '<str>', ...]\"",
          "config_key": "extra_requirements",
          "default": [
            "wheel>=0.35.1,<0.38"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--setuptools-extra-requirements=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_SETUPTOOLS_EXTRA_REQUIREMENTS",
          "help": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--setuptools-extra-requirements"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--extra-requirements"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "wheel>=0.35.1,<0.38"
                ]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--setuptools-lockfile=<str>",
          "config_key": "lockfile",
          "default": "<default>",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--setuptools-lockfile=<str>"
          ],
          "env_var": "PANTS_SETUPTOOLS_LOCKFILE",
          "help": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.12.1/src/python/pants/backend/python/subsystems/setuptools.lock for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 generate-lockfiles --resolve=setuptools`.\n\nAs explained at https://www.pantsbuild.org/v2.12/docs/python-third-party-dependencies, lockfile generation via `generate-lockfiles` does not always work and you may want to manually generate the lockfile. You will want to set `[python].invalid_lockfile_behavior = 'ignore'` so that Pants does not complain about missing lockfile headers.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--setuptools-lockfile"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--lockfile"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "<default>"
              }
            ]
          }
        }
      ],
      "basic": [],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Python setuptools, used to package `python_distribution` targets.",
      "is_goal": false,
      "provider": "pants.backend.python",
      "scope": "setuptools"
    },
    "shell-setup": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--shell-setup-executable-search-paths=\"[<binary-paths>, <binary-paths>, ...]\"",
          "config_key": "executable_search_paths",
          "default": [
            "<PATH>"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--shell-setup-executable-search-paths=\"[<binary-paths>, <binary-paths>, ...]\""
          ],
          "env_var": "PANTS_SHELL_SETUP_EXECUTABLE_SEARCH_PATHS",
          "help": "The PATH value that will be used to find shells and to run certain processes like the shunit2 test runner.\n\nThe special string `\"<PATH>\"` will expand to the contents of the PATH env var.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--shell-setup-executable-search-paths"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--executable-search-paths"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "<PATH>"
                ]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]shell-setup-dependency-inference",
          "config_key": "dependency_inference",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]shell-setup-dependency-inference"
          ],
          "env_var": "PANTS_SHELL_SETUP_DEPENDENCY_INFERENCE",
          "help": "Infer Shell dependencies on other Shell files by analyzing `source` statements.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--shell-setup-dependency-inference",
            "--no-shell-setup-dependency-inference"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--dependency-inference",
            "--no-dependency-inference"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        }
      ],
      "basic": [],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Options for Pants's Shell support.",
      "is_goal": false,
      "provider": "pants.backend.shell",
      "scope": "shell-setup"
    },
    "shellcheck": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--shellcheck-version=<str>",
          "config_key": "version",
          "default": "v0.8.0",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--shellcheck-version=<str>"
          ],
          "env_var": "PANTS_SHELLCHECK_VERSION",
          "help": "Use this version of Shellcheck.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--shellcheck-version"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "v0.8.0"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--shellcheck-known-versions=\"['<str>', '<str>', ...]\"",
          "config_key": "known_versions",
          "default": [
            "v0.8.0|macos_arm64 |e065d4afb2620cc8c1d420a9b3e6243c84ff1a693c1ff0e38f279c8f31e86634|4049756",
            "v0.8.0|macos_x86_64|e065d4afb2620cc8c1d420a9b3e6243c84ff1a693c1ff0e38f279c8f31e86634|4049756",
            "v0.8.0|linux_arm64 |9f47bbff5624babfa712eb9d64ece14c6c46327122d0c54983f627ae3a30a4ac|2996468",
            "v0.8.0|linux_x86_64|ab6ee1b178f014d1b86d1e24da20d1139656c8b0ed34d2867fbb834dad02bf0a|1403852"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--shellcheck-known-versions=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_SHELLCHECK_KNOWN_VERSIONS",
          "help": "\nKnown versions to verify downloads against.\n\nEach element is a pipe-separated string of `version|platform|sha256|length`, where:\n\n    - `version` is the version string\n    - `platform` is one of [linux_arm64,linux_x86_64,macos_arm64,macos_x86_64],\n    - `sha256` is the 64-character hex representation of the expected sha256\n    digest of the download file, as emitted by `shasum -a 256`\n    - `length` is the expected length of the download file in bytes, as emitted by\n    `wc -c`\n\nE.g., `3.1.2|macos_x86_64|6d0f18cd84b918c7b3edd0203e75569e0c7caecb1367bbbe409b44e28514f5be|42813`.\n\nValues are space-stripped, so pipes can be indented for readability if necessary.\n",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--shellcheck-known-versions"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--known-versions"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "v0.8.0|macos_arm64 |e065d4afb2620cc8c1d420a9b3e6243c84ff1a693c1ff0e38f279c8f31e86634|4049756",
                  "v0.8.0|macos_x86_64|e065d4afb2620cc8c1d420a9b3e6243c84ff1a693c1ff0e38f279c8f31e86634|4049756",
                  "v0.8.0|linux_arm64 |9f47bbff5624babfa712eb9d64ece14c6c46327122d0c54983f627ae3a30a4ac|2996468",
                  "v0.8.0|linux_x86_64|ab6ee1b178f014d1b86d1e24da20d1139656c8b0ed34d2867fbb834dad02bf0a|1403852"
                ]
              }
            ]
          }
        },
        {
          "choices": [
            "error",
            "warning"
          ],
          "comma_separated_choices": "error, warning",
          "comma_separated_display_args": "--shellcheck-use-unsupported-version=<UnsupportedVersionUsage>",
          "config_key": "use_unsupported_version",
          "default": "error",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--shellcheck-use-unsupported-version=<UnsupportedVersionUsage>"
          ],
          "env_var": "PANTS_SHELLCHECK_USE_UNSUPPORTED_VERSION",
          "help": "\nWhat action to take in case the requested version of Shellcheck is not supported.\n\nSupported Shellcheck versions: unspecified\n",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--shellcheck-use-unsupported-version"
          ],
          "typ": "UnsupportedVersionUsage",
          "unscoped_cmd_line_args": [
            "--use-unsupported-version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "error"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--shellcheck-url-template=<str>",
          "config_key": "url_template",
          "default": "https://github.com/koalaman/shellcheck/releases/download/{version}/shellcheck-{version}.{platform}.tar.xz",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--shellcheck-url-template=<str>"
          ],
          "env_var": "PANTS_SHELLCHECK_URL_TEMPLATE",
          "help": "URL to download the tool, either as a single binary file or a compressed file (e.g. zip file). You can change this to point to your own hosted file, e.g. to work with proxies or for access via the filesystem through a `file:$abspath` URL (e.g. `file:/this/is/absolute`, possibly by [templating the buildroot in a config file](https://www.pantsbuild.org/v2.12/docs/options#config-file-entries)).\n\nUse `{version}` to have the value from --version substituted, and `{platform}` to have a value from --url-platform-mapping substituted in, depending on the current platform. For example, https://github.com/.../protoc-{version}-{platform}.zip.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--shellcheck-url-template"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--url-template"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "https://github.com/koalaman/shellcheck/releases/download/{version}/shellcheck-{version}.{platform}.tar.xz"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--shellcheck-url-platform-mapping=\"{'key1': val1, 'key2': val2, ...}\"",
          "config_key": "url_platform_mapping",
          "default": {
            "linux_arm64": "linux.aarch64",
            "linux_x86_64": "linux.x86_64",
            "macos_arm64": "darwin.x86_64",
            "macos_x86_64": "darwin.x86_64"
          },
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--shellcheck-url-platform-mapping=\"{'key1': val1, 'key2': val2, ...}\""
          ],
          "env_var": "PANTS_SHELLCHECK_URL_PLATFORM_MAPPING",
          "help": "A dictionary mapping platforms to strings to be used when generating the URL to download the tool.\n\nIn --url-template, anytime the `{platform}` string is used, Pants will determine the current platform, and substitute `{platform}` with the respective value from your dictionary.\n\nFor example, if you define `{\"macos_x86_64\": \"apple-darwin\", \"linux_x86_64\": \"unknown-linux\"}`, and run Pants on Linux with an intel architecture, then `{platform}` will be substituted in the --url-template option with unknown-linux.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--shellcheck-url-platform-mapping"
          ],
          "typ": "dict",
          "unscoped_cmd_line_args": [
            "--url-platform-mapping"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": {}
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": {
                  "linux_arm64": "linux.aarch64",
                  "linux_x86_64": "linux.x86_64",
                  "macos_arm64": "darwin.x86_64",
                  "macos_x86_64": "darwin.x86_64"
                }
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]shellcheck-config-discovery",
          "config_key": "config_discovery",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]shellcheck-config-discovery"
          ],
          "env_var": "PANTS_SHELLCHECK_CONFIG_DISCOVERY",
          "help": "If true, Pants will include all relevant `.shellcheckrc` and `shellcheckrc` files during runs. See https://www.mankier.com/1/shellcheck#RC_Files for where these can be located.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--shellcheck-config-discovery",
            "--no-shellcheck-config-discovery"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--config-discovery",
            "--no-config-discovery"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]shellcheck-skip",
          "config_key": "skip",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]shellcheck-skip"
          ],
          "env_var": "PANTS_SHELLCHECK_SKIP",
          "help": "Don't use Shellcheck when running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 lint`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--shellcheck-skip",
            "--no-shellcheck-skip"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--skip",
            "--no-skip"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--shellcheck-args=\"[<shell_str>, <shell_str>, ...]\"",
          "config_key": "args",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--shellcheck-args=\"[<shell_str>, <shell_str>, ...]\""
          ],
          "env_var": "PANTS_SHELLCHECK_ARGS",
          "help": "Arguments to pass directly to Shellcheck, e.g. `--shellcheck-args='-e SC20529'`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--shellcheck-args"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--args"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "A linter for shell scripts.",
      "is_goal": false,
      "provider": "pants.backend.shell",
      "scope": "shellcheck"
    },
    "shfmt": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--shfmt-version=<str>",
          "config_key": "version",
          "default": "v3.2.4",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--shfmt-version=<str>"
          ],
          "env_var": "PANTS_SHFMT_VERSION",
          "help": "Use this version of shfmt.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--shfmt-version"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "v3.2.4"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--shfmt-known-versions=\"['<str>', '<str>', ...]\"",
          "config_key": "known_versions",
          "default": [
            "v3.2.4|macos_arm64 |e70fc42e69debe3e400347d4f918630cdf4bf2537277d672bbc43490387508ec|2998546",
            "v3.2.4|macos_x86_64|43a0461a1b54070ddc04fbbf1b78f7861ee39a65a61f5466d15a39c4aba4f917|2980208",
            "v3.2.4|linux_arm64 |6474d9cc08a1c9fe2ef4be7a004951998e3067d46cf55a011ddd5ff7bfab3de6|2752512",
            "v3.2.4|linux_x86_64|3f5a47f8fec27fae3e06d611559a2063f5d27e4b9501171dde9959b8c60a3538|2797568"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--shfmt-known-versions=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_SHFMT_KNOWN_VERSIONS",
          "help": "\nKnown versions to verify downloads against.\n\nEach element is a pipe-separated string of `version|platform|sha256|length`, where:\n\n    - `version` is the version string\n    - `platform` is one of [linux_arm64,linux_x86_64,macos_arm64,macos_x86_64],\n    - `sha256` is the 64-character hex representation of the expected sha256\n    digest of the download file, as emitted by `shasum -a 256`\n    - `length` is the expected length of the download file in bytes, as emitted by\n    `wc -c`\n\nE.g., `3.1.2|macos_x86_64|6d0f18cd84b918c7b3edd0203e75569e0c7caecb1367bbbe409b44e28514f5be|42813`.\n\nValues are space-stripped, so pipes can be indented for readability if necessary.\n",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--shfmt-known-versions"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--known-versions"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "v3.2.4|macos_arm64 |e70fc42e69debe3e400347d4f918630cdf4bf2537277d672bbc43490387508ec|2998546",
                  "v3.2.4|macos_x86_64|43a0461a1b54070ddc04fbbf1b78f7861ee39a65a61f5466d15a39c4aba4f917|2980208",
                  "v3.2.4|linux_arm64 |6474d9cc08a1c9fe2ef4be7a004951998e3067d46cf55a011ddd5ff7bfab3de6|2752512",
                  "v3.2.4|linux_x86_64|3f5a47f8fec27fae3e06d611559a2063f5d27e4b9501171dde9959b8c60a3538|2797568"
                ]
              }
            ]
          }
        },
        {
          "choices": [
            "error",
            "warning"
          ],
          "comma_separated_choices": "error, warning",
          "comma_separated_display_args": "--shfmt-use-unsupported-version=<UnsupportedVersionUsage>",
          "config_key": "use_unsupported_version",
          "default": "error",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--shfmt-use-unsupported-version=<UnsupportedVersionUsage>"
          ],
          "env_var": "PANTS_SHFMT_USE_UNSUPPORTED_VERSION",
          "help": "\nWhat action to take in case the requested version of shfmt is not supported.\n\nSupported shfmt versions: unspecified\n",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--shfmt-use-unsupported-version"
          ],
          "typ": "UnsupportedVersionUsage",
          "unscoped_cmd_line_args": [
            "--use-unsupported-version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "error"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--shfmt-url-template=<str>",
          "config_key": "url_template",
          "default": "https://github.com/mvdan/sh/releases/download/{version}/shfmt_{version}_{platform}",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--shfmt-url-template=<str>"
          ],
          "env_var": "PANTS_SHFMT_URL_TEMPLATE",
          "help": "URL to download the tool, either as a single binary file or a compressed file (e.g. zip file). You can change this to point to your own hosted file, e.g. to work with proxies or for access via the filesystem through a `file:$abspath` URL (e.g. `file:/this/is/absolute`, possibly by [templating the buildroot in a config file](https://www.pantsbuild.org/v2.12/docs/options#config-file-entries)).\n\nUse `{version}` to have the value from --version substituted, and `{platform}` to have a value from --url-platform-mapping substituted in, depending on the current platform. For example, https://github.com/.../protoc-{version}-{platform}.zip.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--shfmt-url-template"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--url-template"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "https://github.com/mvdan/sh/releases/download/{version}/shfmt_{version}_{platform}"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--shfmt-url-platform-mapping=\"{'key1': val1, 'key2': val2, ...}\"",
          "config_key": "url_platform_mapping",
          "default": {
            "linux_arm64": "linux_arm64",
            "linux_x86_64": "linux_amd64",
            "macos_arm64": "darwin_arm64",
            "macos_x86_64": "darwin_amd64"
          },
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--shfmt-url-platform-mapping=\"{'key1': val1, 'key2': val2, ...}\""
          ],
          "env_var": "PANTS_SHFMT_URL_PLATFORM_MAPPING",
          "help": "A dictionary mapping platforms to strings to be used when generating the URL to download the tool.\n\nIn --url-template, anytime the `{platform}` string is used, Pants will determine the current platform, and substitute `{platform}` with the respective value from your dictionary.\n\nFor example, if you define `{\"macos_x86_64\": \"apple-darwin\", \"linux_x86_64\": \"unknown-linux\"}`, and run Pants on Linux with an intel architecture, then `{platform}` will be substituted in the --url-template option with unknown-linux.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--shfmt-url-platform-mapping"
          ],
          "typ": "dict",
          "unscoped_cmd_line_args": [
            "--url-platform-mapping"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": {}
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": {
                  "linux_arm64": "linux_arm64",
                  "linux_x86_64": "linux_amd64",
                  "macos_arm64": "darwin_arm64",
                  "macos_x86_64": "darwin_amd64"
                }
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]shfmt-config-discovery",
          "config_key": "config_discovery",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]shfmt-config-discovery"
          ],
          "env_var": "PANTS_SHFMT_CONFIG_DISCOVERY",
          "help": "If true, Pants will include all relevant `.editorconfig` files during runs. See https://editorconfig.org.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--shfmt-config-discovery",
            "--no-shfmt-config-discovery"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--config-discovery",
            "--no-config-discovery"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]shfmt-skip",
          "config_key": "skip",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]shfmt-skip"
          ],
          "env_var": "PANTS_SHFMT_SKIP",
          "help": "Don't use shfmt when running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 fmt` and `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 lint`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--shfmt-skip",
            "--no-shfmt-skip"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--skip",
            "--no-skip"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--shfmt-args=\"[<shell_str>, <shell_str>, ...]\"",
          "config_key": "args",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--shfmt-args=\"[<shell_str>, <shell_str>, ...]\""
          ],
          "env_var": "PANTS_SHFMT_ARGS",
          "help": "Arguments to pass directly to shfmt, e.g. `--shfmt-args='-i 2'`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--shfmt-args"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--args"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "An autoformatter for shell scripts (https://github.com/mvdan/sh).",
      "is_goal": false,
      "provider": "pants.backend.shell.lint.shfmt",
      "scope": "shfmt"
    },
    "source": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--source-root-patterns=\"[[\"pattern1\", \"pattern2\", ...], [\"pattern1\", \"pattern2\", ...], ...]\"",
          "config_key": "root_patterns",
          "default": [
            "/",
            "src",
            "src/python",
            "src/py",
            "src/thrift",
            "src/protobuf",
            "src/protos",
            "src/scala",
            "src/java"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--source-root-patterns=\"[[\"pattern1\", \"pattern2\", ...], [\"pattern1\", \"pattern2\", ...], ...]\""
          ],
          "env_var": "PANTS_SOURCE_ROOT_PATTERNS",
          "help": "A list of source root suffixes. A directory with this suffix will be considered a potential source root. E.g., `src/python` will match `<buildroot>/src/python`, `<buildroot>/project1/src/python` etc. Prepend a `/` to anchor the match at the buildroot. E.g., `/src/python` will match `<buildroot>/src/python` but not `<buildroot>/project1/src/python`. A `*` wildcard will match a single path segment, e.g., `src/*` will match `<buildroot>/src/python` and `<buildroot>/src/rust`. Use `/` to signify that the buildroot itself is a source root. See https://www.pantsbuild.org/v2.12/docs/source-roots.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--source-root-patterns"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--root-patterns"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "/",
                  "src",
                  "src/python",
                  "src/py",
                  "src/thrift",
                  "src/protobuf",
                  "src/protos",
                  "src/scala",
                  "src/java"
                ]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--source-marker-filenames=\"[filename, filename, ...]\"",
          "config_key": "marker_filenames",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--source-marker-filenames=\"[filename, filename, ...]\""
          ],
          "env_var": "PANTS_SOURCE_MARKER_FILENAMES",
          "help": "The presence of a file of this name in a directory indicates that the directory is a source root. The content of the file doesn't matter, and may be empty. Useful when you can't or don't wish to centrally enumerate source roots via `root_patterns`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--source-marker-filenames"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--marker-filenames"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        }
      ],
      "basic": [],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Configuration for roots of source trees.",
      "is_goal": false,
      "provider": "pants.core",
      "scope": "source"
    },
    "stats": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]stats-log",
          "config_key": "log",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]stats-log"
          ],
          "env_var": "PANTS_STATS_LOG",
          "help": "At the end of the Pants run, log all counter metrics and summaries of observation histograms, e.g. the number of cache hits and the time saved by caching.\n\nFor histogram summaries to work, you must add `hdrhistogram` to `[GLOBAL].plugins`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--stats-log",
            "--no-stats-log"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--log",
            "--no-log"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]stats-memory-summary",
          "config_key": "memory_summary",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]stats-memory-summary"
          ],
          "env_var": "PANTS_STATS_MEMORY_SUMMARY",
          "help": "At the end of the Pants run, report a summary of memory usage.\n\nKeys are the total size in bytes, the count, and the name. Note that the total size is for all instances added together, so you can use total_size // count to get the average size.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--stats-memory-summary",
            "--no-stats-memory-summary"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--memory-summary",
            "--no-memory-summary"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        }
      ],
      "basic": [],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "An aggregator for Pants stats, such as cache metrics.",
      "is_goal": false,
      "provider": "pants.core",
      "scope": "stats"
    },
    "subprocess-environment": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--subprocess-environment-env-vars=\"['<str>', '<str>', ...]\"",
          "config_key": "env_vars",
          "default": [
            "LANG",
            "LC_CTYPE",
            "LC_ALL",
            "SSL_CERT_FILE",
            "SSL_CERT_DIR"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--subprocess-environment-env-vars=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_SUBPROCESS_ENVIRONMENT_ENV_VARS",
          "help": "Environment variables to set for process invocations.\n\nEntries are either strings in the form `ENV_VAR=value` to set an explicit value; or just `ENV_VAR` to copy the value from Pants's own environment.\n\nSee https://www.pantsbuild.org/v2.12/docs/options#addremove-semantics for how to add and remove Pants's default for this option.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--subprocess-environment-env-vars"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--env-vars"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "LANG",
                  "LC_CTYPE",
                  "LC_ALL",
                  "SSL_CERT_FILE",
                  "SSL_CERT_DIR"
                ]
              }
            ]
          }
        }
      ],
      "basic": [],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Environment settings for forked subprocesses.",
      "is_goal": false,
      "provider": "pants.core",
      "scope": "subprocess-environment"
    },
    "tailor": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--tailor-build-file-name=<str>",
          "config_key": "build_file_name",
          "default": "BUILD",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--tailor-build-file-name=<str>"
          ],
          "env_var": "PANTS_TAILOR_BUILD_FILE_NAME",
          "help": "The name to use for generated BUILD files.\n\nThis must be compatible with `[GLOBAL].build_patterns`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--tailor-build-file-name"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--build-file-name"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "BUILD"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--tailor-build-file-header=<str>",
          "config_key": "build_file_header",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--tailor-build-file-header=<str>"
          ],
          "env_var": "PANTS_TAILOR_BUILD_FILE_HEADER",
          "help": "A header, e.g., a copyright notice, to add to the content of created BUILD files.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--tailor-build-file-header"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--build-file-header"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--tailor-build-file-indent=<str>",
          "config_key": "build_file_indent",
          "default": "    ",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--tailor-build-file-indent=<str>"
          ],
          "env_var": "PANTS_TAILOR_BUILD_FILE_INDENT",
          "help": "The indent to use when auto-editing BUILD files.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--tailor-build-file-indent"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--build-file-indent"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "    "
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--tailor-alias-mapping=\"{'key1': val1, 'key2': val2, ...}\"",
          "config_key": "alias_mapping",
          "default": {},
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--tailor-alias-mapping=\"{'key1': val1, 'key2': val2, ...}\""
          ],
          "env_var": "PANTS_TAILOR_ALIAS_MAPPING",
          "help": "A mapping from standard target type to custom type to use instead. The custom type can be a custom target type or a macro that offers compatible functionality to the one it replaces (see https://www.pantsbuild.org/v2.12/docs/macros).",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--tailor-alias-mapping"
          ],
          "typ": "dict",
          "unscoped_cmd_line_args": [
            "--alias-mapping"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": {}
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": {}
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--tailor-ignore-paths=\"['<str>', '<str>', ...]\"",
          "config_key": "ignore_paths",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--tailor-ignore-paths=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_TAILOR_IGNORE_PATHS",
          "help": "Do not edit or create BUILD files at these paths.\n\nCan use literal file names and/or globs, e.g. `['project/BUILD, 'ignore_me/**']`.\n\nThis augments the option `[GLOBAL].build_ignore`, which tells Pants to also not _read_ BUILD files at certain paths. In contrast, this option only tells Pants to not edit/create BUILD files at the specified paths.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--tailor-ignore-paths"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--ignore-paths"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--tailor-ignore-adding-targets=\"['<str>', '<str>', ...]\"",
          "config_key": "ignore_adding_targets",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--tailor-ignore-adding-targets=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_TAILOR_IGNORE_ADDING_TARGETS",
          "help": "Do not add these target definitions.\n\nExpects a list of target addresses that would normally be added by `tailor`, e.g. `['project:tgt']`. To find these names, you can run `tailor --check`, then combine the BUILD file path with the target's name. For example, if `tailor` would add the target `bin` to `project/BUILD`, then the address would be `project:bin`. If the BUILD file is at the root of your repository, use `//` for the path, e.g. `//:bin`.\n\nDoes not work with macros.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--tailor-ignore-adding-targets"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--ignore-adding-targets"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]tailor-check",
          "config_key": "check",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]tailor-check"
          ],
          "env_var": "PANTS_TAILOR_CHECK",
          "help": "Do not write changes to disk, only write back what would change. Return code 0 means there would be no changes, and 1 means that there would be.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--tailor-check",
            "--no-tailor-check"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--check",
            "--no-check"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Auto-generate BUILD file targets for new source files.",
      "is_goal": true,
      "provider": "pants.core",
      "scope": "tailor"
    },
    "terraform-fmt": {
      "advanced": [],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]terraform-fmt-skip",
          "config_key": "skip",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]terraform-fmt-skip"
          ],
          "env_var": "PANTS_TERRAFORM_FMT_SKIP",
          "help": "Don't use `terraform fmt` when running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 fmt` and `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 lint`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--terraform-fmt-skip",
            "--no-terraform-fmt-skip"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--skip",
            "--no-skip"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Terraform fmt options.",
      "is_goal": false,
      "provider": "pants.backend.experimental.terraform",
      "scope": "terraform-fmt"
    },
    "terraform-hcl2-parser": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--terraform-hcl2-parser-version=<str>",
          "config_key": "version",
          "default": "python-hcl2==3.0.5",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--terraform-hcl2-parser-version=<str>"
          ],
          "env_var": "PANTS_TERRAFORM_HCL2_PARSER_VERSION",
          "help": "Requirement string for the tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--terraform-hcl2-parser-version"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "python-hcl2==3.0.5"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--terraform-hcl2-parser-extra-requirements=\"['<str>', '<str>', ...]\"",
          "config_key": "extra_requirements",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--terraform-hcl2-parser-extra-requirements=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_TERRAFORM_HCL2_PARSER_EXTRA_REQUIREMENTS",
          "help": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--terraform-hcl2-parser-extra-requirements"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--extra-requirements"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--terraform-hcl2-parser-interpreter-constraints=\"['<str>', '<str>', ...]\"",
          "config_key": "interpreter_constraints",
          "default": [
            "CPython>=3.7,<4"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--terraform-hcl2-parser-interpreter-constraints=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_TERRAFORM_HCL2_PARSER_INTERPRETER_CONSTRAINTS",
          "help": "Python interpreter constraints for this tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--terraform-hcl2-parser-interpreter-constraints"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--interpreter-constraints"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "CPython>=3.7,<4"
                ]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--terraform-hcl2-parser-lockfile=<str>",
          "config_key": "lockfile",
          "default": "<default>",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--terraform-hcl2-parser-lockfile=<str>"
          ],
          "env_var": "PANTS_TERRAFORM_HCL2_PARSER_LOCKFILE",
          "help": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.12.1/src/python/pants/backend/terraform/hcl2.lock for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 generate-lockfiles --resolve=terraform-hcl2-parser`.\n\nAs explained at https://www.pantsbuild.org/v2.12/docs/python-third-party-dependencies, lockfile generation via `generate-lockfiles` does not always work and you may want to manually generate the lockfile. You will want to set `[python].invalid_lockfile_behavior = 'ignore'` so that Pants does not complain about missing lockfile headers.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--terraform-hcl2-parser-lockfile"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--lockfile"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "<default>"
              }
            ]
          }
        }
      ],
      "basic": [],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Used to parse Terraform modules to infer their dependencies.",
      "is_goal": false,
      "provider": "pants.backend.experimental.terraform",
      "scope": "terraform-hcl2-parser"
    },
    "terraform-validate": {
      "advanced": [],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]terraform-validate-skip",
          "config_key": "skip",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]terraform-validate-skip"
          ],
          "env_var": "PANTS_TERRAFORM_VALIDATE_SKIP",
          "help": "Don't use `terraform validate` when running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 check`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--terraform-validate-skip",
            "--no-terraform-validate-skip"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--skip",
            "--no-skip"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Terraform validate options.",
      "is_goal": false,
      "provider": "pants.backend.experimental.terraform",
      "scope": "terraform-validate"
    },
    "test": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]test-report",
          "config_key": "report",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]test-report"
          ],
          "env_var": "PANTS_TEST_REPORT",
          "help": "Write test reports to --report-dir.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--test-report",
            "--no-test-report"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--report",
            "--no-report"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--test-report-dir=<str>",
          "config_key": "report_dir",
          "default": "{distdir}/test/reports",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--test-report-dir=<str>"
          ],
          "env_var": "PANTS_TEST_REPORT_DIR",
          "help": "Path to write test reports to. Must be relative to the build root.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--test-report-dir"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--report-dir"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "{distdir}/test/reports"
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]test-debug",
          "config_key": "debug",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]test-debug"
          ],
          "env_var": "PANTS_TEST_DEBUG",
          "help": "Run tests sequentially in an interactive process. This is necessary, for example, when you add breakpoints to your code.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--test-debug",
            "--no-test-debug"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--debug",
            "--no-debug"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]test-force",
          "config_key": "force",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]test-force"
          ],
          "env_var": "PANTS_TEST_FORCE",
          "help": "Force the tests to run, even if they could be satisfied from cache.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--test-force",
            "--no-test-force"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--force",
            "--no-force"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": [
            "all",
            "failed",
            "none"
          ],
          "comma_separated_choices": "all, failed, none",
          "comma_separated_display_args": "--test-output=<ShowOutput>",
          "config_key": "output",
          "default": "failed",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--test-output=<ShowOutput>"
          ],
          "env_var": "PANTS_TEST_OUTPUT",
          "help": "Show stdout/stderr for these tests.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--test-output"
          ],
          "typ": "ShowOutput",
          "unscoped_cmd_line_args": [
            "--output"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "failed"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]test-use-coverage",
          "config_key": "use_coverage",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]test-use-coverage"
          ],
          "env_var": "PANTS_TEST_USE_COVERAGE",
          "help": "Generate a coverage report if the test runner supports it.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--test-use-coverage",
            "--no-test-use-coverage"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--use-coverage",
            "--no-use-coverage"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]test-open-coverage",
          "config_key": "open_coverage",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]test-open-coverage"
          ],
          "env_var": "PANTS_TEST_OPEN_COVERAGE",
          "help": "If a coverage report file is generated, open it on the local system if the system supports this.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--test-open-coverage",
            "--no-test-open-coverage"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--open-coverage",
            "--no-open-coverage"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--test-extra-env-vars=\"['<str>', '<str>', ...]\"",
          "config_key": "extra_env_vars",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--test-extra-env-vars=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_TEST_EXTRA_ENV_VARS",
          "help": "Additional environment variables to include in test processes. Entries are strings in the form `ENV_VAR=value` to use explicitly; or just `ENV_VAR` to copy the value of a variable in Pants's own environment.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--test-extra-env-vars"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--extra-env-vars"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        }
      ],
      "deprecated": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--test-xml-dir=<DIR>",
          "config_key": "xml_dir",
          "default": null,
          "deprecated_message": "Deprecated, is scheduled to be removed in version: 2.13.0.dev0.",
          "deprecation_active": true,
          "display_args": [
            "--test-xml-dir=<DIR>"
          ],
          "env_var": "PANTS_TEST_XML_DIR",
          "help": "Specifying a directory causes Junit XML result files to be emitted under that dir for each test run that supports producing them.",
          "removal_hint": "Set the `report` option in [test] scope to emit reports to a standard location under dist/. Set the `report-dir` option to customize that location.",
          "removal_version": "2.13.0.dev0",
          "scoped_cmd_line_args": [
            "--test-xml-dir"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--xml-dir"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        }
      ],
      "deprecated_scope": null,
      "description": "Run tests.",
      "is_goal": true,
      "provider": "pants.core",
      "scope": "test"
    },
    "thrift": {
      "advanced": [],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]thrift-dependency-inference",
          "config_key": "dependency_inference",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]thrift-dependency-inference"
          ],
          "env_var": "PANTS_THRIFT_DEPENDENCY_INFERENCE",
          "help": "Infer Thrift dependencies on other Thrift files by analyzing import statements.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--thrift-dependency-inference",
            "--no-thrift-dependency-inference"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--dependency-inference",
            "--no-dependency-inference"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "General Thrift IDL settings (https://thrift.apache.org/).",
      "is_goal": false,
      "provider": "pants.backend.codegen.thrift.apache.python",
      "scope": "thrift"
    },
    "twine": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--twine-version=<str>",
          "config_key": "version",
          "default": "twine>=3.7.1,<3.8",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--twine-version=<str>"
          ],
          "env_var": "PANTS_TWINE_VERSION",
          "help": "Requirement string for the tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--twine-version"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "twine>=3.7.1,<3.8"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--twine-extra-requirements=\"['<str>', '<str>', ...]\"",
          "config_key": "extra_requirements",
          "default": [
            "colorama>=0.4.3"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--twine-extra-requirements=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_TWINE_EXTRA_REQUIREMENTS",
          "help": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--twine-extra-requirements"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--extra-requirements"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "colorama>=0.4.3"
                ]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--twine-interpreter-constraints=\"['<str>', '<str>', ...]\"",
          "config_key": "interpreter_constraints",
          "default": [
            "CPython>=3.7,<4"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--twine-interpreter-constraints=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_TWINE_INTERPRETER_CONSTRAINTS",
          "help": "Python interpreter constraints for this tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--twine-interpreter-constraints"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--interpreter-constraints"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "CPython>=3.7,<4"
                ]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--twine-lockfile=<str>",
          "config_key": "lockfile",
          "default": "<default>",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--twine-lockfile=<str>"
          ],
          "env_var": "PANTS_TWINE_LOCKFILE",
          "help": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.12.1/src/python/pants/backend/python/subsystems/twine.lock for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 generate-lockfiles --resolve=twine`.\n\nAs explained at https://www.pantsbuild.org/v2.12/docs/python-third-party-dependencies, lockfile generation via `generate-lockfiles` does not always work and you may want to manually generate the lockfile. You will want to set `[python].invalid_lockfile_behavior = 'ignore'` so that Pants does not complain about missing lockfile headers.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--twine-lockfile"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--lockfile"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "<default>"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--twine-console-script=<str>",
          "config_key": "console_script",
          "default": "twine",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--twine-console-script=<str>"
          ],
          "env_var": "PANTS_TWINE_CONSOLE_SCRIPT",
          "help": "The console script for the tool. Using this option is generally preferable to (and mutually exclusive with) specifying an --entry-point since console script names have a higher expectation of staying stable across releases of the tool. Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--twine-console-script"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--console-script"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "twine"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--twine-entry-point=<str>",
          "config_key": "entry_point",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--twine-entry-point=<str>"
          ],
          "env_var": "PANTS_TWINE_ENTRY_POINT",
          "help": "The entry point for the tool. Generally you only want to use this option if the tool does not offer a --console-script (which this option is mutually exclusive with). Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--twine-entry-point"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--entry-point"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--twine-config=<file_option>",
          "config_key": "config",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--twine-config=<file_option>"
          ],
          "env_var": "PANTS_TWINE_CONFIG",
          "help": "Path to a .pypirc config file to use. (https://packaging.python.org/specifications/pypirc/)\n\nSetting this option will disable `[twine].config_discovery`. Use this option if the config is located in a non-standard location.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--twine-config"
          ],
          "typ": "file_option",
          "unscoped_cmd_line_args": [
            "--config"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]twine-config-discovery",
          "config_key": "config_discovery",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]twine-config-discovery"
          ],
          "env_var": "PANTS_TWINE_CONFIG_DISCOVERY",
          "help": "If true, Pants will include all relevant config files during runs (`.pypirc`).\n\nUse `[twine].config` instead if your config is in a non-standard location.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--twine-config-discovery",
            "--no-twine-config-discovery"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--config-discovery",
            "--no-config-discovery"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--twine-ca-certs-path=<str>",
          "config_key": "ca_certs_path",
          "default": "<inherit>",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--twine-ca-certs-path=<str>"
          ],
          "env_var": "PANTS_TWINE_CA_CERTS_PATH",
          "help": "Path to a file containing PEM-format CA certificates used for verifying secure connections when publishing python distributions.\n\nUses the value from `[GLOBAL].ca_certs_path` by default. Set to `\"<none>\"` to not use the default CA certificate.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--twine-ca-certs-path"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--ca-certs-path"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "<inherit>"
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]twine-skip",
          "config_key": "skip",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]twine-skip"
          ],
          "env_var": "PANTS_TWINE_SKIP",
          "help": "Don't use Twine when running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 publish`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--twine-skip",
            "--no-twine-skip"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--skip",
            "--no-skip"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--twine-args=\"[<shell_str>, <shell_str>, ...]\"",
          "config_key": "args",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--twine-args=\"[<shell_str>, <shell_str>, ...]\""
          ],
          "env_var": "PANTS_TWINE_ARGS",
          "help": "Arguments to pass directly to Twine, e.g. `--twine-args='--skip-existing'`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--twine-args"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--args"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "The utility for publishing Python distributions to PyPi and other Python repositories.",
      "is_goal": false,
      "provider": "pants.backend.experimental.python",
      "scope": "twine"
    },
    "update-build-files": {
      "advanced": [],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]update-build-files-check",
          "config_key": "check",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]update-build-files-check"
          ],
          "env_var": "PANTS_UPDATE_BUILD_FILES_CHECK",
          "help": "Do not write changes to disk, only write back what would change. Return code 0 means there would be no changes, and 1 means that there would be.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--update-build-files-check",
            "--no-update-build-files-check"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--check",
            "--no-check"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]update-build-files-fmt",
          "config_key": "fmt",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]update-build-files-fmt"
          ],
          "env_var": "PANTS_UPDATE_BUILD_FILES_FMT",
          "help": "Format BUILD files using Black or Yapf.\n\nSet `[black].args` / `[yapf].args`, `[black].config` / `[yapf].config` , and `[black].config_discovery` / `[yapf].config_discovery` to change Black's or Yapf's behavior. Set `[black].interpreter_constraints` / `[yapf].interpreter_constraints` and `[python].interpreter_search_path` to change which interpreter is used to run the formatter.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--update-build-files-fmt",
            "--no-update-build-files-fmt"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--fmt",
            "--no-fmt"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        },
        {
          "choices": [
            "yapf",
            "black"
          ],
          "comma_separated_choices": "yapf, black",
          "comma_separated_display_args": "--update-build-files-formatter=<Formatter>",
          "config_key": "formatter",
          "default": "black",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--update-build-files-formatter=<Formatter>"
          ],
          "env_var": "PANTS_UPDATE_BUILD_FILES_FORMATTER",
          "help": "Which formatter Pants should use to format BUILD files.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--update-build-files-formatter"
          ],
          "typ": "Formatter",
          "unscoped_cmd_line_args": [
            "--formatter"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "black"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]update-build-files-fix-safe-deprecations",
          "config_key": "fix_safe_deprecations",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]update-build-files-fix-safe-deprecations"
          ],
          "env_var": "PANTS_UPDATE_BUILD_FILES_FIX_SAFE_DEPRECATIONS",
          "help": "Automatically fix deprecations, such as target type renames, that are safe because they do not change semantics.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--update-build-files-fix-safe-deprecations",
            "--no-update-build-files-fix-safe-deprecations"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--fix-safe-deprecations",
            "--no-fix-safe-deprecations"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        }
      ],
      "deprecated": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]update-build-files-fix-python-macros",
          "config_key": "fix_python_macros",
          "default": false,
          "deprecated_message": "Deprecated, is scheduled to be removed in version: 2.13.0.dev0.",
          "deprecation_active": true,
          "display_args": [
            "--[no-]update-build-files-fix-python-macros"
          ],
          "env_var": "PANTS_UPDATE_BUILD_FILES_FIX_PYTHON_MACROS",
          "help": "Deprecated.",
          "removal_hint": "No longer does anything as the old macros have been removed in favor of target generators.",
          "removal_version": "2.13.0.dev0",
          "scoped_cmd_line_args": [
            "--update-build-files-fix-python-macros",
            "--no-update-build-files-fix-python-macros"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--fix-python-macros",
            "--no-fix-python-macros"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        }
      ],
      "deprecated_scope": null,
      "description": "Format and fix safe deprecations in BUILD files.\n\nThis does not handle the full Pants upgrade. You must still manually change `pants_version` in `pants.toml` and you may need to manually address some deprecations. See https://www.pantsbuild.org/v2.12/docs/upgrade-tips for upgrade tips.\n\nThis goal is run without arguments. It will run over all BUILD files in your project.",
      "is_goal": true,
      "provider": "pants.core",
      "scope": "update-build-files"
    },
    "version": {
      "advanced": [],
      "basic": [],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "Display Pants version.",
      "is_goal": true,
      "provider": "pants.goal",
      "scope": "version"
    },
    "yapf": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--yapf-version=<str>",
          "config_key": "version",
          "default": "yapf==0.32.0",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--yapf-version=<str>"
          ],
          "env_var": "PANTS_YAPF_VERSION",
          "help": "Requirement string for the tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--yapf-version"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--version"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "yapf==0.32.0"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--yapf-extra-requirements=\"['<str>', '<str>', ...]\"",
          "config_key": "extra_requirements",
          "default": [
            "toml"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--yapf-extra-requirements=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_YAPF_EXTRA_REQUIREMENTS",
          "help": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--yapf-extra-requirements"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--extra-requirements"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "toml"
                ]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--yapf-interpreter-constraints=\"['<str>', '<str>', ...]\"",
          "config_key": "interpreter_constraints",
          "default": [
            "CPython>=3.7,<4"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--yapf-interpreter-constraints=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_YAPF_INTERPRETER_CONSTRAINTS",
          "help": "Python interpreter constraints for this tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--yapf-interpreter-constraints"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--interpreter-constraints"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "CPython>=3.7,<4"
                ]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--yapf-lockfile=<str>",
          "config_key": "lockfile",
          "default": "<default>",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--yapf-lockfile=<str>"
          ],
          "env_var": "PANTS_YAPF_LOCKFILE",
          "help": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.12.1/src/python/pants/backend/python/lint/yapf/yapf.lock for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 generate-lockfiles --resolve=yapf`.\n\nAs explained at https://www.pantsbuild.org/v2.12/docs/python-third-party-dependencies, lockfile generation via `generate-lockfiles` does not always work and you may want to manually generate the lockfile. You will want to set `[python].invalid_lockfile_behavior = 'ignore'` so that Pants does not complain about missing lockfile headers.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--yapf-lockfile"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--lockfile"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "<default>"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--yapf-console-script=<str>",
          "config_key": "console_script",
          "default": "yapf",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--yapf-console-script=<str>"
          ],
          "env_var": "PANTS_YAPF_CONSOLE_SCRIPT",
          "help": "The console script for the tool. Using this option is generally preferable to (and mutually exclusive with) specifying an --entry-point since console script names have a higher expectation of staying stable across releases of the tool. Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--yapf-console-script"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--console-script"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "yapf"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--yapf-entry-point=<str>",
          "config_key": "entry_point",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--yapf-entry-point=<str>"
          ],
          "env_var": "PANTS_YAPF_ENTRY_POINT",
          "help": "The entry point for the tool. Generally you only want to use this option if the tool does not offer a --console-script (which this option is mutually exclusive with). Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--yapf-entry-point"
          ],
          "typ": "str",
          "unscoped_cmd_line_args": [
            "--entry-point"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--yapf-config=<file_option>",
          "config_key": "config",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--yapf-config=<file_option>"
          ],
          "env_var": "PANTS_YAPF_CONFIG",
          "help": "Path to style file understood by yapf (https://github.com/google/yapf#formatting-style/).\n\nSetting this option will disable `[yapf].config_discovery`. Use this option if the config is located in a non-standard location.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--yapf-config"
          ],
          "typ": "file_option",
          "unscoped_cmd_line_args": [
            "--config"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]yapf-config-discovery",
          "config_key": "config_discovery",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]yapf-config-discovery"
          ],
          "env_var": "PANTS_YAPF_CONFIG_DISCOVERY",
          "help": "If true, Pants will include any relevant config files during runs (`.style.yapf`, `pyproject.toml`, and `setup.cfg`).\n\nUse `[yapf].config` instead if your config is in a non-standard location.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--yapf-config-discovery",
            "--no-yapf-config-discovery"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--config-discovery",
            "--no-config-discovery"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]yapf-skip",
          "config_key": "skip",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]yapf-skip"
          ],
          "env_var": "PANTS_YAPF_SKIP",
          "help": "Don't use yapf when running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 fmt` and `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 lint`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--yapf-skip",
            "--no-yapf-skip"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--skip",
            "--no-skip"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--yapf-args=\"[<shell_str>, <shell_str>, ...]\"",
          "config_key": "args",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--yapf-args=\"[<shell_str>, <shell_str>, ...]\""
          ],
          "env_var": "PANTS_YAPF_ARGS",
          "help": "Arguments to pass directly to yapf, e.g. `--yapf-args='--no-local-style'`.\n\nCertain arguments, specifically `--recursive`, `--in-place`, and `--parallel`, will be ignored because Pants takes care of finding all the relevant files and running the formatting in parallel.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--yapf-args"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--args"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]yapf-export",
          "config_key": "export",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]yapf-export"
          ],
          "env_var": "PANTS_YAPF_EXPORT",
          "help": "If true, export a virtual environment with yapf when running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 export`.\n\nThis can be useful, for example, with IDE integrations to point your editor to the tool's binary.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--yapf-export",
            "--no-yapf-export"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--export",
            "--no-export"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "deprecated_scope": null,
      "description": "A formatter for Python files (https://github.com/google/yapf).",
      "is_goal": false,
      "provider": "pants.core",
      "scope": "yapf"
    }
  }
}

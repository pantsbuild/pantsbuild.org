{
  "name_to_goal_info": {
    "count-loc": {
      "consumed_scopes": [
        "",
        "download-pex-bin",
        "grpc-python-plugin",
        "mypy-protobuf",
        "pex",
        "protoc",
        "python-infer",
        "python-native-code",
        "python-protobuf",
        "python-repos",
        "python-setup",
        "scc",
        "shell-setup",
        "shellcheck",
        "source",
        "subprocess-environment"
      ],
      "description": "Count lines of code.",
      "is_implemented": true,
      "name": "count-loc"
    },
    "dependees": {
      "consumed_scopes": [
        "",
        "dependees",
        "download-pex-bin",
        "grpc-python-plugin",
        "mypy-protobuf",
        "pex",
        "protoc",
        "python-infer",
        "python-native-code",
        "python-protobuf",
        "python-repos",
        "python-setup",
        "shell-setup",
        "shellcheck",
        "source",
        "subprocess-environment"
      ],
      "description": "List all targets that depend on any of the input files/targets.",
      "is_implemented": true,
      "name": "dependees"
    },
    "dependencies": {
      "consumed_scopes": [
        "",
        "dependencies",
        "download-pex-bin",
        "grpc-python-plugin",
        "mypy-protobuf",
        "pex",
        "protoc",
        "python-infer",
        "python-native-code",
        "python-protobuf",
        "python-repos",
        "python-setup",
        "shell-setup",
        "shellcheck",
        "source",
        "subprocess-environment"
      ],
      "description": "List the dependencies of the input files/targets.",
      "is_implemented": true,
      "name": "dependencies"
    },
    "export-codegen": {
      "consumed_scopes": [
        "",
        "download-pex-bin",
        "grpc-python-plugin",
        "mypy-protobuf",
        "pex",
        "protoc",
        "python-infer",
        "python-native-code",
        "python-protobuf",
        "python-repos",
        "python-setup",
        "shell-setup",
        "shellcheck",
        "source",
        "subprocess-environment"
      ],
      "description": "Write generated files to `dist/codegen` for use outside of Pants.",
      "is_implemented": true,
      "name": "export-codegen"
    },
    "filedeps": {
      "consumed_scopes": [
        "",
        "download-pex-bin",
        "filedeps",
        "grpc-python-plugin",
        "mypy-protobuf",
        "pex",
        "protoc",
        "python-infer",
        "python-native-code",
        "python-protobuf",
        "python-repos",
        "python-setup",
        "shell-setup",
        "shellcheck",
        "source",
        "subprocess-environment"
      ],
      "description": "List all source and BUILD files a target depends on.",
      "is_implemented": true,
      "name": "filedeps"
    },
    "filter": {
      "consumed_scopes": ["", "filter"],
      "description": "Filter the input targets based on various criteria.\n\nMost of the filtering options below are comma-separated lists of filtering criteria, with an implied logical OR between them, so that a target passes the filter if it matches any of the criteria in the list. A '-' prefix inverts the sense of the entire comma-separated list, so that a target passes the filter only if it matches none of the criteria in the list.\n\nEach of the filtering options may be specified multiple times, with an implied logical AND between them.",
      "is_implemented": true,
      "name": "filter"
    },
    "fmt": {
      "consumed_scopes": [
        "",
        "black",
        "docformatter",
        "download-pex-bin",
        "fmt",
        "grpc-python-plugin",
        "isort",
        "mypy-protobuf",
        "pex",
        "protoc",
        "python-infer",
        "python-native-code",
        "python-protobuf",
        "python-repos",
        "python-setup",
        "shell-setup",
        "shellcheck",
        "shfmt",
        "source",
        "subprocess-environment",
        "yapf"
      ],
      "description": "Autoformat source code.",
      "is_implemented": true,
      "name": "fmt"
    },
    "generate-lockfiles": {
      "consumed_scopes": [
        "",
        "bandit",
        "black",
        "coverage-py",
        "docformatter",
        "download-pex-bin",
        "flake8",
        "generate-lockfiles",
        "grpc-python-plugin",
        "ipython",
        "isort",
        "lambdex",
        "mypy",
        "mypy-protobuf",
        "pex",
        "poetry",
        "protoc",
        "pylint",
        "pytest",
        "python-infer",
        "python-native-code",
        "python-protobuf",
        "python-repos",
        "python-setup",
        "setuptools",
        "shell-setup",
        "shellcheck",
        "source",
        "subprocess-environment",
        "yapf"
      ],
      "description": "Generate lockfiles for Python third-party dependencies.",
      "is_implemented": true,
      "name": "generate-lockfiles"
    },
    "generate-user-lockfile": {
      "consumed_scopes": [
        "",
        "download-pex-bin",
        "generate-lockfiles",
        "grpc-python-plugin",
        "mypy-protobuf",
        "pex",
        "poetry",
        "protoc",
        "python-infer",
        "python-native-code",
        "python-protobuf",
        "python-repos",
        "python-setup",
        "shell-setup",
        "shellcheck",
        "source",
        "subprocess-environment"
      ],
      "description": "Generate a lockfile for Python user requirements (experimental).",
      "is_implemented": true,
      "name": "generate-user-lockfile"
    },
    "lint": {
      "consumed_scopes": [
        "",
        "bandit",
        "black",
        "docformatter",
        "download-pex-bin",
        "flake8",
        "grpc-python-plugin",
        "isort",
        "lint",
        "mypy-protobuf",
        "pex",
        "protoc",
        "pylint",
        "python-infer",
        "python-native-code",
        "python-protobuf",
        "python-repos",
        "python-setup",
        "shell-setup",
        "shellcheck",
        "shfmt",
        "source",
        "subprocess-environment",
        "yapf"
      ],
      "description": "Run all linters and/or formatters in check mode.",
      "is_implemented": true,
      "name": "lint"
    },
    "list": {
      "consumed_scopes": ["", "list"],
      "description": "Lists all targets matching the file or target arguments.",
      "is_implemented": true,
      "name": "list"
    },
    "package": {
      "consumed_scopes": [
        "",
        "download-pex-bin",
        "grpc-python-plugin",
        "lambdex",
        "mypy-protobuf",
        "pex",
        "pex-binary-defaults",
        "protoc",
        "python-infer",
        "python-native-code",
        "python-protobuf",
        "python-repos",
        "python-setup",
        "setup-py-generation",
        "setuptools",
        "shell-setup",
        "shellcheck",
        "source",
        "subprocess-environment"
      ],
      "description": "Create a distributable package.",
      "is_implemented": true,
      "name": "package"
    },
    "peek": {
      "consumed_scopes": ["", "peek"],
      "description": "Display BUILD target info",
      "is_implemented": true,
      "name": "peek"
    },
    "py-constraints": {
      "consumed_scopes": [
        "",
        "download-pex-bin",
        "grpc-python-plugin",
        "mypy-protobuf",
        "pex",
        "protoc",
        "py-constraints",
        "python-infer",
        "python-native-code",
        "python-protobuf",
        "python-repos",
        "python-setup",
        "shell-setup",
        "shellcheck",
        "source",
        "subprocess-environment"
      ],
      "description": "Determine what Python interpreter constraints are used by files/targets.",
      "is_implemented": true,
      "name": "py-constraints"
    },
    "repl": {
      "consumed_scopes": [
        "",
        "download-pex-bin",
        "grpc-python-plugin",
        "ipython",
        "mypy-protobuf",
        "pex",
        "protoc",
        "python-infer",
        "python-native-code",
        "python-protobuf",
        "python-repos",
        "python-setup",
        "repl",
        "shell-setup",
        "shellcheck",
        "source",
        "subprocess-environment"
      ],
      "description": "Open a REPL with the specified code loadable.",
      "is_implemented": true,
      "name": "repl"
    },
    "roots": {
      "consumed_scopes": ["roots", "source"],
      "description": "List the repo's registered source roots.",
      "is_implemented": true,
      "name": "roots"
    },
    "run": {
      "consumed_scopes": [
        "",
        "download-pex-bin",
        "grpc-python-plugin",
        "mypy-protobuf",
        "pex",
        "pex-binary-defaults",
        "protoc",
        "python-infer",
        "python-native-code",
        "python-protobuf",
        "python-repos",
        "python-setup",
        "run",
        "shell-setup",
        "shellcheck",
        "source",
        "subprocess-environment"
      ],
      "description": "Runs a binary target.\n\nThis goal propagates the return code of the underlying executable. Run `echo $?` to inspect the resulting return code.",
      "is_implemented": true,
      "name": "run"
    },
    "tailor": {
      "consumed_scopes": ["", "python-setup", "source", "tailor"],
      "description": "Auto-generate BUILD file targets for new source files.",
      "is_implemented": true,
      "name": "tailor"
    },
    "test": {
      "consumed_scopes": [
        "",
        "coverage-py",
        "download-pex-bin",
        "grpc-python-plugin",
        "lambdex",
        "mypy-protobuf",
        "pex",
        "pex-binary-defaults",
        "protoc",
        "pytest",
        "python-infer",
        "python-native-code",
        "python-protobuf",
        "python-repos",
        "python-setup",
        "setup-py-generation",
        "setuptools",
        "shell-setup",
        "shellcheck",
        "source",
        "subprocess-environment",
        "test"
      ],
      "description": "Run tests.",
      "is_implemented": true,
      "name": "test"
    },
    "typecheck": {
      "consumed_scopes": [
        "",
        "download-pex-bin",
        "grpc-python-plugin",
        "mypy",
        "mypy-protobuf",
        "pex",
        "protoc",
        "python-infer",
        "python-native-code",
        "python-protobuf",
        "python-repos",
        "python-setup",
        "shell-setup",
        "shellcheck",
        "source",
        "subprocess-environment"
      ],
      "description": "Run type checkers.",
      "is_implemented": true,
      "name": "typecheck"
    },
    "validate": {
      "consumed_scopes": [
        "",
        "download-pex-bin",
        "grpc-python-plugin",
        "mypy-protobuf",
        "pex",
        "protoc",
        "python-infer",
        "python-native-code",
        "python-protobuf",
        "python-repos",
        "python-setup",
        "shell-setup",
        "shellcheck",
        "source",
        "sourcefile-validation",
        "subprocess-environment",
        "validate"
      ],
      "description": "Validate sources against regexes.",
      "is_implemented": true,
      "name": "validate"
    }
  },
  "name_to_target_type_info": {
    "archive": {
      "alias": "archive",
      "description": "A ZIP or TAR file containing loose files and code packages.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `./pants --tag='integration_test' test ::` to only run on targets with that tag.",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `./pants list --documented ::` to see all targets with descriptions.",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "output_path",
          "default": null,
          "description": "Where the built asset should be located.\n\nIf undefined, this will use the path to the BUILD file, followed by the target name. For example, `src/python/project:app` would be `src.python.project/app.ext.\n\nWhen running `./pants package`, this path will be prefixed by `--distdir` (e.g. `dist/`).\n\nWarning: setting this value risks naming collisions with other package targets you may have.",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "packages",
          "default": null,
          "description": "Addresses to any targets that can be built with `./pants package`, e.g. `[\"project:app\"]`.\n\nPants will build the assets as if you had run `./pants package`. It will include the results in your archive using the same name they would normally have, but without the `--distdir` prefix (e.g. `dist/`).\n\nYou can include anything that can be built by `./pants package`, e.g. a `pex_binary`, `python_awslambda`, or even another `archive`.",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "files",
          "default": null,
          "description": "Addresses to any `files` or `relocated_files` targets to include in the archive, e.g. `[\"resources:logo\"]`.\n\nThis is useful to include any loose files, like data files, image assets, or config files.\n\nThis will ignore any targets that are not `files` or `relocated_files` targets. If you instead want those files included in any packages specified in the `packages` field for this target, then use a `resources` target and have the original package depend on the resources.",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "format",
          "default": null,
          "description": "The type of archive file to be generated.",
          "required": true,
          "type_hint": "'tar' | 'tar.bz2' | 'tar.gz' | 'tar.xz' | 'zip'"
        }
      ],
      "summary": "A ZIP or TAR file containing loose files and code packages."
    },
    "docker_image": {
      "alias": "docker_image",
      "description": "A Docker image.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `./pants --tag='integration_test' test ::` to only run on targets with that tag.",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `./pants list --documented ::` to see all targets with descriptions.",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib'].\n\nAlternatively, you may include file names. Pants will find which target owns that file, and create a new target from that which only includes the file in its `sources` field. For files relative to the current BUILD file, prefix with `./`; otherwise, put the full path, e.g. ['./sibling.txt', 'resources/demo.json'].\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "sources",
          "default": "('Dockerfile',)",
          "description": "The Dockerfile to use when building the Docker image.",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "version",
          "default": "'latest'",
          "description": "Image tag to apply to built images.",
          "required": false,
          "type_hint": "str | None"
        }
      ],
      "summary": "A Docker image."
    },
    "files": {
      "alias": "files",
      "description": "Loose files that live outside code packages.\n\nFiles are placed directly in archives, outside of code artifacts such as Python wheels or JVM JARs. The sources of a `files` target are accessed via filesystem APIs, such as Python's `open()`, via paths relative to the repo root.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `./pants --tag='integration_test' test ::` to only run on targets with that tag.",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `./pants list --documented ::` to see all targets with descriptions.",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib'].\n\nAlternatively, you may include file names. Pants will find which target owns that file, and create a new target from that which only includes the file in its `sources` field. For files relative to the current BUILD file, prefix with `./`; otherwise, put the full path, e.g. ['./sibling.txt', 'resources/demo.json'].\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "sources",
          "default": null,
          "description": "A list of files and globs that belong to this target.\n\nPaths are relative to the BUILD file's directory. You can ignore files/globs by prefixing them with `!`.\n\nExample: `sources=['example.py', 'test_*.py', '!test_ignore.py']`.",
          "required": true,
          "type_hint": "Iterable[str]"
        }
      ],
      "summary": "Loose files that live outside code packages."
    },
    "pex_binary": {
      "alias": "pex_binary",
      "description": "A Python target that can be converted into an executable PEX file.\n\nPEX files are self-contained executable files that contain a complete Python environment capable of running the target. For more information, see https://www.pantsbuild.org/v2.7/docs/pex-files.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `./pants --tag='integration_test' test ::` to only run on targets with that tag.",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `./pants list --documented ::` to see all targets with descriptions.",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "output_path",
          "default": null,
          "description": "Where the built asset should be located.\n\nIf undefined, this will use the path to the BUILD file, followed by the target name. For example, `src/python/project:app` would be `src.python.project/app.ext.\n\nWhen running `./pants package`, this path will be prefixed by `--distdir` (e.g. `dist/`).\n\nWarning: setting this value risks naming collisions with other package targets you may have.",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "interpreter_constraints",
          "default": null,
          "description": "The Python interpreters this code is compatible with.\n\nEach element should be written in pip-style format, e.g. `CPython==2.7.*` or `CPython>=3.6,<4`. You can leave off `CPython` as a shorthand, e.g. `>=2.7` will be expanded to `CPython>=2.7`.\n\nSpecify more than one element to OR the constraints, e.g. `['PyPy==3.7.*', 'CPython==3.7.*']` means either PyPy 3.7 _or_ CPython 3.7.\n\nIf the field is not set, it will default to the option `[python-setup].interpreter_constraints`.\n\nSee https://www.pantsbuild.org/v2.7/docs/python-interpreter-compatibility for how these interpreter constraints are merged with the constraints of dependencies.",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib'].\n\nAlternatively, you may include file names. Pants will find which target owns that file, and create a new target from that which only includes the file in its `sources` field. For files relative to the current BUILD file, prefix with `./`; otherwise, put the full path, e.g. ['./sibling.txt', 'resources/demo.json'].\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "entry_point",
          "default": null,
          "description": "The entry point for the binary, i.e. what gets run when executing `./my_binary.pex`.\n\nYou can specify a full module like 'path.to.module' and 'path.to.module:func', or use a shorthand to specify a file name, using the same syntax as the `sources` field:\n\n  1) 'app.py', Pants will convert into the module `path.to.app`;\n  2) 'app.py:func', Pants will convert into `path.to.app:func`.\n\nYou must use the file name shorthand for file arguments to work with this target.\n\nTo leave off an entry point, set to '<none>'.",
          "required": true,
          "type_hint": "str"
        },
        {
          "alias": "platforms",
          "default": null,
          "description": "The platforms the built PEX should be compatible with.\n\nThis defaults to the current platform, but can be overridden to different platforms. There must be built wheels available for all of the foreign platforms, rather than sdists.\n\nYou can give a list of multiple platforms to create a multiplatform PEX, meaning that the PEX will be executable in all of the supported environments.\n\nPlatforms should be in the format defined by Pex (https://pex.readthedocs.io/en/latest/buildingpex.html#platform), i.e. PLATFORM-IMPL-PYVER-ABI (e.g. \"linux_x86_64-cp-27-cp27mu\", \"macosx_10.12_x86_64-cp-36-cp36m\"):\n\n  - PLATFORM: the host platform, e.g. \"linux-x86_64\", \"macosx-10.12-x86_64\".\n  - IMPL: the Python implementation abbreviation, e.g. \"cp\", \"pp\", \"jp\".\n  - PYVER: a two-digit string representing the Python version, e.g. \"27\", \"36\".\n  - ABI: the ABI tag, e.g. \"cp36m\", \"cp27mu\", \"abi3\", \"none\".",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "inherit_path",
          "default": null,
          "description": "Whether to inherit the `sys.path` (aka PYTHONPATH) of the environment that the binary runs in.\n\nUse `false` to not inherit `sys.path`; use `fallback` to inherit `sys.path` after packaged dependencies; and use `prefer` to inherit `sys.path` before packaged dependencies.",
          "required": false,
          "type_hint": "'fallback' | 'false' | 'prefer' | None"
        },
        {
          "alias": "strip_pex_env",
          "default": "True",
          "description": "Whether or not to strip the PEX runtime environment of `PEX*` environment variables.\n\nMost applications have no need for the `PEX*` environment variables that are used to control PEX startup; so these variables are scrubbed from the environment by Pex before transferring control to the application by default. This prevents any subprocesses that happen to execute other PEX files from inheriting these control knob values since most would be undesired; e.g.: PEX_MODULE or PEX_PATH.",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "ignore_errors",
          "default": "False",
          "description": "Should PEX ignore when it cannot resolve dependencies?",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "shebang",
          "default": null,
          "description": "Set the generated PEX to use this shebang, rather than the default of PEX choosing a shebang based on the interpreter constraints.\n\nThis influences the behavior of running `./result.pex`. You can ignore the shebang by instead running `/path/to/python_interpreter ./result.pex`.",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "emit_warnings",
          "default": null,
          "description": "Whether or not to emit PEX warnings at runtime.\n\nThe default is determined by the option `emit_warnings` in the `[pex-binary-defaults]` scope.",
          "required": false,
          "type_hint": "bool | None"
        },
        {
          "alias": "execution_mode",
          "default": "'zipapp'",
          "description": "The mode the generated PEX file will run in.\n\nThe traditional PEX file runs in a modified 'zipapp' mode (See: https://www.python.org/dev/peps/pep-0441/) where zipped internal code and dependencies are first unpacked to disk. This mode achieves the fastest cold start times and may, for example be the best choice for cloud lambda functions.\n\nThe fastest execution mode in the steady state is 'venv', which generates a virtual environment from the PEX file on first run, but then achieves near native virtual environment start times. This mode also benefits from a traditional virtual environment `sys.path`, giving maximum compatibility with stdlib and third party APIs.\n\nThe 'unzip' mode is deprecated since the default 'zipapp' mode now executes this way.",
          "required": false,
          "type_hint": "'unzip' | 'venv' | 'zipapp' | None"
        },
        {
          "alias": "include_tools",
          "default": "False",
          "description": "Whether to include Pex tools in the PEX bootstrap code.\n\nWith tools included, the generated PEX file can be executed with `PEX_TOOLS=1 <pex file> --help` to gain access to all the available tools.",
          "required": false,
          "type_hint": "bool"
        }
      ],
      "summary": "A Python target that can be converted into an executable PEX file."
    },
    "protobuf_library": {
      "alias": "protobuf_library",
      "description": "Protobuf files used to generate various languages.\n\nSee fhttps://www.pantsbuild.org/v2.7/docs/protobuf.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `./pants --tag='integration_test' test ::` to only run on targets with that tag.",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `./pants list --documented ::` to see all targets with descriptions.",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib'].\n\nAlternatively, you may include file names. Pants will find which target owns that file, and create a new target from that which only includes the file in its `sources` field. For files relative to the current BUILD file, prefix with `./`; otherwise, put the full path, e.g. ['./sibling.txt', 'resources/demo.json'].\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "sources",
          "default": "('*.proto',)",
          "description": "A list of files and globs that belong to this target.\n\nPaths are relative to the BUILD file's directory. You can ignore files/globs by prefixing them with `!`.\n\nExample: `sources=['example.py', 'test_*.py', '!test_ignore.py']`.",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "grpc",
          "default": "False",
          "description": "Whether to generate gRPC code or not.",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "python_interpreter_constraints",
          "default": null,
          "description": "The Python interpreters this code is compatible with.\n\nEach element should be written in pip-style format, e.g. `CPython==2.7.*` or `CPython>=3.6,<4`. You can leave off `CPython` as a shorthand, e.g. `>=2.7` will be expanded to `CPython>=2.7`.\n\nSpecify more than one element to OR the constraints, e.g. `['PyPy==3.7.*', 'CPython==3.7.*']` means either PyPy 3.7 _or_ CPython 3.7.\n\nIf the field is not set, it will default to the option `[python-setup].interpreter_constraints`.\n\nSee https://www.pantsbuild.org/v2.7/docs/python-interpreter-compatibility for how these interpreter constraints are merged with the constraints of dependencies.",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "python_source_root",
          "default": null,
          "description": "The source root to generate Python sources under.\n\nIf unspecified, the source root the protobuf_library is under will be used.",
          "required": false,
          "type_hint": "str | None"
        }
      ],
      "summary": "Protobuf files used to generate various languages."
    },
    "python_awslambda": {
      "alias": "python_awslambda",
      "description": "A self-contained Python function suitable for uploading to AWS Lambda.\n\nSee https://www.pantsbuild.org/v2.7/docs/awslambda-python.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `./pants --tag='integration_test' test ::` to only run on targets with that tag.",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `./pants list --documented ::` to see all targets with descriptions.",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "output_path",
          "default": null,
          "description": "Where the built asset should be located.\n\nIf undefined, this will use the path to the BUILD file, followed by the target name. For example, `src/python/project:app` would be `src.python.project/app.ext.\n\nWhen running `./pants package`, this path will be prefixed by `--distdir` (e.g. `dist/`).\n\nWarning: setting this value risks naming collisions with other package targets you may have.",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib'].\n\nAlternatively, you may include file names. Pants will find which target owns that file, and create a new target from that which only includes the file in its `sources` field. For files relative to the current BUILD file, prefix with `./`; otherwise, put the full path, e.g. ['./sibling.txt', 'resources/demo.json'].\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "handler",
          "default": null,
          "description": "Entry point to the AWS Lambda handler.\n\nYou can specify a full module like 'path.to.module:handler_func' or use a shorthand to specify a file name, using the same syntax as the `sources` field, e.g. 'lambda.py:handler_func'.\n\nYou must use the file name shorthand for file arguments to work with this target.",
          "required": true,
          "type_hint": "str"
        },
        {
          "alias": "runtime",
          "default": null,
          "description": "The identifier of the AWS Lambda runtime to target (pythonX.Y). See https://docs.aws.amazon.com/lambda/latest/dg/lambda-python.html.",
          "required": true,
          "type_hint": "str"
        }
      ],
      "summary": "A self-contained Python function suitable for uploading to AWS Lambda."
    },
    "python_distribution": {
      "alias": "python_distribution",
      "description": "A publishable Python setuptools distribution (e.g. an sdist or wheel).\n\nSee https://www.pantsbuild.org/v2.7/docs/python-distributions.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `./pants --tag='integration_test' test ::` to only run on targets with that tag.",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `./pants list --documented ::` to see all targets with descriptions.",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib'].\n\nAlternatively, you may include file names. Pants will find which target owns that file, and create a new target from that which only includes the file in its `sources` field. For files relative to the current BUILD file, prefix with `./`; otherwise, put the full path, e.g. ['./sibling.txt', 'resources/demo.json'].\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "entry_points",
          "default": null,
          "description": "Any entry points, such as `console_scripts` and `gui_scripts`.\n\nSpecify as a nested dictionary, with a dictionary for each type of entry point, e.g. `console_scripts` vs. `gui_scripts`. Each dictionary maps the entry point name to either a setuptools entry point (\"path.to.module:func\") or a Pants target address to a pex_binary target.\n\nExample:\n\n    entry_points={\n      \"console_scripts\": {\n        \"my-script\": \"project.app:main\",\n        \"another-script\": \"project/subdir:pex_binary_tgt\"\n      }\n    }\n\nNote that Pants will assume that any value that either starts with `:` or has `/` in it, is a target address to a pex_binary target. Otherwise, it will assume it's a setuptools entry point as defined by https://packaging.python.org/specifications/entry-points/#entry-points-specification. Use `//` as a prefix for target addresses if you need to disambiguate.\n\nPants will attempt to infer dependencies, which you can confirm by running:\n\n    ./pants dependencies <python_distribution target address>\n\n",
          "required": false,
          "type_hint": "Dict[str, Dict[str, str]] | None"
        },
        {
          "alias": "provides",
          "default": null,
          "description": "The setup.py kwargs for the external artifact built from this target.\n\nYou must define `name`. You can also set almost any keyword argument accepted by setup.py in the `setup()` function: (https://packaging.python.org/guides/distributing-packages-using-setuptools/#setup-args).\n\nSee https://www.pantsbuild.org/v2.7/docs/plugins-setup-py for how to write a plugin to dynamically generate kwargs.",
          "required": true,
          "type_hint": "PythonArtifact"
        },
        {
          "alias": "setup_py_commands",
          "default": null,
          "description": "The runtime commands to invoke setup.py with to create the distribution, e.g. [\"bdist_wheel\", \"--python-tag=py36.py37\", \"sdist\"].\n\nIf empty or unspecified, will just create a chroot with a setup() function.",
          "required": false,
          "type_hint": "Iterable[str] | None"
        }
      ],
      "summary": "A publishable Python setuptools distribution (e.g. an sdist or wheel)."
    },
    "python_library": {
      "alias": "python_library",
      "description": "Python source code.\n\nA `python_library` does not necessarily correspond to a distribution you publish (see `python_distribution` and `pex_binary` for that); multiple `python_library` targets may be packaged into a distribution or binary.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `./pants --tag='integration_test' test ::` to only run on targets with that tag.",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `./pants list --documented ::` to see all targets with descriptions.",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "interpreter_constraints",
          "default": null,
          "description": "The Python interpreters this code is compatible with.\n\nEach element should be written in pip-style format, e.g. `CPython==2.7.*` or `CPython>=3.6,<4`. You can leave off `CPython` as a shorthand, e.g. `>=2.7` will be expanded to `CPython>=2.7`.\n\nSpecify more than one element to OR the constraints, e.g. `['PyPy==3.7.*', 'CPython==3.7.*']` means either PyPy 3.7 _or_ CPython 3.7.\n\nIf the field is not set, it will default to the option `[python-setup].interpreter_constraints`.\n\nSee https://www.pantsbuild.org/v2.7/docs/python-interpreter-compatibility for how these interpreter constraints are merged with the constraints of dependencies.",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib'].\n\nAlternatively, you may include file names. Pants will find which target owns that file, and create a new target from that which only includes the file in its `sources` field. For files relative to the current BUILD file, prefix with `./`; otherwise, put the full path, e.g. ['./sibling.txt', 'resources/demo.json'].\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "sources",
          "default": "('*.py', '*.pyi', '!test_*.py', '!*_test.py', '!tests.py', '!conftest.py', '!test_*.pyi', '!*_test.pyi', '!tests.pyi')",
          "description": "A list of files and globs that belong to this target.\n\nPaths are relative to the BUILD file's directory. You can ignore files/globs by prefixing them with `!`.\n\nExample: `sources=['example.py', 'test_*.py', '!test_ignore.py']`.",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "skip_black",
          "default": "False",
          "description": "If true, don't run Black on this target's code.",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_docformatter",
          "default": "False",
          "description": "If true, don't run Docformatter on this target's code.",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_flake8",
          "default": "False",
          "description": "If true, don't run Flake8 on this target's code.",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_isort",
          "default": "False",
          "description": "If true, don't run isort on this target's code.",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_mypy",
          "default": "False",
          "description": "If true, don't run MyPy on this target's code.",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_bandit",
          "default": "False",
          "description": "If true, don't run Bandit on this target's code.",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_pylint",
          "default": "False",
          "description": "If true, don't run Pylint on this target's code.",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_yapf",
          "default": "False",
          "description": "If true, don't run yapf on this target's code.",
          "required": false,
          "type_hint": "bool"
        }
      ],
      "summary": "Python source code."
    },
    "python_requirement_library": {
      "alias": "python_requirement_library",
      "description": "Python requirements installable by pip.\n\nThis target is useful when you want to declare Python requirements inline in a BUILD file. If you have a `requirements.txt` file already, you can instead use the macro `python_requirements()` to convert each requirement into a `python_requirement_library()` target automatically.\n\nSee https://www.pantsbuild.org/v2.7/docs/python-third-party-dependencies.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `./pants --tag='integration_test' test ::` to only run on targets with that tag.",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `./pants list --documented ::` to see all targets with descriptions.",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib'].\n\nAlternatively, you may include file names. Pants will find which target owns that file, and create a new target from that which only includes the file in its `sources` field. For files relative to the current BUILD file, prefix with `./`; otherwise, put the full path, e.g. ['./sibling.txt', 'resources/demo.json'].\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "requirements",
          "default": null,
          "description": "A sequence of pip-style requirement strings, e.g. `['foo==1.8', \"bar<=3 ; python_version<'3'\"]`.",
          "required": true,
          "type_hint": "Iterable[str]"
        },
        {
          "alias": "module_mapping",
          "default": "FrozenDict({})",
          "description": "A mapping of requirement names to a list of the modules they provide.\n\nFor example, `{\"ansicolors\": [\"colors\"]}`.\n\nAny unspecified requirements will use the requirement name as the default module, e.g. \"Django\" will default to `[\"django\"]`.\n\nThis is used to infer dependencies.",
          "required": false,
          "type_hint": "Dict[str, Iterable[str]]"
        },
        {
          "alias": "type_stubs_module_mapping",
          "default": "FrozenDict({})",
          "description": "A mapping of type-stub requirement names to a list of the modules they provide.\n\nFor example, `{\"types-requests\": [\"requests\"]}`.\n\nIf the requirement is not specified _and_ it starts with `types-` or `stubs-`, or ends with `-types` or `-stubs`, the requirement will be treated as a type stub for the corresponding module, e.g. \"types-request\" has the module \"requests\". Otherwise, the requirement is treated like a normal dependency (see the field module_mapping).\n\nThis is used to infer dependencies for type stubs.",
          "required": false,
          "type_hint": "Dict[str, Iterable[str]]"
        }
      ],
      "summary": "Python requirements installable by pip."
    },
    "python_tests": {
      "alias": "python_tests",
      "description": "Python tests, written in either Pytest style or unittest style.\n\nAll test util code, other than `conftest.py`, should go into a dedicated `python_library()` target and then be included in the `dependencies` field.\n\nSee https://www.pantsbuild.org/v2.7/docs/python-test-goal.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `./pants --tag='integration_test' test ::` to only run on targets with that tag.",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `./pants list --documented ::` to see all targets with descriptions.",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "interpreter_constraints",
          "default": null,
          "description": "The Python interpreters this code is compatible with.\n\nEach element should be written in pip-style format, e.g. `CPython==2.7.*` or `CPython>=3.6,<4`. You can leave off `CPython` as a shorthand, e.g. `>=2.7` will be expanded to `CPython>=2.7`.\n\nSpecify more than one element to OR the constraints, e.g. `['PyPy==3.7.*', 'CPython==3.7.*']` means either PyPy 3.7 _or_ CPython 3.7.\n\nIf the field is not set, it will default to the option `[python-setup].interpreter_constraints`.\n\nSee https://www.pantsbuild.org/v2.7/docs/python-interpreter-compatibility for how these interpreter constraints are merged with the constraints of dependencies.",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "sources",
          "default": "('test_*.py', '*_test.py', 'tests.py', 'conftest.py', 'test_*.pyi', '*_test.pyi', 'tests.pyi')",
          "description": "A list of files and globs that belong to this target.\n\nPaths are relative to the BUILD file's directory. You can ignore files/globs by prefixing them with `!`.\n\nExample: `sources=['example.py', 'test_*.py', '!test_ignore.py']`.",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib'].\n\nAlternatively, you may include file names. Pants will find which target owns that file, and create a new target from that which only includes the file in its `sources` field. For files relative to the current BUILD file, prefix with `./`; otherwise, put the full path, e.g. ['./sibling.txt', 'resources/demo.json'].\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "timeout",
          "default": null,
          "description": "A timeout (in seconds) used by each test file belonging to this target.\n\nThis only applies if the option `--pytest-timeouts` is set to True.",
          "required": false,
          "type_hint": "int | None"
        },
        {
          "alias": "runtime_package_dependencies",
          "default": null,
          "description": "Addresses to targets that can be built with the `./pants package` goal and whose resulting artifacts should be included in the test run.\n\nPants will build the artifacts as if you had run `./pants package`. It will include the results in your test's chroot, using the same name they would normally have, but without the `--distdir` prefix (e.g. `dist/`).\n\nYou can include anything that can be built by `./pants package`, e.g. a `pex_binary`, `python_awslambda`, or an `archive`.",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "extra_env_vars",
          "default": null,
          "description": "Additional environment variables to include in test processes. Entries are strings in the form `ENV_VAR=value` to use explicitly; or just `ENV_VAR` to copy the value of a variable in Pants's own environment. This will be merged with and override values from [test].extra_env_vars.",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "skip_tests",
          "default": "False",
          "description": "If true, don't run this target's tests.",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_black",
          "default": "False",
          "description": "If true, don't run Black on this target's code.",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_docformatter",
          "default": "False",
          "description": "If true, don't run Docformatter on this target's code.",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_flake8",
          "default": "False",
          "description": "If true, don't run Flake8 on this target's code.",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_isort",
          "default": "False",
          "description": "If true, don't run isort on this target's code.",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_mypy",
          "default": "False",
          "description": "If true, don't run MyPy on this target's code.",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_bandit",
          "default": "False",
          "description": "If true, don't run Bandit on this target's code.",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_pylint",
          "default": "False",
          "description": "If true, don't run Pylint on this target's code.",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_yapf",
          "default": "False",
          "description": "If true, don't run yapf on this target's code.",
          "required": false,
          "type_hint": "bool"
        }
      ],
      "summary": "Python tests, written in either Pytest style or unittest style."
    },
    "relocated_files": {
      "alias": "relocated_files",
      "description": "Loose files with path manipulation applied.\n\nAllows you to relocate the files at runtime to something more convenient than their actual paths in your project.\n\nFor example, you can relocate `src/resources/project1/data.json` to instead be `resources/data.json`. Your other target types can then add this target to their `dependencies` field, rather than using the original `files` target.\n\nTo remove a prefix:\n\n    # Results in `data.json`.\n    relocated_files(\n        file_targets=[\"src/resources/project1:target\"],\n        src=\"src/resources/project1\",\n        dest=\"\",\n    )\n\nTo add a prefix:\n\n    # Results in `images/logo.svg`.\n    relocated_files(\n        file_targets=[\"//:logo\"],\n        src=\"\",\n        dest=\"images\",\n    )\n\nTo replace a prefix:\n\n    # Results in `new_prefix/project1/data.json`.\n    relocated_files(\n        file_targets=[\"src/resources/project1:target\"],\n        src=\"src/resources\",\n        dest=\"new_prefix\",\n    )\n",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `./pants --tag='integration_test' test ::` to only run on targets with that tag.",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `./pants list --documented ::` to see all targets with descriptions.",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "files_targets",
          "default": null,
          "description": "Addresses to the original `files()` targets that you want to relocate, such as `['//:json_files']`.\n\nEvery target will be relocated using the same mapping. This means that every target must include the value from the `src` field in their original path.",
          "required": true,
          "type_hint": "Iterable[str]"
        },
        {
          "alias": "src",
          "default": null,
          "description": "The original prefix that you want to replace, such as `src/resources`.\n\nYou can set this field to the empty string to preserve the original path; the value in the `dest` field will then be added to the beginning of this original path.",
          "required": true,
          "type_hint": "str"
        },
        {
          "alias": "dest",
          "default": null,
          "description": "The new prefix that you want to add to the beginning of the path, such as `data`.\n\nYou can set this field to the empty string to avoid adding any new values to the path; the value in the `src` field will then be stripped, rather than replaced.",
          "required": true,
          "type_hint": "str"
        }
      ],
      "summary": "Loose files with path manipulation applied."
    },
    "resources": {
      "alias": "resources",
      "description": "Data embedded in a code package and accessed in a location-independent manner.\n\nResources are embedded in code artifacts such as Python wheels or JVM JARs. The sources of a `resources` target are accessed via language-specific resource APIs, such as Python's pkgutil or JVM's ClassLoader, via paths relative to the target's source root.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `./pants --tag='integration_test' test ::` to only run on targets with that tag.",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `./pants list --documented ::` to see all targets with descriptions.",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib'].\n\nAlternatively, you may include file names. Pants will find which target owns that file, and create a new target from that which only includes the file in its `sources` field. For files relative to the current BUILD file, prefix with `./`; otherwise, put the full path, e.g. ['./sibling.txt', 'resources/demo.json'].\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "sources",
          "default": null,
          "description": "A list of files and globs that belong to this target.\n\nPaths are relative to the BUILD file's directory. You can ignore files/globs by prefixing them with `!`.\n\nExample: `sources=['example.py', 'test_*.py', '!test_ignore.py']`.",
          "required": true,
          "type_hint": "Iterable[str]"
        }
      ],
      "summary": "Data embedded in a code package and accessed in a location-independent manner."
    },
    "shell_library": {
      "alias": "shell_library",
      "description": "Bourne-based shell scripts, e.g. Bash scripts.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `./pants --tag='integration_test' test ::` to only run on targets with that tag.",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `./pants list --documented ::` to see all targets with descriptions.",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib'].\n\nAlternatively, you may include file names. Pants will find which target owns that file, and create a new target from that which only includes the file in its `sources` field. For files relative to the current BUILD file, prefix with `./`; otherwise, put the full path, e.g. ['./sibling.txt', 'resources/demo.json'].\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "sources",
          "default": "('*.sh', '!*_test.sh', '!test_*.sh', '!tests.sh')",
          "description": "A list of files and globs that belong to this target.\n\nPaths are relative to the BUILD file's directory. You can ignore files/globs by prefixing them with `!`.\n\nExample: `sources=['example.py', 'test_*.py', '!test_ignore.py']`.",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "skip_shellcheck",
          "default": "False",
          "description": "If true, don't run Shellcheck on this target's code.",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_shfmt",
          "default": "False",
          "description": "If true, don't run shfmt on this target's code.",
          "required": false,
          "type_hint": "bool"
        }
      ],
      "summary": "Bourne-based shell scripts, e.g. Bash scripts."
    },
    "shunit2_tests": {
      "alias": "shunit2_tests",
      "description": "Tests of Bourne-based shell scripts using the shUnit2 test framework.\n\nTo use, add tests to your file per https://github.com/kward/shunit2/. Specify the shell to run with by either setting the field `shell` or including a shebang. To test the same file with multiple shells, create multiple `shunit2_tests` targets, one for each shell.\n\nPants will automatically download the `shunit2` bash script and add `source ./shunit2` to your test for you. If you already have `source ./shunit2`, Pants will overwrite it to use the correct relative path.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `./pants --tag='integration_test' test ::` to only run on targets with that tag.",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `./pants list --documented ::` to see all targets with descriptions.",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib'].\n\nAlternatively, you may include file names. Pants will find which target owns that file, and create a new target from that which only includes the file in its `sources` field. For files relative to the current BUILD file, prefix with `./`; otherwise, put the full path, e.g. ['./sibling.txt', 'resources/demo.json'].\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "sources",
          "default": "('*_test.sh', 'test_*.sh', 'tests.sh')",
          "description": "A list of files and globs that belong to this target.\n\nPaths are relative to the BUILD file's directory. You can ignore files/globs by prefixing them with `!`.\n\nExample: `sources=['example.py', 'test_*.py', '!test_ignore.py']`.",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "timeout",
          "default": null,
          "description": "A timeout (in seconds) used by each test file belonging to this target. If unset, the test will never time out.",
          "required": false,
          "type_hint": "int | None"
        },
        {
          "alias": "shell",
          "default": null,
          "description": "Which shell to run the tests with. If unspecified, Pants will look for a shebang line.",
          "required": false,
          "type_hint": "'bash' | 'dash' | 'ksh' | 'pdksh' | 'sh' | 'zsh' | None"
        },
        {
          "alias": "runtime_package_dependencies",
          "default": null,
          "description": "Addresses to targets that can be built with the `./pants package` goal and whose resulting artifacts should be included in the test run.\n\nPants will build the artifacts as if you had run `./pants package`. It will include the results in your test's chroot, using the same name they would normally have, but without the `--distdir` prefix (e.g. `dist/`).\n\nYou can include anything that can be built by `./pants package`, e.g. a `pex_binary`, `python_awslambda`, or an `archive`.",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "skip_shellcheck",
          "default": "False",
          "description": "If true, don't run Shellcheck on this target's code.",
          "required": false,
          "type_hint": "bool"
        },
        {
          "alias": "skip_shfmt",
          "default": "False",
          "description": "If true, don't run shfmt on this target's code.",
          "required": false,
          "type_hint": "bool"
        }
      ],
      "summary": "Tests of Bourne-based shell scripts using the shUnit2 test framework."
    },
    "target": {
      "alias": "target",
      "description": "A generic target with no specific type.\n\nThis can be used as a generic \"bag of dependencies\", i.e. you can group several different targets into one single target so that your other targets only need to depend on one thing.",
      "fields": [
        {
          "alias": "tags",
          "default": null,
          "description": "Arbitrary strings to describe a target.\n\nFor example, you may tag some test targets with 'integration_test' so that you could run `./pants --tag='integration_test' test ::` to only run on targets with that tag.",
          "required": false,
          "type_hint": "Iterable[str] | None"
        },
        {
          "alias": "description",
          "default": null,
          "description": "A human-readable description of the target.\n\nUse `./pants list --documented ::` to see all targets with descriptions.",
          "required": false,
          "type_hint": "str | None"
        },
        {
          "alias": "dependencies",
          "default": null,
          "description": "Addresses to other targets that this target depends on, e.g. ['helloworld/subdir:lib'].\n\nAlternatively, you may include file names. Pants will find which target owns that file, and create a new target from that which only includes the file in its `sources` field. For files relative to the current BUILD file, prefix with `./`; otherwise, put the full path, e.g. ['./sibling.txt', 'resources/demo.json'].\n\nYou may exclude dependencies by prefixing with `!`, e.g. `['!helloworld/subdir:lib', '!./sibling.txt']`. Ignores are intended for false positives with dependency inference; otherwise, simply leave off the dependency from the BUILD file.",
          "required": false,
          "type_hint": "Iterable[str] | None"
        }
      ],
      "summary": "A generic target with no specific type."
    }
  },
  "scope_to_help_info": {
    "": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--backend-packages=\"['<str>', '<str>', ...]\"",
          "config_key": "backend_packages",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--backend-packages=\"['<str>', '<str>', ...]\""],
          "env_var": "PANTS_BACKEND_PACKAGES",
          "help": "Register functionality from these backends.\n\nThe backend packages must be present on the PYTHONPATH, typically because they are in the Pants core dist, in a plugin dist, or available as sources in the repo.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--backend-packages"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--backend-packages"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              },
              {
                "details": "from env var PANTS_BACKEND_PACKAGES",
                "rank": "ENVIRONMENT",
                "value": []
              },
              {
                "details": "from command-line flag",
                "rank": "FLAG",
                "value": [
                  "pants.backend.python",
                  "pants.backend.python.lint.black",
                  "pants.backend.python.lint.docformatter",
                  "pants.backend.python.lint.flake8",
                  "pants.backend.python.lint.isort",
                  "pants.backend.python.typecheck.mypy",
                  "pants.backend.python.mixed_interpreter_constraints",
                  "pants.backend.shell",
                  "pants.backend.shell.lint.shellcheck",
                  "pants.backend.shell.lint.shfmt",
                  "pants.backend.experimental.python",
                  "pants.backend.experimental.docker",
                  "pants.backend.codegen.protobuf.python",
                  "pants.backend.awslambda.python",
                  "pants.backend.python.lint.bandit",
                  "pants.backend.python.lint.pylint",
                  "pants.backend.python.lint.yapf"
                ]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--plugins=\"['<str>', '<str>', ...]\"",
          "config_key": "plugins",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--plugins=\"['<str>', '<str>', ...]\""],
          "env_var": "PANTS_PLUGINS",
          "help": "Allow backends to be loaded from these plugins (usually released through PyPI). The default backends for each plugin will be loaded automatically. Other backends in a plugin can be loaded by listing them in `backend_packages` in the `[GLOBAL]` scope.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--plugins"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--plugins"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]plugins-force-resolve",
          "config_key": "plugins_force_resolve",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]plugins-force-resolve"],
          "env_var": "PANTS_PLUGINS_FORCE_RESOLVE",
          "help": "Re-resolve plugins, even if previously resolved.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--plugins-force-resolve",
            "--no-plugins-force-resolve"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--plugins-force-resolve",
            "--no-plugins-force-resolve"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]show-log-target",
          "config_key": "show_log_target",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]show-log-target"],
          "env_var": "PANTS_SHOW_LOG_TARGET",
          "help": "Display the target where a log message originates in that log message's output. This can be helpful when paired with --log-levels-by-target.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--show-log-target", "--no-show-log-target"],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--show-log-target",
            "--no-show-log-target"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--log-levels-by-target=\"{'key1': val1, 'key2': val2, ...}\"",
          "config_key": "log_levels_by_target",
          "default": {},
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--log-levels-by-target=\"{'key1': val1, 'key2': val2, ...}\""
          ],
          "env_var": "PANTS_LOG_LEVELS_BY_TARGET",
          "help": "Set a more specific logging level for one or more logging targets. The names of logging targets are specified in log strings when the --show-log-target option is set. The logging levels are one of: \"error\", \"warn\", \"info\", \"debug\", \"trace\". All logging targets not specified here use the global log level set with --level. For example, you can set `--log-levels-by-target='{\"workunit_store\": \"info\", \"pants.engine.rules\": \"warn\"}'`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--log-levels-by-target"],
          "typ": "dict",
          "unscoped_cmd_line_args": ["--log-levels-by-target"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": {}
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": {}
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]log-show-rust-3rdparty",
          "config_key": "log_show_rust_3rdparty",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]log-show-rust-3rdparty"],
          "env_var": "PANTS_LOG_SHOW_RUST_3RDPARTY",
          "help": "Whether to show/hide logging done by 3rdparty Rust crates used by the Pants engine.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--log-show-rust-3rdparty",
            "--no-log-show-rust-3rdparty"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--log-show-rust-3rdparty",
            "--no-log-show-rust-3rdparty"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--ignore-warnings=\"['<str>', '<str>', ...]\"",
          "config_key": "ignore_warnings",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--ignore-warnings=\"['<str>', '<str>', ...]\""],
          "env_var": "PANTS_IGNORE_WARNINGS",
          "help": "Ignore logs and warnings matching these strings.\n\nNormally, Pants will look for literal matches from the start of the log/warning message, but you can prefix the ignore with `$regex$` for Pants to instead treat your string as a regex pattern. For example:\n\n    ignore_warnings = [\n        \"DEPRECATED: option 'config' in scope 'flake8' will be removed\",\n        '$regex$:No files\\s*'\n    ]\n",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--ignore-warnings"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--ignore-warnings"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pants-version=<str>",
          "config_key": "pants_version",
          "default": "2.7.2",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--pants-version=<str>"],
          "env_var": "PANTS_VERSION",
          "help": "Use this Pants version. Note that Pants only uses this to verify that you are using the requested version, as Pants cannot dynamically change the version it is using once the program is already running.\n\nIf you use the `./pants` script from https://www.pantsbuild.org/v2.7/docs/installation, however, changing the value in your `pants.toml` will cause the new version to be installed and run automatically.\n\nRun `./pants --version` to check what is being used.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--pants-version"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--pants-version"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "2.7.2"
              },
              {
                "details": "from env var PANTS_VERSION",
                "rank": "ENVIRONMENT",
                "value": "2.7.2"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pants-bin-name=<str>",
          "config_key": "pants_bin_name",
          "default": "./pants",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--pants-bin-name=<str>"],
          "env_var": "PANTS_BIN_NAME",
          "help": "The name of the script or binary used to invoke Pants. Useful when printing help messages.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--pants-bin-name"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--pants-bin-name"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "./pants"
              },
              {
                "details": "from env var PANTS_BIN_NAME",
                "rank": "ENVIRONMENT",
                "value": "/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pants-workdir=<dir>",
          "config_key": "pants_workdir",
          "default": "/tmp/tmp.MpwSc5OGVo/.pants.d",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--pants-workdir=<dir>"],
          "env_var": "PANTS_WORKDIR",
          "help": "Write intermediate logs and output files to this dir.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--pants-workdir"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--pants-workdir"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "/tmp/tmp.MpwSc5OGVo/.pants.d"
              },
              {
                "details": "from pants.toml",
                "rank": "CONFIG_DEFAULT",
                "value": "/tmp/tmp.MpwSc5OGVo/.pants.d"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pants-physical-workdir-base=<dir>",
          "config_key": "pants_physical_workdir_base",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--pants-physical-workdir-base=<dir>"],
          "env_var": "PANTS_PHYSICAL_WORKDIR_BASE",
          "help": "When set, a base directory in which to store `--pants-workdir` contents. If this option is a set, the workdir will be created as symlink into a per-workspace subdirectory.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--pants-physical-workdir-base"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--pants-physical-workdir-base"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pants-supportdir=<dir>",
          "config_key": "pants_supportdir",
          "default": "/tmp/tmp.MpwSc5OGVo/build-support",
          "deprecated_message": "Upcoming deprecation in version: 2.8.0.dev0, will be removed in version: 2.9.0.dev0.",
          "deprecation_active": false,
          "display_args": ["--pants-supportdir=<dir>"],
          "env_var": "PANTS_SUPPORTDIR",
          "help": "Used only for templating in `pants.toml`.",
          "removal_hint": "Unused: this option has no necessary equivalent in v2.",
          "removal_version": "2.9.0.dev0",
          "scoped_cmd_line_args": ["--pants-supportdir"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--pants-supportdir"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "/tmp/tmp.MpwSc5OGVo/build-support"
              },
              {
                "details": "from pants.toml",
                "rank": "CONFIG_DEFAULT",
                "value": "/tmp/tmp.MpwSc5OGVo/build-support"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pants-distdir=<dir>",
          "config_key": "pants_distdir",
          "default": "/tmp/tmp.MpwSc5OGVo/dist",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--pants-distdir=<dir>"],
          "env_var": "PANTS_DISTDIR",
          "help": "Write end products, such as the results of `./pants package`, to this dir.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--pants-distdir"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--pants-distdir"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "/tmp/tmp.MpwSc5OGVo/dist"
              },
              {
                "details": "from pants.toml",
                "rank": "CONFIG_DEFAULT",
                "value": "/tmp/tmp.MpwSc5OGVo/dist"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pants-subprocessdir=<str>",
          "config_key": "pants_subprocessdir",
          "default": "/tmp/tmp.MpwSc5OGVo/.pids",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--pants-subprocessdir=<str>"],
          "env_var": "PANTS_SUBPROCESSDIR",
          "help": "The directory to use for tracking subprocess metadata. This should live outside of the dir used by `pants_workdir` to allow for tracking subprocesses that outlive the workdir data.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--pants-subprocessdir"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--pants-subprocessdir"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "/tmp/tmp.MpwSc5OGVo/.pids"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pants-config-files=\"['<str>', '<str>', ...]\"",
          "config_key": "pants_config_files",
          "default": ["/tmp/tmp.MpwSc5OGVo/pants.toml"],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--pants-config-files=\"['<str>', '<str>', ...]\""],
          "env_var": "PANTS_CONFIG_FILES",
          "help": "Paths to Pants config files. This may only be set through the environment variable `PANTS_CONFIG_FILES` and the command line argument `--pants-config-files`; it will be ignored if in a config file like `pants.toml`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--pants-config-files"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--pants-config-files"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": ["/tmp/tmp.MpwSc5OGVo/pants.toml"]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]pantsrc",
          "config_key": "pantsrc",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]pantsrc"],
          "env_var": "PANTS_PANTSRC",
          "help": "Use pantsrc files located at the paths specified in the global option `pantsrc_files`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--pantsrc", "--no-pantsrc"],
          "typ": "bool",
          "unscoped_cmd_line_args": ["--pantsrc", "--no-pantsrc"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pantsrc-files=\"[<path>, <path>, ...]\"",
          "config_key": "pantsrc_files",
          "default": ["/etc/pantsrc", "~/.pants.rc"],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--pantsrc-files=\"[<path>, <path>, ...]\""],
          "env_var": "PANTS_PANTSRC_FILES",
          "help": "Override config with values from these files, using syntax matching that of `--pants-config-files`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--pantsrc-files"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--pantsrc-files"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": ["/etc/pantsrc", "~/.pants.rc"]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pythonpath=\"['<str>', '<str>', ...]\"",
          "config_key": "pythonpath",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--pythonpath=\"['<str>', '<str>', ...]\""],
          "env_var": "PANTS_PYTHONPATH",
          "help": "Add these directories to PYTHONPATH to search for plugins. This does not impact the PYTHONPATH used by Pants when running your Python code.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--pythonpath"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--pythonpath"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]verify-config",
          "config_key": "verify_config",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]verify-config"],
          "env_var": "PANTS_VERIFY_CONFIG",
          "help": "Verify that all config file values correspond to known options.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--verify-config", "--no-verify-config"],
          "typ": "bool",
          "unscoped_cmd_line_args": ["--verify-config", "--no-verify-config"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--stats-record-option-scopes=\"['<str>', '<str>', ...]\"",
          "config_key": "stats_record_option_scopes",
          "default": ["*"],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--stats-record-option-scopes=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_STATS_RECORD_OPTION_SCOPES",
          "help": "Option scopes to record in stats on run completion. Options may be selected by joining the scope and the option with a ^ character, i.e. to get option `pantsd` in the GLOBAL scope, you'd pass `GLOBAL^pantsd`. Add a '*' to the list to capture all known scopes.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--stats-record-option-scopes"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--stats-record-option-scopes"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": ["*"]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pants-ignore=\"['<str>', '<str>', ...]\"",
          "config_key": "pants_ignore",
          "default": [".*/", "/dist/"],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--pants-ignore=\"['<str>', '<str>', ...]\""],
          "env_var": "PANTS_IGNORE",
          "help": "Paths to ignore for all filesystem operations performed by pants (e.g. BUILD file scanning, glob matching, etc). Patterns use the gitignore syntax (https://git-scm.com/docs/gitignore). The `pants_distdir` and `pants_workdir` locations are automatically ignored. `pants_ignore` can be used in tandem with `pants_ignore_use_gitignore`; any rules specified here are applied after rules specified in a .gitignore file.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--pants-ignore"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--pants-ignore"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [".*/", "/dist/"]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]pants-ignore-use-gitignore",
          "config_key": "pants_ignore_use_gitignore",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]pants-ignore-use-gitignore"],
          "env_var": "PANTS_IGNORE_USE_GITIGNORE",
          "help": "Make use of a root .gitignore file when determining whether to ignore filesystem operations performed by Pants. If used together with `--pants-ignore`, any exclude/include patterns specified there apply after .gitignore rules.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pants-ignore-use-gitignore",
            "--no-pants-ignore-use-gitignore"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--pants-ignore-use-gitignore",
            "--no-pants-ignore-use-gitignore"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "-d=<dir>, --logdir=<dir>",
          "config_key": "logdir",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["-d=<dir>", "--logdir=<dir>"],
          "env_var": "PANTS_LOGDIR",
          "help": "Write logs to files under this directory.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["-d", "--logdir"],
          "typ": "str",
          "unscoped_cmd_line_args": ["-d", "--logdir"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]pantsd",
          "config_key": "pantsd",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]pantsd"],
          "env_var": "PANTS_PANTSD",
          "help": "Enables use of the Pants daemon (pantsd). pantsd can significantly improve runtime performance by lowering per-run startup cost, and by memoizing filesystem operations and rule execution.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--pantsd", "--no-pantsd"],
          "typ": "bool",
          "unscoped_cmd_line_args": ["--pantsd", "--no-pantsd"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]concurrent",
          "config_key": "concurrent",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]concurrent"],
          "env_var": "PANTS_CONCURRENT",
          "help": "Enable concurrent runs of Pants. Without this enabled, Pants will start up all concurrent invocations (e.g. in other terminals) without pantsd. Enabling this option requires parallel Pants invocations to block on the first.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--concurrent", "--no-concurrent"],
          "typ": "bool",
          "unscoped_cmd_line_args": ["--concurrent", "--no-concurrent"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pantsd-timeout-when-multiple-invocations=<float>",
          "config_key": "pantsd_timeout_when_multiple_invocations",
          "default": 60.0,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pantsd-timeout-when-multiple-invocations=<float>"
          ],
          "env_var": "PANTS_PANTSD_TIMEOUT_WHEN_MULTIPLE_INVOCATIONS",
          "help": "The maximum amount of time to wait for the invocation to start until raising a timeout exception. Because pantsd currently does not support parallel runs, any prior running Pants command must be finished for the current one to start. To never timeout, use the value -1.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pantsd-timeout-when-multiple-invocations"
          ],
          "typ": "float",
          "unscoped_cmd_line_args": [
            "--pantsd-timeout-when-multiple-invocations"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": 60.0
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pantsd-max-memory-usage=<memory_size>",
          "config_key": "pantsd_max_memory_usage",
          "default": "1GiB",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--pantsd-max-memory-usage=<memory_size>"],
          "env_var": "PANTS_PANTSD_MAX_MEMORY_USAGE",
          "help": "The maximum memory usage of the pantsd process.\n\nWhen the maximum memory is exceeded, the daemon will restart gracefully, although all previous in-memory caching will be lost. Setting too low means that you may miss out on some caching, whereas setting too high may over-consume resources and may result in the operating system killing Pantsd due to memory overconsumption (e.g. via the OOM killer).\n\nYou can suffix with `GiB`, `MiB`, `KiB`, or `B` to indicate the unit, e.g. `2GiB` or `2.12GiB`. A bare number will be in bytes.\n\nThere is at most one pantsd process per workspace.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--pantsd-max-memory-usage"],
          "typ": "memory_size",
          "unscoped_cmd_line_args": ["--pantsd-max-memory-usage"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": 1073741824
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]print-stacktrace",
          "config_key": "print_stacktrace",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]print-stacktrace"],
          "env_var": "PANTS_PRINT_STACKTRACE",
          "help": "Print the full exception stack trace for any errors.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--print-stacktrace",
            "--no-print-stacktrace"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--print-stacktrace",
            "--no-print-stacktrace"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--engine-visualize-to=<dir_option>",
          "config_key": "engine_visualize_to",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--engine-visualize-to=<dir_option>"],
          "env_var": "PANTS_ENGINE_VISUALIZE_TO",
          "help": "A directory to write execution and rule graphs to as `dot` files. The contents of the directory will be overwritten if any filenames collide.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--engine-visualize-to"],
          "typ": "dir_option",
          "unscoped_cmd_line_args": ["--engine-visualize-to"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pantsd-pailgun-port=<int>",
          "config_key": "pantsd_pailgun_port",
          "default": 0,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--pantsd-pailgun-port=<int>"],
          "env_var": "PANTS_PANTSD_PAILGUN_PORT",
          "help": "The port to bind the Pants nailgun server to. Defaults to a random port.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--pantsd-pailgun-port"],
          "typ": "int",
          "unscoped_cmd_line_args": ["--pantsd-pailgun-port"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": 0
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pantsd-invalidation-globs=\"['<str>', '<str>', ...]\"",
          "config_key": "pantsd_invalidation_globs",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pantsd-invalidation-globs=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_PANTSD_INVALIDATION_GLOBS",
          "help": "Filesystem events matching any of these globs will trigger a daemon restart. Pants's own code, plugins, and `--pants-config-files` are inherently invalidated.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--pantsd-invalidation-globs"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--pantsd-invalidation-globs"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--rule-threads-core=<int>",
          "config_key": "rule_threads_core",
          "default": "max(2, #cores/2)",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--rule-threads-core=<int>"],
          "env_var": "PANTS_RULE_THREADS_CORE",
          "help": "The number of threads to keep active and ready to execute `@rule` logic (see also: `--rule-threads-max`).\n\nValues less than 2 are not currently supported. \n\nThis value is independent of the number of processes that may be spawned in parallel locally (controlled by `--process-execution-local-parallelism`).",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--rule-threads-core"],
          "typ": "int",
          "unscoped_cmd_line_args": ["--rule-threads-core"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": 32
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--rule-threads-max=<int>",
          "config_key": "rule_threads_max",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--rule-threads-max=<int>"],
          "env_var": "PANTS_RULE_THREADS_MAX",
          "help": "The maximum number of threads to use to execute `@rule` logic. Defaults to a small multiple of `--rule-threads-core`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--rule-threads-max"],
          "typ": "int",
          "unscoped_cmd_line_args": ["--rule-threads-max"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--local-store-dir=<str>",
          "config_key": "local_store_dir",
          "default": "/home/josh/.cache/pants/lmdb_store",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--local-store-dir=<str>"],
          "env_var": "PANTS_LOCAL_STORE_DIR",
          "help": "Directory to use for the local file store, which stores the results of subprocesses run by Pants.\n\nThe path may be absolute or relative. If the directory is within the build root, be sure to include it in `--pants-ignore`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--local-store-dir"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--local-store-dir"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "/home/josh/.cache/pants/lmdb_store"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--local-store-shard-count=<int>",
          "config_key": "local_store_shard_count",
          "default": 16,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--local-store-shard-count=<int>"],
          "env_var": "PANTS_LOCAL_STORE_SHARD_COUNT",
          "help": "The number of LMDB shards created for the local store. This setting also impacts the maximum size of stored files: see `--local-store-files-max-size-bytes` for more information.\n\nBecause LMDB allows only one simultaneous writer per database, the store is split into multiple shards to allow for more concurrent writers. The faster your disks are, the fewer shards you are likely to need for performance.\n\nNB: After changing this value, you will likely want to manually clear the `--local-store-dir` directory to clear the space used by old shard layouts.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--local-store-shard-count"],
          "typ": "int",
          "unscoped_cmd_line_args": ["--local-store-shard-count"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": 16
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--local-store-processes-max-size-bytes=<int>",
          "config_key": "local_store_processes_max_size_bytes",
          "default": 16000000000,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--local-store-processes-max-size-bytes=<int>"],
          "env_var": "PANTS_LOCAL_STORE_PROCESSES_MAX_SIZE_BYTES",
          "help": "The maximum size in bytes of the local store containing process cache entries. Stored below `--local-store-dir`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--local-store-processes-max-size-bytes"],
          "typ": "int",
          "unscoped_cmd_line_args": ["--local-store-processes-max-size-bytes"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": 16000000000
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--local-store-files-max-size-bytes=<int>",
          "config_key": "local_store_files_max_size_bytes",
          "default": 256000000000,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--local-store-files-max-size-bytes=<int>"],
          "env_var": "PANTS_LOCAL_STORE_FILES_MAX_SIZE_BYTES",
          "help": "The maximum size in bytes of the local store containing files. Stored below `--local-store-dir`.\n\nNB: This size value bounds the total size of all files, but (due to sharding of the store on disk) it also bounds the per-file size to (VALUE / `--local-store-shard-count`).\n\nThis value doesn't reflect space allocated on disk, or RAM allocated (it may be reflected in VIRT but not RSS). However, the default is lower than you might otherwise choose because macOS creates core dumps that include MMAP'd pages, and setting this too high might cause core dumps to use an unreasonable amount of disk if they are enabled.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--local-store-files-max-size-bytes"],
          "typ": "int",
          "unscoped_cmd_line_args": ["--local-store-files-max-size-bytes"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": 256000000000
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--local-store-directories-max-size-bytes=<int>",
          "config_key": "local_store_directories_max_size_bytes",
          "default": 16000000000,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--local-store-directories-max-size-bytes=<int>"],
          "env_var": "PANTS_LOCAL_STORE_DIRECTORIES_MAX_SIZE_BYTES",
          "help": "The maximum size in bytes of the local store containing directories. Stored below `--local-store-dir`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--local-store-directories-max-size-bytes"],
          "typ": "int",
          "unscoped_cmd_line_args": [
            "--local-store-directories-max-size-bytes"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": 16000000000
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--named-caches-dir=<str>",
          "config_key": "named_caches_dir",
          "default": "/home/josh/.cache/pants/named_caches",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--named-caches-dir=<str>"],
          "env_var": "PANTS_NAMED_CACHES_DIR",
          "help": "Directory to use for named global caches for tools and processes with trusted, concurrency-safe caches.\n\nThe path may be absolute or relative. If the directory is within the build root, be sure to include it in `--pants-ignore`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--named-caches-dir"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--named-caches-dir"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "/home/josh/.cache/pants/named_caches"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--local-execution-root-dir=<str>",
          "config_key": "local_execution_root_dir",
          "default": "/tmp",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--local-execution-root-dir=<str>"],
          "env_var": "PANTS_LOCAL_EXECUTION_ROOT_DIR",
          "help": "Directory to use for local process execution sandboxing.\n\nThe path may be absolute or relative. If the directory is within the build root, be sure to include it in `--pants-ignore`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--local-execution-root-dir"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--local-execution-root-dir"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "/tmp"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]process-execution-local-cache",
          "config_key": "process_execution_local_cache",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]process-execution-local-cache"],
          "env_var": "PANTS_PROCESS_EXECUTION_LOCAL_CACHE",
          "help": "Whether to cache process executions in a local cache persisted to disk at `--local-store-dir`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--process-execution-local-cache",
            "--no-process-execution-local-cache"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--process-execution-local-cache",
            "--no-process-execution-local-cache"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]process-execution-local-cleanup",
          "config_key": "process_execution_local_cleanup",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]process-execution-local-cleanup"],
          "env_var": "PANTS_PROCESS_EXECUTION_LOCAL_CLEANUP",
          "help": "If false, Pants will not clean up local directories used as chroots for running processes. Pants will log their location so that you can inspect the chroot, and run the `__run.sh` script to recreate the process using the same argv and environment variables used by Pants. This option is useful for debugging.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--process-execution-local-cleanup",
            "--no-process-execution-local-cleanup"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--process-execution-local-cleanup",
            "--no-process-execution-local-cleanup"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--ca-certs-path=<str>",
          "config_key": "ca_certs_path",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--ca-certs-path=<str>"],
          "env_var": "PANTS_CA_CERTS_PATH",
          "help": "Path to a file containing PEM-format CA certificates used for verifying secure connections when downloading files required by a build.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--ca-certs-path"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--ca-certs-path"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--process-execution-local-parallelism=<int>",
          "config_key": "process_execution_local_parallelism",
          "default": "#cores",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--process-execution-local-parallelism=<int>"],
          "env_var": "PANTS_PROCESS_EXECUTION_LOCAL_PARALLELISM",
          "help": "Number of concurrent processes that may be executed locally.\n\nThis value is independent of the number of threads that may be used to execute the logic in `@rules` (controlled by `--rule-threads-core`).",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--process-execution-local-parallelism"],
          "typ": "int",
          "unscoped_cmd_line_args": ["--process-execution-local-parallelism"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": 64
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--process-execution-remote-parallelism=<int>",
          "config_key": "process_execution_remote_parallelism",
          "default": 128,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--process-execution-remote-parallelism=<int>"],
          "env_var": "PANTS_PROCESS_EXECUTION_REMOTE_PARALLELISM",
          "help": "Number of concurrent processes that may be executed remotely.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--process-execution-remote-parallelism"],
          "typ": "int",
          "unscoped_cmd_line_args": ["--process-execution-remote-parallelism"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": 128
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--process-execution-cache-namespace=<str>",
          "config_key": "process_execution_cache_namespace",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--process-execution-cache-namespace=<str>"],
          "env_var": "PANTS_PROCESS_EXECUTION_CACHE_NAMESPACE",
          "help": "The cache namespace for process execution. Change this value to invalidate every artifact's execution, or to prevent process cache entries from being (re)used for different usecases or users.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--process-execution-cache-namespace"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--process-execution-cache-namespace"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]process-execution-local-enable-nailgun",
          "config_key": "process_execution_local_enable_nailgun",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]process-execution-local-enable-nailgun"],
          "env_var": "PANTS_PROCESS_EXECUTION_LOCAL_ENABLE_NAILGUN",
          "help": "Whether or not to use nailgun to run the requests that are marked as nailgunnable.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--process-execution-local-enable-nailgun",
            "--no-process-execution-local-enable-nailgun"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--process-execution-local-enable-nailgun",
            "--no-process-execution-local-enable-nailgun"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]remote-execution",
          "config_key": "remote_execution",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]remote-execution"],
          "env_var": "PANTS_REMOTE_EXECUTION",
          "help": "Enables remote workers for increased parallelism. (Alpha)\n\nAlternatively, you can use `--remote-cache-read` and `--remote-cache-write` to still run everything locally, but to use a remote cache.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--remote-execution",
            "--no-remote-execution"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--remote-execution",
            "--no-remote-execution"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]remote-cache-read",
          "config_key": "remote_cache_read",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]remote-cache-read"],
          "env_var": "PANTS_REMOTE_CACHE_READ",
          "help": "Whether to enable reading from a remote cache.\n\nThis cannot be used at the same time as `--remote-execution`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--remote-cache-read",
            "--no-remote-cache-read"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--remote-cache-read",
            "--no-remote-cache-read"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]remote-cache-write",
          "config_key": "remote_cache_write",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]remote-cache-write"],
          "env_var": "PANTS_REMOTE_CACHE_WRITE",
          "help": "Whether to enable writing results to a remote cache.\n\nThis cannot be used at the same time as `--remote-execution`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--remote-cache-write",
            "--no-remote-cache-write"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--remote-cache-write",
            "--no-remote-cache-write"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--remote-instance-name=<str>",
          "config_key": "remote_instance_name",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--remote-instance-name=<str>"],
          "env_var": "PANTS_REMOTE_INSTANCE_NAME",
          "help": "Name of the remote instance to use by remote caching and remote execution.\n\nThis is used by some remote servers for routing. Consult your remote server for whether this should be set.\n\nYou can also use `--remote-auth-plugin` to provide a plugin to dynamically set this value.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--remote-instance-name"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--remote-instance-name"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--remote-ca-certs-path=<str>",
          "config_key": "remote_ca_certs_path",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--remote-ca-certs-path=<str>"],
          "env_var": "PANTS_REMOTE_CA_CERTS_PATH",
          "help": "Path to a PEM file containing CA certificates used for verifying secure connections to `--remote-execution-address` and `--remote-store-address`.\n\nIf unspecified, Pants will attempt to auto-discover root CA certificates when TLS is enabled with remote execution and caching.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--remote-ca-certs-path"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--remote-ca-certs-path"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--remote-oauth-bearer-token-path=<str>",
          "config_key": "remote_oauth_bearer_token_path",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--remote-oauth-bearer-token-path=<str>"],
          "env_var": "PANTS_REMOTE_OAUTH_BEARER_TOKEN_PATH",
          "help": "Path to a file containing an oauth token to use for gGRPC connections to `--remote-execution-address` and `--remote-store-address`.\n\nIf specified, Pants will add a header in the format `authorization: Bearer <token>`. You can also manually add this header via `--remote-execution-headers` and `--remote-store-headers`, or use `--remote-auth-plugin` to provide a plugin to dynamically set the relevant headers. Otherwise, no authorization will be performed.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--remote-oauth-bearer-token-path"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--remote-oauth-bearer-token-path"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--remote-auth-plugin=<str>",
          "config_key": "remote_auth_plugin",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--remote-auth-plugin=<str>"],
          "env_var": "PANTS_REMOTE_AUTH_PLUGIN",
          "help": "Path to a plugin to dynamically configure remote caching and execution options.\n\nFormat: `path.to.module:my_func`. Pants will import your module and run your function. Update the `--pythonpath` option to ensure your file is loadable.\n\nThe function should take the kwargs `initial_store_headers: dict[str, str]`, `initial_execution_headers: dict[str, str]`, `options: Options` (from pants.option.options), `env: dict[str, str]`, and `prior_result: AuthPluginResult | None`. It should return an instance of `AuthPluginResult` from `pants.option.global_options`.\n\nPants will replace the headers it would normally use with whatever your plugin returns; usually, you should include the `initial_store_headers` and `initial_execution_headers` in your result so that options like `--remote-store-headers` still work.\n\nIf you return `instance_name`, Pants will replace `--remote-instance-name` with this value.\n\nIf the returned auth state is `AuthPluginState.UNAVAILABLE`, Pants will disable remote caching and execution.\n\nIf Pantsd is in use, `prior_result` will be the previous `AuthPluginResult` returned by your plugin, which allows you to reuse the result. Otherwise, if Pantsd has been restarted or is not used, the `prior_result` will be `None`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--remote-auth-plugin"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--remote-auth-plugin"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--remote-store-address=<str>",
          "config_key": "remote_store_address",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--remote-store-address=<str>"],
          "env_var": "PANTS_REMOTE_STORE_ADDRESS",
          "help": "The URI of a server used for the remote file store.\n\nFormat: `scheme://host:port`. The supported schemes are `grpc` and `grpcs`, i.e. gRPC with TLS enabled. If `grpc` is used, TLS will be disabled.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--remote-store-address"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--remote-store-address"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--remote-store-headers=\"{'key1': val1, 'key2': val2, ...}\"",
          "config_key": "remote_store_headers",
          "default": {
            "user-agent": "pants/2.7.2"
          },
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--remote-store-headers=\"{'key1': val1, 'key2': val2, ...}\""
          ],
          "env_var": "PANTS_REMOTE_STORE_HEADERS",
          "help": "Headers to set on remote store requests.\n\nFormat: header=value. Pants may add additional headers.\n\nSee `--remote-execution-headers` as well.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--remote-store-headers"],
          "typ": "dict",
          "unscoped_cmd_line_args": ["--remote-store-headers"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": {}
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": {
                  "user-agent": "pants/2.7.2"
                }
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--remote-store-chunk-bytes=<int>",
          "config_key": "remote_store_chunk_bytes",
          "default": 1048576,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--remote-store-chunk-bytes=<int>"],
          "env_var": "PANTS_REMOTE_STORE_CHUNK_BYTES",
          "help": "Size in bytes of chunks transferred to/from the remote file store.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--remote-store-chunk-bytes"],
          "typ": "int",
          "unscoped_cmd_line_args": ["--remote-store-chunk-bytes"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": 1048576
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--remote-store-chunk-upload-timeout-seconds=<int>",
          "config_key": "remote_store_chunk_upload_timeout_seconds",
          "default": 60,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--remote-store-chunk-upload-timeout-seconds=<int>"],
          "env_var": "PANTS_REMOTE_STORE_CHUNK_UPLOAD_TIMEOUT_SECONDS",
          "help": "Timeout (in seconds) for uploads of individual chunks to the remote file store.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--remote-store-chunk-upload-timeout-seconds"
          ],
          "typ": "int",
          "unscoped_cmd_line_args": [
            "--remote-store-chunk-upload-timeout-seconds"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": 60
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--remote-store-rpc-retries=<int>",
          "config_key": "remote_store_rpc_retries",
          "default": 2,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--remote-store-rpc-retries=<int>"],
          "env_var": "PANTS_REMOTE_STORE_RPC_RETRIES",
          "help": "Number of times to retry any RPC to the remote store before giving up.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--remote-store-rpc-retries"],
          "typ": "int",
          "unscoped_cmd_line_args": ["--remote-store-rpc-retries"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": 2
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--remote-store-rpc-concurrency=<int>",
          "config_key": "remote_store_rpc_concurrency",
          "default": 128,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--remote-store-rpc-concurrency=<int>"],
          "env_var": "PANTS_REMOTE_STORE_RPC_CONCURRENCY",
          "help": "The number of concurrent requests allowed to the remote store service.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--remote-store-rpc-concurrency"],
          "typ": "int",
          "unscoped_cmd_line_args": ["--remote-store-rpc-concurrency"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": 128
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--remote-store-batch-api-size-limit=<int>",
          "config_key": "remote_store_batch_api_size_limit",
          "default": 4194304,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--remote-store-batch-api-size-limit=<int>"],
          "env_var": "PANTS_REMOTE_STORE_BATCH_API_SIZE_LIMIT",
          "help": "The maximum total size of blobs allowed to be sent in a single batch API call to the remote store.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--remote-store-batch-api-size-limit"],
          "typ": "int",
          "unscoped_cmd_line_args": ["--remote-store-batch-api-size-limit"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": 4194304
              }
            ]
          }
        },
        {
          "choices": ["ignore", "first_only", "backoff"],
          "comma_separated_choices": "ignore, first_only, backoff",
          "comma_separated_display_args": "--remote-cache-warnings=<RemoteCacheWarningsBehavior>",
          "config_key": "remote_cache_warnings",
          "default": "first_only",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--remote-cache-warnings=<RemoteCacheWarningsBehavior>"
          ],
          "env_var": "PANTS_REMOTE_CACHE_WARNINGS",
          "help": "Whether to log remote cache failures at the `warn` log level.\n\nAll errors not logged at the `warn` level will instead be logged at the `debug` level.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--remote-cache-warnings"],
          "typ": "RemoteCacheWarningsBehavior",
          "unscoped_cmd_line_args": ["--remote-cache-warnings"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "first_only"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]remote-cache-eager-fetch",
          "config_key": "remote_cache_eager_fetch",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]remote-cache-eager-fetch"],
          "env_var": "PANTS_REMOTE_CACHE_EAGER_FETCH",
          "help": "Eagerly fetch relevant content from the remote store instead of lazily fetching.\n\nThis may result in worse performance, but reduce the frequency of errors encountered by reducing the surface area of when remote caching is used.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--remote-cache-eager-fetch",
            "--no-remote-cache-eager-fetch"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--remote-cache-eager-fetch",
            "--no-remote-cache-eager-fetch"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--remote-cache-rpc-concurrency=<int>",
          "config_key": "remote_cache_rpc_concurrency",
          "default": 128,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--remote-cache-rpc-concurrency=<int>"],
          "env_var": "PANTS_REMOTE_CACHE_RPC_CONCURRENCY",
          "help": "The number of concurrent requests allowed to the remote cache service.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--remote-cache-rpc-concurrency"],
          "typ": "int",
          "unscoped_cmd_line_args": ["--remote-cache-rpc-concurrency"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": 128
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--remote-execution-address=<str>",
          "config_key": "remote_execution_address",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--remote-execution-address=<str>"],
          "env_var": "PANTS_REMOTE_EXECUTION_ADDRESS",
          "help": "The URI of a server used as a remote execution scheduler.\n\nFormat: `scheme://host:port`. The supported schemes are `grpc` and `grpcs`, i.e. gRPC with TLS enabled. If `grpc` is used, TLS will be disabled.\n\nYou must also set `--remote-store-address`, which will often be the same value.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--remote-execution-address"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--remote-execution-address"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--remote-execution-extra-platform-properties=\"['<str>', '<str>', ...]\"",
          "config_key": "remote_execution_extra_platform_properties",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--remote-execution-extra-platform-properties=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_REMOTE_EXECUTION_EXTRA_PLATFORM_PROPERTIES",
          "help": "Platform properties to set on remote execution requests. Format: property=value. Multiple values should be specified as multiple occurrences of this flag. Pants itself may add additional platform properties.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--remote-execution-extra-platform-properties"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": [
            "--remote-execution-extra-platform-properties"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--remote-execution-headers=\"{'key1': val1, 'key2': val2, ...}\"",
          "config_key": "remote_execution_headers",
          "default": {
            "user-agent": "pants/2.7.2"
          },
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--remote-execution-headers=\"{'key1': val1, 'key2': val2, ...}\""
          ],
          "env_var": "PANTS_REMOTE_EXECUTION_HEADERS",
          "help": "Headers to set on remote execution requests. Format: header=value. Pants may add additional headers.\n\nSee `--remote-store-headers` as well.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--remote-execution-headers"],
          "typ": "dict",
          "unscoped_cmd_line_args": ["--remote-execution-headers"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": {}
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": {
                  "user-agent": "pants/2.7.2"
                }
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--remote-execution-overall-deadline-secs=<int>",
          "config_key": "remote_execution_overall_deadline_secs",
          "default": 3600,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--remote-execution-overall-deadline-secs=<int>"],
          "env_var": "PANTS_REMOTE_EXECUTION_OVERALL_DEADLINE_SECS",
          "help": "Overall timeout in seconds for each remote execution request from time of submission",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--remote-execution-overall-deadline-secs"],
          "typ": "int",
          "unscoped_cmd_line_args": [
            "--remote-execution-overall-deadline-secs"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": 3600
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--remote-execution-rpc-concurrency=<int>",
          "config_key": "remote_execution_rpc_concurrency",
          "default": 128,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--remote-execution-rpc-concurrency=<int>"],
          "env_var": "PANTS_REMOTE_EXECUTION_RPC_CONCURRENCY",
          "help": "The number of concurrent requests allowed to the remote execution service.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--remote-execution-rpc-concurrency"],
          "typ": "int",
          "unscoped_cmd_line_args": ["--remote-execution-rpc-concurrency"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": 128
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]watch-filesystem",
          "config_key": "watch_filesystem",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]watch-filesystem"],
          "env_var": "PANTS_WATCH_FILESYSTEM",
          "help": "Set to False if Pants should not watch the filesystem for changes. `pantsd` or `loop` may not be enabled.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--watch-filesystem",
            "--no-watch-filesystem"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--watch-filesystem",
            "--no-watch-filesystem"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        },
        {
          "choices": ["warn", "error"],
          "comma_separated_choices": "warn, error",
          "comma_separated_display_args": "--files-not-found-behavior=<FilesNotFoundBehavior>",
          "config_key": "files_not_found_behavior",
          "default": "warn",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--files-not-found-behavior=<FilesNotFoundBehavior>"
          ],
          "env_var": "PANTS_FILES_NOT_FOUND_BEHAVIOR",
          "help": "What to do when files and globs specified in BUILD files, such as in the `sources` field, cannot be found. This happens when the files do not exist on your machine or when they are ignored by the `--pants-ignore` option.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--files-not-found-behavior"],
          "typ": "FilesNotFoundBehavior",
          "unscoped_cmd_line_args": ["--files-not-found-behavior"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "warn"
              }
            ]
          }
        },
        {
          "choices": ["ignore", "warn", "error"],
          "comma_separated_choices": "ignore, warn, error",
          "comma_separated_display_args": "--owners-not-found-behavior=<OwnersNotFoundBehavior>",
          "config_key": "owners_not_found_behavior",
          "default": "error",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--owners-not-found-behavior=<OwnersNotFoundBehavior>"
          ],
          "env_var": "PANTS_OWNERS_NOT_FOUND_BEHAVIOR",
          "help": "What to do when file arguments do not have any owning target. This happens when there are no targets whose `sources` fields include the file argument.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--owners-not-found-behavior"],
          "typ": "OwnersNotFoundBehavior",
          "unscoped_cmd_line_args": ["--owners-not-found-behavior"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "error"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--build-patterns=\"['<str>', '<str>', ...]\"",
          "config_key": "build_patterns",
          "default": ["BUILD", "BUILD.*"],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--build-patterns=\"['<str>', '<str>', ...]\""],
          "env_var": "PANTS_BUILD_PATTERNS",
          "help": "The naming scheme for BUILD files, i.e. where you define targets. This only sets the naming scheme, not the directory paths to look for. To add ignorepatterns, use the option `--build-ignore`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--build-patterns"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--build-patterns"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": ["BUILD", "BUILD.*"]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--build-ignore=\"['<str>', '<str>', ...]\"",
          "config_key": "build_ignore",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--build-ignore=\"['<str>', '<str>', ...]\""],
          "env_var": "PANTS_BUILD_IGNORE",
          "help": "Paths to ignore when identifying BUILD files. This does not affect any other filesystem operations; use `--pants-ignore` for that instead. Patterns use the gitignore pattern syntax (https://git-scm.com/docs/gitignore).",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--build-ignore"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--build-ignore"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--build-file-prelude-globs=\"['<str>', '<str>', ...]\"",
          "config_key": "build_file_prelude_globs",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--build-file-prelude-globs=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_BUILD_FILE_PRELUDE_GLOBS",
          "help": "Python files to evaluate and whose symbols should be exposed to all BUILD files. See https://www.pantsbuild.org/v2.7/docs/macros.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--build-file-prelude-globs"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--build-file-prelude-globs"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--subproject-roots=\"['<str>', '<str>', ...]\"",
          "config_key": "subproject_roots",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--subproject-roots=\"['<str>', '<str>', ...]\""],
          "env_var": "PANTS_SUBPROJECT_ROOTS",
          "help": "Paths that correspond with build roots for any subproject that this project depends on.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--subproject-roots"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--subproject-roots"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--loop-max=<int>",
          "config_key": "loop_max",
          "default": 4294967296,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--loop-max=<int>"],
          "env_var": "PANTS_LOOP_MAX",
          "help": "The maximum number of times to loop when `--loop` is specified.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--loop-max"],
          "typ": "int",
          "unscoped_cmd_line_args": ["--loop-max"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": 4294967296
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--streaming-workunits-report-interval=<float>",
          "config_key": "streaming_workunits_report_interval",
          "default": 1.0,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--streaming-workunits-report-interval=<float>"],
          "env_var": "PANTS_STREAMING_WORKUNITS_REPORT_INTERVAL",
          "help": "Interval in seconds between when streaming workunit event receivers will be polled.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--streaming-workunits-report-interval"],
          "typ": "float",
          "unscoped_cmd_line_args": ["--streaming-workunits-report-interval"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": 1.0
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]streaming-workunits-complete-async",
          "config_key": "streaming_workunits_complete_async",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]streaming-workunits-complete-async"],
          "env_var": "PANTS_STREAMING_WORKUNITS_COMPLETE_ASYNC",
          "help": "True if stats recording should be allowed to complete asynchronously when `pantsd` is enabled. When `pantsd` is disabled, stats recording is always synchronous. To reduce data loss, this flag defaults to false inside of containers, such as when run with Docker.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--streaming-workunits-complete-async",
            "--no-streaming-workunits-complete-async"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--streaming-workunits-complete-async",
            "--no-streaming-workunits-complete-async"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": ["trace", "debug", "info", "warn", "error"],
          "comma_separated_choices": "trace, debug, info, warn, error",
          "comma_separated_display_args": "-l=<LogLevel>, --level=<LogLevel>",
          "config_key": "level",
          "default": "info",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["-l=<LogLevel>", "--level=<LogLevel>"],
          "env_var": "PANTS_LEVEL",
          "help": "Set the logging level.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["-l", "--level"],
          "typ": "LogLevel",
          "unscoped_cmd_line_args": ["-l", "--level"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "info"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--spec-files=\"['<str>', '<str>', ...]\"",
          "config_key": "spec_files",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--spec-files=\"['<str>', '<str>', ...]\""],
          "env_var": "PANTS_SPEC_FILES",
          "help": "Read additional specs (target addresses, files, and/or globs), one per line, from these files.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--spec-files"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--spec-files"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]colors",
          "config_key": "colors",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]colors"],
          "env_var": "PANTS_COLORS",
          "help": "Whether Pants should use colors in output or not. This may also impact whether some tools Pants runs use color.\n\nWhen unset, this value defaults based on whether the output destination supports color.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--colors", "--no-colors"],
          "typ": "bool",
          "unscoped_cmd_line_args": ["--colors", "--no-colors"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]dynamic-ui",
          "config_key": "dynamic_ui",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]dynamic-ui"],
          "env_var": "PANTS_DYNAMIC_UI",
          "help": "Display a dynamically-updating console UI as Pants runs. This is true by default if Pants detects a TTY and there is no 'CI' environment variable indicating that Pants is running in a continuous integration environment.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--dynamic-ui", "--no-dynamic-ui"],
          "typ": "bool",
          "unscoped_cmd_line_args": ["--dynamic-ui", "--no-dynamic-ui"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--tag=\"[[+-]tag1,tag2,..., [+-]tag1,tag2,..., ...]\"",
          "config_key": "tag",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--tag=\"[[+-]tag1,tag2,..., [+-]tag1,tag2,..., ...]\""
          ],
          "env_var": "PANTS_TAG",
          "help": "Include only targets with these tags (optional '+' prefix) or without these tags ('-' prefix). See https://www.pantsbuild.org/v2.7/docs/advanced-target-selection.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--tag"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--tag"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--exclude-target-regexp=\"[<regexp>, <regexp>, ...]\"",
          "config_key": "exclude_target_regexp",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--exclude-target-regexp=\"[<regexp>, <regexp>, ...]\""
          ],
          "env_var": "PANTS_EXCLUDE_TARGET_REGEXP",
          "help": "Exclude targets that match these regexes. This does not impact file arguments.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--exclude-target-regexp"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--exclude-target-regexp"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]loop",
          "config_key": "loop",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]loop"],
          "env_var": "PANTS_LOOP",
          "help": "Run goals continuously as file changes are detected.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--loop", "--no-loop"],
          "typ": "bool",
          "unscoped_cmd_line_args": ["--loop", "--no-loop"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        }
      ],
      "deprecated": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--native-engine-visualize-to=<dir_option>",
          "config_key": "native_engine_visualize_to",
          "default": null,
          "deprecated_message": "Deprecated, will be removed in version: 2.8.0.dev0.",
          "deprecation_active": true,
          "display_args": ["--native-engine-visualize-to=<dir_option>"],
          "env_var": "PANTS_NATIVE_ENGINE_VISUALIZE_TO",
          "help": "A directory to write execution and rule graphs to as `dot` files. The contents of the directory will be overwritten if any filenames collide.",
          "removal_hint": "Use `--engine-visualize-to` instead.",
          "removal_version": "2.8.0.dev0",
          "scoped_cmd_line_args": ["--native-engine-visualize-to"],
          "typ": "dir_option",
          "unscoped_cmd_line_args": ["--native-engine-visualize-to"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        }
      ],
      "description": "Options to control the overall behavior of Pants.",
      "is_goal": false,
      "scope": ""
    },
    "anonymous-telemetry": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]anonymous-telemetry-enabled",
          "config_key": "enabled",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]anonymous-telemetry-enabled"],
          "env_var": "PANTS_ANONYMOUS_TELEMETRY_ENABLED",
          "help": "Whether to send anonymous telemetry to the Pants project.\nTelemetry is sent asynchronously, with silent failure, and does not impact build times or outcomes.\nSee https://www.pantsbuild.org/v2.7/docs/anonymous-telemetry for details.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--anonymous-telemetry-enabled",
            "--no-anonymous-telemetry-enabled"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": ["--enabled", "--no-enabled"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--anonymous-telemetry-repo-id=<str>",
          "config_key": "repo_id",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--anonymous-telemetry-repo-id=<str>"],
          "env_var": "PANTS_ANONYMOUS_TELEMETRY_REPO_ID",
          "help": "An anonymized ID representing this repo.\nFor private repos, you likely want the ID to not be derived from, or algorithmically convertible to, anything identifying the repo.\nFor public repos the ID may be visible in that repo's config file, so anonymity of the repo is not guaranteed (although user anonymity is always guaranteed).\nSee https://www.pantsbuild.org/v2.7/docs/anonymous-telemetry for details.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--anonymous-telemetry-repo-id"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--repo-id"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        }
      ],
      "basic": [],
      "deprecated": [],
      "description": "Options related to sending anonymous stats to the Pants project, to aid development.",
      "is_goal": false,
      "scope": "anonymous-telemetry"
    },
    "bandit": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--bandit-version=<str>",
          "config_key": "version",
          "default": "bandit>=1.7.0,<1.8",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--bandit-version=<str>"],
          "env_var": "PANTS_BANDIT_VERSION",
          "help": "Requirement string for the tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--bandit-version"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--version"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "bandit>=1.7.0,<1.8"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--bandit-extra-requirements=\"['<str>', '<str>', ...]\"",
          "config_key": "extra_requirements",
          "default": ["setuptools", "GitPython==3.1.18"],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--bandit-extra-requirements=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_BANDIT_EXTRA_REQUIREMENTS",
          "help": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--bandit-extra-requirements"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--extra-requirements"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": ["setuptools", "GitPython==3.1.18"]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--bandit-lockfile=<str>",
          "config_key": "lockfile",
          "default": "<default>",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--bandit-lockfile=<str>"],
          "env_var": "PANTS_BANDIT_LOCKFILE",
          "help": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python-setup].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.7.2/src/python/pants/backend/python/lint/bandit/lockfile.txt for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `./pants generate-lockfiles --resolve=bandit`.\n\nLockfile generation currently does not wire up the `[python-repos]` options. If lockfile generation fails, you can manually generate a lockfile, such as by using pip-compile or `pip freeze`. Set this option to the path to your manually generated lockfile. When manually maintaining lockfiles, set `[python-setup].invalid_lockfile_behavior = 'ignore'`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--bandit-lockfile"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--lockfile"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "<default>"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--bandit-console-script=<str>",
          "config_key": "console_script",
          "default": "bandit",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--bandit-console-script=<str>"],
          "env_var": "PANTS_BANDIT_CONSOLE_SCRIPT",
          "help": "The console script for the tool. Using this option is generally preferable to (and mutually exclusive with) specifying an --entry-point since console script names have a higher expectation of staying stable across releases of the tool. Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--bandit-console-script"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--console-script"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "bandit"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--bandit-entry-point=<str>",
          "config_key": "entry_point",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--bandit-entry-point=<str>"],
          "env_var": "PANTS_BANDIT_ENTRY_POINT",
          "help": "The entry point for the tool. Generally you only want to use this option if the tool does not offer a --console-script (which this option is mutually exclusive with). Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--bandit-entry-point"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--entry-point"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--bandit-config=<file_option>",
          "config_key": "config",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--bandit-config=<file_option>"],
          "env_var": "PANTS_BANDIT_CONFIG",
          "help": "Path to a Bandit YAML config file (https://bandit.readthedocs.io/en/latest/config.html).",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--bandit-config"],
          "typ": "file_option",
          "unscoped_cmd_line_args": ["--config"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]bandit-skip",
          "config_key": "skip",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]bandit-skip"],
          "env_var": "PANTS_BANDIT_SKIP",
          "help": "Don't use Bandit when running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 lint`",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--bandit-skip", "--no-bandit-skip"],
          "typ": "bool",
          "unscoped_cmd_line_args": ["--skip", "--no-skip"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--bandit-args=\"[<shell_str>, <shell_str>, ...]\"",
          "config_key": "args",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--bandit-args=\"[<shell_str>, <shell_str>, ...]\""],
          "env_var": "PANTS_BANDIT_ARGS",
          "help": "Arguments to pass directly to Bandit, e.g. `--bandit-args=\"--skip B101,B308 --confidence\"`",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--bandit-args"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--args"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "description": "A tool for finding security issues in Python code (https://bandit.readthedocs.io).",
      "is_goal": false,
      "scope": "bandit"
    },
    "black": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--black-version=<str>",
          "config_key": "version",
          "default": "black==21.5b2",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--black-version=<str>"],
          "env_var": "PANTS_BLACK_VERSION",
          "help": "Requirement string for the tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--black-version"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--version"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "black==21.5b2"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--black-extra-requirements=\"['<str>', '<str>', ...]\"",
          "config_key": "extra_requirements",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--black-extra-requirements=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_BLACK_EXTRA_REQUIREMENTS",
          "help": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--black-extra-requirements"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--extra-requirements"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--black-interpreter-constraints=\"['<str>', '<str>', ...]\"",
          "config_key": "interpreter_constraints",
          "default": ["CPython>=3.6.2"],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--black-interpreter-constraints=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_BLACK_INTERPRETER_CONSTRAINTS",
          "help": "Python interpreter constraints for this tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--black-interpreter-constraints"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--interpreter-constraints"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": ["CPython>=3.6.2"]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--black-lockfile=<str>",
          "config_key": "lockfile",
          "default": "<default>",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--black-lockfile=<str>"],
          "env_var": "PANTS_BLACK_LOCKFILE",
          "help": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python-setup].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.7.2/src/python/pants/backend/python/lint/black/lockfile.txt for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `./pants generate-lockfiles --resolve=black`.\n\nLockfile generation currently does not wire up the `[python-repos]` options. If lockfile generation fails, you can manually generate a lockfile, such as by using pip-compile or `pip freeze`. Set this option to the path to your manually generated lockfile. When manually maintaining lockfiles, set `[python-setup].invalid_lockfile_behavior = 'ignore'`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--black-lockfile"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--lockfile"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "<default>"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--black-console-script=<str>",
          "config_key": "console_script",
          "default": "black",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--black-console-script=<str>"],
          "env_var": "PANTS_BLACK_CONSOLE_SCRIPT",
          "help": "The console script for the tool. Using this option is generally preferable to (and mutually exclusive with) specifying an --entry-point since console script names have a higher expectation of staying stable across releases of the tool. Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--black-console-script"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--console-script"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "black"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--black-entry-point=<str>",
          "config_key": "entry_point",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--black-entry-point=<str>"],
          "env_var": "PANTS_BLACK_ENTRY_POINT",
          "help": "The entry point for the tool. Generally you only want to use this option if the tool does not offer a --console-script (which this option is mutually exclusive with). Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--black-entry-point"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--entry-point"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--black-config=<file_option>",
          "config_key": "config",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--black-config=<file_option>"],
          "env_var": "PANTS_BLACK_CONFIG",
          "help": "Path to a TOML config file understood by Black (https://github.com/psf/black#configuration-format).\n\nSetting this option will disable `[black].config_discovery`. Use this option if the config is located in a non-standard location.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--black-config"],
          "typ": "file_option",
          "unscoped_cmd_line_args": ["--config"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]black-config-discovery",
          "config_key": "config_discovery",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]black-config-discovery"],
          "env_var": "PANTS_BLACK_CONFIG_DISCOVERY",
          "help": "If true, Pants will include any relevant pyproject.toml config files during runs.\n\nUse `[black].config` instead if your config is in a non-standard location.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--black-config-discovery",
            "--no-black-config-discovery"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--config-discovery",
            "--no-config-discovery"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]black-skip",
          "config_key": "skip",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]black-skip"],
          "env_var": "PANTS_BLACK_SKIP",
          "help": "Don't use Black when running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 fmt` and `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 lint`",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--black-skip", "--no-black-skip"],
          "typ": "bool",
          "unscoped_cmd_line_args": ["--skip", "--no-skip"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--black-args=\"[<shell_str>, <shell_str>, ...]\"",
          "config_key": "args",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--black-args=\"[<shell_str>, <shell_str>, ...]\""],
          "env_var": "PANTS_BLACK_ARGS",
          "help": "Arguments to pass directly to Black, e.g. `--black-args=\"--target-version=py37 --quiet\"`",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--black-args"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--args"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "description": "The Black Python code formatter (https://black.readthedocs.io/).",
      "is_goal": false,
      "scope": "black"
    },
    "changed": {
      "advanced": [],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--changed-since=<str>",
          "config_key": "since",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--changed-since=<str>"],
          "env_var": "PANTS_CHANGED_SINCE",
          "help": "Calculate changes since this Git spec (commit range/SHA/ref).",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--changed-since"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--since"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--changed-diffspec=<str>",
          "config_key": "diffspec",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--changed-diffspec=<str>"],
          "env_var": "PANTS_CHANGED_DIFFSPEC",
          "help": "Calculate changes contained within a given Git spec (commit range/SHA/ref).",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--changed-diffspec"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--diffspec"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": ["none", "direct", "transitive"],
          "comma_separated_choices": "none, direct, transitive",
          "comma_separated_display_args": "--changed-dependees=<DependeesOption>",
          "config_key": "dependees",
          "default": "none",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--changed-dependees=<DependeesOption>"],
          "env_var": "PANTS_CHANGED_DEPENDEES",
          "help": "Include direct or transitive dependees of changed targets.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--changed-dependees"],
          "typ": "DependeesOption",
          "unscoped_cmd_line_args": ["--dependees"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "none"
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "description": "Tell Pants to detect what files and targets have changed from Git.\n\nSee https://www.pantsbuild.org/v2.7/docs/advanced-target-selection.",
      "is_goal": false,
      "scope": "changed"
    },
    "count-loc": {
      "advanced": [],
      "basic": [],
      "deprecated": [],
      "description": "Count lines of code.",
      "is_goal": true,
      "scope": "count-loc"
    },
    "coverage-py": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--coverage-py-version=<str>",
          "config_key": "version",
          "default": "coverage[toml]>=5.5,<5.6",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--coverage-py-version=<str>"],
          "env_var": "PANTS_COVERAGE_PY_VERSION",
          "help": "Requirement string for the tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--coverage-py-version"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--version"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "coverage[toml]>=5.5,<5.6"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--coverage-py-extra-requirements=\"['<str>', '<str>', ...]\"",
          "config_key": "extra_requirements",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--coverage-py-extra-requirements=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_COVERAGE_PY_EXTRA_REQUIREMENTS",
          "help": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--coverage-py-extra-requirements"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--extra-requirements"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--coverage-py-interpreter-constraints=\"['<str>', '<str>', ...]\"",
          "config_key": "interpreter_constraints",
          "default": ["CPython>=3.6,<4"],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--coverage-py-interpreter-constraints=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_COVERAGE_PY_INTERPRETER_CONSTRAINTS",
          "help": "Python interpreter constraints for this tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--coverage-py-interpreter-constraints"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--interpreter-constraints"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": ["CPython>=3.6,<4"]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--coverage-py-lockfile=<str>",
          "config_key": "lockfile",
          "default": "<default>",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--coverage-py-lockfile=<str>"],
          "env_var": "PANTS_COVERAGE_PY_LOCKFILE",
          "help": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python-setup].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.7.2/src/python/pants/backend/python/subsystems/coverage_py_lockfile.txt for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `./pants generate-lockfiles --resolve=coverage-py`.\n\nLockfile generation currently does not wire up the `[python-repos]` options. If lockfile generation fails, you can manually generate a lockfile, such as by using pip-compile or `pip freeze`. Set this option to the path to your manually generated lockfile. When manually maintaining lockfiles, set `[python-setup].invalid_lockfile_behavior = 'ignore'`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--coverage-py-lockfile"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--lockfile"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "<default>"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--coverage-py-console-script=<str>",
          "config_key": "console_script",
          "default": "coverage",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--coverage-py-console-script=<str>"],
          "env_var": "PANTS_COVERAGE_PY_CONSOLE_SCRIPT",
          "help": "The console script for the tool. Using this option is generally preferable to (and mutually exclusive with) specifying an --entry-point since console script names have a higher expectation of staying stable across releases of the tool. Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--coverage-py-console-script"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--console-script"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "coverage"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--coverage-py-entry-point=<str>",
          "config_key": "entry_point",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--coverage-py-entry-point=<str>"],
          "env_var": "PANTS_COVERAGE_PY_ENTRY_POINT",
          "help": "The entry point for the tool. Generally you only want to use this option if the tool does not offer a --console-script (which this option is mutually exclusive with). Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--coverage-py-entry-point"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--entry-point"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--coverage-py-output-dir=<str>",
          "config_key": "output_dir",
          "default": "dist/coverage/python",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--coverage-py-output-dir=<str>"],
          "env_var": "PANTS_COVERAGE_PY_OUTPUT_DIR",
          "help": "Path to write the Pytest Coverage report to. Must be relative to build root.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--coverage-py-output-dir"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--output-dir"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "dist/coverage/python"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--coverage-py-config=<file_option>",
          "config_key": "config",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--coverage-py-config=<file_option>"],
          "env_var": "PANTS_COVERAGE_PY_CONFIG",
          "help": "Path to an INI or TOML config file understood by coverage.py (https://coverage.readthedocs.io/en/stable/config.html).\n\nSetting this option will disable `[coverage-py].config_discovery`. Use this option if the config is located in a non-standard location.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--coverage-py-config"],
          "typ": "file_option",
          "unscoped_cmd_line_args": ["--config"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]coverage-py-config-discovery",
          "config_key": "config_discovery",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]coverage-py-config-discovery"],
          "env_var": "PANTS_COVERAGE_PY_CONFIG_DISCOVERY",
          "help": "If true, Pants will include any relevant config files during runs (`.coveragerc`, `setup.cfg`, `tox.ini`, and `pyproject.toml`).\n\nUse `[coverage-py].config` instead if your config is in a non-standard location.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--coverage-py-config-discovery",
            "--no-coverage-py-config-discovery"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--config-discovery",
            "--no-config-discovery"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--coverage-py-filter=\"['<str>', '<str>', ...]\"",
          "config_key": "filter",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--coverage-py-filter=\"['<str>', '<str>', ...]\""],
          "env_var": "PANTS_COVERAGE_PY_FILTER",
          "help": "A list of Python modules or filesystem paths to use in the coverage report, e.g. `['helloworld_test', 'helloworld/util/dirutil'].\n\nBoth modules and directory paths are recursive: any submodules or child paths, respectively, will be included.\n\nIf you leave this off, the coverage report will include every file in the transitive closure of the address/file arguments; for example, `test ::` will include every Python file in your project, whereas `test project/app_test.py` will include `app_test.py` and any of its transitive dependencies.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--coverage-py-filter"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--filter"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              }
            ]
          }
        },
        {
          "choices": ["console", "xml", "html", "raw", "json"],
          "comma_separated_choices": "console, xml, html, raw, json",
          "comma_separated_display_args": "--coverage-py-report=\"[<CoverageReportType>, <CoverageReportType>, ...]\"",
          "config_key": "report",
          "default": ["console"],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--coverage-py-report=\"[<CoverageReportType>, <CoverageReportType>, ...]\""
          ],
          "env_var": "PANTS_COVERAGE_PY_REPORT",
          "help": "Which coverage report type(s) to emit.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--coverage-py-report"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--report"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": ["console"]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]coverage-py-global-report",
          "config_key": "global_report",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]coverage-py-global-report"],
          "env_var": "PANTS_COVERAGE_PY_GLOBAL_REPORT",
          "help": "If true, Pants will generate a global coverage report.\n\nThe global report will include all Python source files in the workspace and not just those depended on by the tests that were run.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--coverage-py-global-report",
            "--no-coverage-py-global-report"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": ["--global-report", "--no-global-report"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "description": "Configuration for Python test coverage measurement.",
      "is_goal": false,
      "scope": "coverage-py"
    },
    "dependees": {
      "advanced": [],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--dependees-output-file=<path>",
          "config_key": "output_file",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--dependees-output-file=<path>"],
          "env_var": "PANTS_DEPENDEES_OUTPUT_FILE",
          "help": "Output the goal's stdout to this file. If unspecified, outputs to stdout.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--dependees-output-file"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--output-file"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--dependees-sep=<separator>",
          "config_key": "sep",
          "default": "\\n",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--dependees-sep=<separator>"],
          "env_var": "PANTS_DEPENDEES_SEP",
          "help": "String to use to separate lines in line-oriented output.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--dependees-sep"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--sep"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "\\n"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]dependees-transitive",
          "config_key": "transitive",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]dependees-transitive"],
          "env_var": "PANTS_DEPENDEES_TRANSITIVE",
          "help": "List all transitive dependees, instead of only direct dependees.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--dependees-transitive",
            "--no-dependees-transitive"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": ["--transitive", "--no-transitive"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]dependees-closed",
          "config_key": "closed",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]dependees-closed"],
          "env_var": "PANTS_DEPENDEES_CLOSED",
          "help": "Include the input targets in the output, along with the dependees.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--dependees-closed",
            "--no-dependees-closed"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": ["--closed", "--no-closed"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": ["text", "json"],
          "comma_separated_choices": "text, json",
          "comma_separated_display_args": "--dependees-output-format=<DependeesOutputFormat>",
          "config_key": "output_format",
          "default": "text",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--dependees-output-format=<DependeesOutputFormat>"],
          "env_var": "PANTS_DEPENDEES_OUTPUT_FORMAT",
          "help": "Use `text` for a flattened list of target addresses; use `json` for each key to be the address of one of the specified targets, with its value being a list of that target's dependees, e.g. `{':example': [':dep1', ':dep2']}`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--dependees-output-format"],
          "typ": "DependeesOutputFormat",
          "unscoped_cmd_line_args": ["--output-format"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "text"
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "description": "List all targets that depend on any of the input files/targets.",
      "is_goal": true,
      "scope": "dependees"
    },
    "dependencies": {
      "advanced": [],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--dependencies-output-file=<path>",
          "config_key": "output_file",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--dependencies-output-file=<path>"],
          "env_var": "PANTS_DEPENDENCIES_OUTPUT_FILE",
          "help": "Output the goal's stdout to this file. If unspecified, outputs to stdout.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--dependencies-output-file"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--output-file"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--dependencies-sep=<separator>",
          "config_key": "sep",
          "default": "\\n",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--dependencies-sep=<separator>"],
          "env_var": "PANTS_DEPENDENCIES_SEP",
          "help": "String to use to separate lines in line-oriented output.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--dependencies-sep"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--sep"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "\\n"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]dependencies-transitive",
          "config_key": "transitive",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]dependencies-transitive"],
          "env_var": "PANTS_DEPENDENCIES_TRANSITIVE",
          "help": "List all transitive dependencies. If unspecified, list direct dependencies only.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--dependencies-transitive",
            "--no-dependencies-transitive"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": ["--transitive", "--no-transitive"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": ["source", "3rdparty", "source-and-3rdparty"],
          "comma_separated_choices": "source, 3rdparty, source-and-3rdparty",
          "comma_separated_display_args": "--dependencies-type=<DependencyType>",
          "config_key": "type",
          "default": "source",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--dependencies-type=<DependencyType>"],
          "env_var": "PANTS_DEPENDENCIES_TYPE",
          "help": "Which types of dependencies to list, where `source` means source code dependencies and `3rdparty` means third-party requirement strings.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--dependencies-type"],
          "typ": "DependencyType",
          "unscoped_cmd_line_args": ["--type"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "source"
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "description": "List the dependencies of the input files/targets.",
      "is_goal": true,
      "scope": "dependencies"
    },
    "docformatter": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--docformatter-version=<str>",
          "config_key": "version",
          "default": "docformatter>=1.4,<1.5",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--docformatter-version=<str>"],
          "env_var": "PANTS_DOCFORMATTER_VERSION",
          "help": "Requirement string for the tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--docformatter-version"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--version"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "docformatter>=1.4,<1.5"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--docformatter-extra-requirements=\"['<str>', '<str>', ...]\"",
          "config_key": "extra_requirements",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--docformatter-extra-requirements=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_DOCFORMATTER_EXTRA_REQUIREMENTS",
          "help": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--docformatter-extra-requirements"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--extra-requirements"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--docformatter-interpreter-constraints=\"['<str>', '<str>', ...]\"",
          "config_key": "interpreter_constraints",
          "default": ["CPython>=3.6"],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--docformatter-interpreter-constraints=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_DOCFORMATTER_INTERPRETER_CONSTRAINTS",
          "help": "Python interpreter constraints for this tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--docformatter-interpreter-constraints"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--interpreter-constraints"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": ["CPython>=3.6"]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--docformatter-lockfile=<str>",
          "config_key": "lockfile",
          "default": "<default>",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--docformatter-lockfile=<str>"],
          "env_var": "PANTS_DOCFORMATTER_LOCKFILE",
          "help": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python-setup].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.7.2/src/python/pants/backend/python/lint/docformatter/lockfile.txt for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `./pants generate-lockfiles --resolve=docformatter`.\n\nLockfile generation currently does not wire up the `[python-repos]` options. If lockfile generation fails, you can manually generate a lockfile, such as by using pip-compile or `pip freeze`. Set this option to the path to your manually generated lockfile. When manually maintaining lockfiles, set `[python-setup].invalid_lockfile_behavior = 'ignore'`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--docformatter-lockfile"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--lockfile"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "<default>"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--docformatter-console-script=<str>",
          "config_key": "console_script",
          "default": "docformatter",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--docformatter-console-script=<str>"],
          "env_var": "PANTS_DOCFORMATTER_CONSOLE_SCRIPT",
          "help": "The console script for the tool. Using this option is generally preferable to (and mutually exclusive with) specifying an --entry-point since console script names have a higher expectation of staying stable across releases of the tool. Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--docformatter-console-script"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--console-script"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "docformatter"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--docformatter-entry-point=<str>",
          "config_key": "entry_point",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--docformatter-entry-point=<str>"],
          "env_var": "PANTS_DOCFORMATTER_ENTRY_POINT",
          "help": "The entry point for the tool. Generally you only want to use this option if the tool does not offer a --console-script (which this option is mutually exclusive with). Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--docformatter-entry-point"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--entry-point"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]docformatter-skip",
          "config_key": "skip",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]docformatter-skip"],
          "env_var": "PANTS_DOCFORMATTER_SKIP",
          "help": "Don't use docformatter when running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 fmt` and `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 lint`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--docformatter-skip",
            "--no-docformatter-skip"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": ["--skip", "--no-skip"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--docformatter-args=\"[<shell_str>, <shell_str>, ...]\"",
          "config_key": "args",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--docformatter-args=\"[<shell_str>, <shell_str>, ...]\""
          ],
          "env_var": "PANTS_DOCFORMATTER_ARGS",
          "help": "Arguments to pass directly to docformatter, e.g. `--docformatter-args=\"--wrap-summaries=100 --pre-summary-newline\"`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--docformatter-args"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--args"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "description": "The Python docformatter tool (https://github.com/myint/docformatter).",
      "is_goal": false,
      "scope": "docformatter"
    },
    "download-pex-bin": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--download-pex-bin-version=<str>",
          "config_key": "version",
          "default": "v2.1.54",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--download-pex-bin-version=<str>"],
          "env_var": "PANTS_DOWNLOAD_PEX_BIN_VERSION",
          "help": "Use this version of pex.\n\nSupported pex versions: >=2.1.51,<3.0",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--download-pex-bin-version"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--version"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "v2.1.54"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--download-pex-bin-known-versions=\"['<str>', '<str>', ...]\"",
          "config_key": "known_versions",
          "default": [
            "v2.1.54|macos_arm64|c892c82961f73e41aaafad3c692cfd51f6013bed2f7b408041be6c1b90d06451|3679238",
            "v2.1.54|macos_x86_64|c892c82961f73e41aaafad3c692cfd51f6013bed2f7b408041be6c1b90d06451|3679238",
            "v2.1.54|linux_x86_64|c892c82961f73e41aaafad3c692cfd51f6013bed2f7b408041be6c1b90d06451|3679238"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--download-pex-bin-known-versions=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_DOWNLOAD_PEX_BIN_KNOWN_VERSIONS",
          "help": "\nKnown versions to verify downloads against.\n\nEach element is a pipe-separated string of `version|platform|sha256|length`, where:\n\n  - `version` is the version string\n  - `platform` is one of [linux_x86_64,macos_arm64,macos_x86_64],\n  - `sha256` is the 64-character hex representation of the expected sha256\n    digest of the download file, as emitted by `shasum -a 256`\n  - `length` is the expected length of the download file in bytes, as emmitted by\n    `wc -c`\n\nE.g., `3.1.2|macos_x86_64|6d0f18cd84b918c7b3edd0203e75569e0c7caecb1367bbbe409b44e28514f5be|42813`.\n\nValues are space-stripped, so pipes can be indented for readability if necessary.\n",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--download-pex-bin-known-versions"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--known-versions"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "v2.1.54|macos_arm64|c892c82961f73e41aaafad3c692cfd51f6013bed2f7b408041be6c1b90d06451|3679238",
                  "v2.1.54|macos_x86_64|c892c82961f73e41aaafad3c692cfd51f6013bed2f7b408041be6c1b90d06451|3679238",
                  "v2.1.54|linux_x86_64|c892c82961f73e41aaafad3c692cfd51f6013bed2f7b408041be6c1b90d06451|3679238"
                ]
              }
            ]
          }
        },
        {
          "choices": ["error", "warning"],
          "comma_separated_choices": "error, warning",
          "comma_separated_display_args": "--download-pex-bin-use-unsupported-version=<UnsupportedVersionUsage>",
          "config_key": "use_unsupported_version",
          "default": "error",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--download-pex-bin-use-unsupported-version=<UnsupportedVersionUsage>"
          ],
          "env_var": "PANTS_DOWNLOAD_PEX_BIN_USE_UNSUPPORTED_VERSION",
          "help": "\nWhat action to take in case the requested version of pex is not supported.\n\nSupported pex versions: >=2.1.51,<3.0\n",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--download-pex-bin-use-unsupported-version"
          ],
          "typ": "UnsupportedVersionUsage",
          "unscoped_cmd_line_args": ["--use-unsupported-version"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "error"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--download-pex-bin-url-template=<str>",
          "config_key": "url_template",
          "default": "https://github.com/pantsbuild/pex/releases/download/{version}/pex",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--download-pex-bin-url-template=<str>"],
          "env_var": "PANTS_DOWNLOAD_PEX_BIN_URL_TEMPLATE",
          "help": "URL to download the tool, either as a single binary file or a compressed file (e.g. zip file). You can change this to point to your own hosted file, e.g. to work with proxies or for access via the filesystem through a file:// URL.\n\nUse `{version}` to have the value from --version substituted, and `{platform}` to have a value from --url-platform-mapping substituted in, depending on the current platform. For example, https://github.com/.../protoc-{version}-{platform}.zip.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--download-pex-bin-url-template"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--url-template"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "https://github.com/pantsbuild/pex/releases/download/{version}/pex"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--download-pex-bin-url-platform-mapping=\"{'key1': val1, 'key2': val2, ...}\"",
          "config_key": "url_platform_mapping",
          "default": {},
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--download-pex-bin-url-platform-mapping=\"{'key1': val1, 'key2': val2, ...}\""
          ],
          "env_var": "PANTS_DOWNLOAD_PEX_BIN_URL_PLATFORM_MAPPING",
          "help": "A dictionary mapping platforms to strings to be used when generating the URL to download the tool.\n\nIn --url-template, anytime the `{platform}` string is used, Pants will determine the current platform, and substitute `{platform}` with the respective value from your dictionary.\n\nFor example, if you define `{\"macos_x86_64\": \"apple-darwin\", \"linux_x86_64\": \"unknown-linux\"}, and run Pants on Linux with an intel architecture, then `{platform}` will be substituted in the --url-template option with unknown-linux.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--download-pex-bin-url-platform-mapping"],
          "typ": "dict",
          "unscoped_cmd_line_args": ["--url-platform-mapping"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": {}
              }
            ]
          }
        }
      ],
      "basic": [],
      "deprecated": [],
      "description": "The PEX (Python EXecutable) tool (https://github.com/pantsbuild/pex).",
      "is_goal": false,
      "scope": "download-pex-bin"
    },
    "export-codegen": {
      "advanced": [],
      "basic": [],
      "deprecated": [],
      "description": "Write generated files to `dist/codegen` for use outside of Pants.",
      "is_goal": true,
      "scope": "export-codegen"
    },
    "filedeps": {
      "advanced": [],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--filedeps-output-file=<path>",
          "config_key": "output_file",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--filedeps-output-file=<path>"],
          "env_var": "PANTS_FILEDEPS_OUTPUT_FILE",
          "help": "Output the goal's stdout to this file. If unspecified, outputs to stdout.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--filedeps-output-file"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--output-file"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--filedeps-sep=<separator>",
          "config_key": "sep",
          "default": "\\n",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--filedeps-sep=<separator>"],
          "env_var": "PANTS_FILEDEPS_SEP",
          "help": "String to use to separate lines in line-oriented output.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--filedeps-sep"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--sep"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "\\n"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]filedeps-absolute",
          "config_key": "absolute",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]filedeps-absolute"],
          "env_var": "PANTS_FILEDEPS_ABSOLUTE",
          "help": "If True, output with absolute path. If unspecified, output with path relative to the build root.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--filedeps-absolute",
            "--no-filedeps-absolute"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": ["--absolute", "--no-absolute"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]filedeps-globs",
          "config_key": "globs",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]filedeps-globs"],
          "env_var": "PANTS_FILEDEPS_GLOBS",
          "help": "Instead of outputting filenames, output the original globs used in the BUILD file. This will not include exclude globs (i.e. globs that start with `!`).",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--filedeps-globs", "--no-filedeps-globs"],
          "typ": "bool",
          "unscoped_cmd_line_args": ["--globs", "--no-globs"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]filedeps-transitive",
          "config_key": "transitive",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]filedeps-transitive"],
          "env_var": "PANTS_FILEDEPS_TRANSITIVE",
          "help": "If True, list files from all dependencies, including transitive dependencies. If unspecified, only list files from the target.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--filedeps-transitive",
            "--no-filedeps-transitive"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": ["--transitive", "--no-transitive"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "description": "List all source and BUILD files a target depends on.",
      "is_goal": true,
      "scope": "filedeps"
    },
    "filter": {
      "advanced": [],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--filter-output-file=<path>",
          "config_key": "output_file",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--filter-output-file=<path>"],
          "env_var": "PANTS_FILTER_OUTPUT_FILE",
          "help": "Output the goal's stdout to this file. If unspecified, outputs to stdout.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--filter-output-file"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--output-file"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--filter-sep=<separator>",
          "config_key": "sep",
          "default": "\\n",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--filter-sep=<separator>"],
          "env_var": "PANTS_FILTER_SEP",
          "help": "String to use to separate lines in line-oriented output.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--filter-sep"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--sep"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "\\n"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--filter-target-type=\"[[+-]type1,type2,..., [+-]type1,type2,..., ...]\"",
          "config_key": "target_type",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--filter-target-type=\"[[+-]type1,type2,..., [+-]type1,type2,..., ...]\""
          ],
          "env_var": "PANTS_FILTER_TARGET_TYPE",
          "help": "Filter on these target types, e.g. `resources` or `python_library`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--filter-target-type"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--target-type"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              }
            ]
          }
        },
        {
          "choices": ["all", "file", "BUILD"],
          "comma_separated_choices": "all, file, BUILD",
          "comma_separated_display_args": "--filter-granularity=<TargetGranularity>",
          "config_key": "granularity",
          "default": "all",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--filter-granularity=<TargetGranularity>"],
          "env_var": "PANTS_FILTER_GRANULARITY",
          "help": "Filter to rendering only targets declared in BUILD files, only file-level targets, or all targets.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--filter-granularity"],
          "typ": "TargetGranularity",
          "unscoped_cmd_line_args": ["--granularity"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "all"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--filter-address-regex=\"[[+-]regex1,regex2,..., [+-]regex1,regex2,..., ...]\"",
          "config_key": "address_regex",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--filter-address-regex=\"[[+-]regex1,regex2,..., [+-]regex1,regex2,..., ...]\""
          ],
          "env_var": "PANTS_FILTER_ADDRESS_REGEX",
          "help": "Filter on target addresses matching these regexes.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--filter-address-regex"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--address-regex"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--filter-tag-regex=\"[[+-]regex1,regex2,..., [+-]regex1,regex2,..., ...]\"",
          "config_key": "tag_regex",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--filter-tag-regex=\"[[+-]regex1,regex2,..., [+-]regex1,regex2,..., ...]\""
          ],
          "env_var": "PANTS_FILTER_TAG_REGEX",
          "help": "Filter on targets with tags matching these regexes.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--filter-tag-regex"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--tag-regex"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "description": "Filter the input targets based on various criteria.\n\nMost of the filtering options below are comma-separated lists of filtering criteria, with an implied logical OR between them, so that a target passes the filter if it matches any of the criteria in the list. A '-' prefix inverts the sense of the entire comma-separated list, so that a target passes the filter only if it matches none of the criteria in the list.\n\nEach of the filtering options may be specified multiple times, with an implied logical AND between them.",
      "is_goal": true,
      "scope": "filter"
    },
    "flake8": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--flake8-version=<str>",
          "config_key": "version",
          "default": "flake8>=3.9.2,<4.0",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--flake8-version=<str>"],
          "env_var": "PANTS_FLAKE8_VERSION",
          "help": "Requirement string for the tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--flake8-version"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--version"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "flake8>=3.9.2,<4.0"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--flake8-extra-requirements=\"['<str>', '<str>', ...]\"",
          "config_key": "extra_requirements",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--flake8-extra-requirements=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_FLAKE8_EXTRA_REQUIREMENTS",
          "help": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--flake8-extra-requirements"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--extra-requirements"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--flake8-lockfile=<str>",
          "config_key": "lockfile",
          "default": "<default>",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--flake8-lockfile=<str>"],
          "env_var": "PANTS_FLAKE8_LOCKFILE",
          "help": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python-setup].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.7.2/src/python/pants/backend/python/lint/flake8/lockfile.txt for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `./pants generate-lockfiles --resolve=flake8`.\n\nLockfile generation currently does not wire up the `[python-repos]` options. If lockfile generation fails, you can manually generate a lockfile, such as by using pip-compile or `pip freeze`. Set this option to the path to your manually generated lockfile. When manually maintaining lockfiles, set `[python-setup].invalid_lockfile_behavior = 'ignore'`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--flake8-lockfile"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--lockfile"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "<default>"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--flake8-console-script=<str>",
          "config_key": "console_script",
          "default": "flake8",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--flake8-console-script=<str>"],
          "env_var": "PANTS_FLAKE8_CONSOLE_SCRIPT",
          "help": "The console script for the tool. Using this option is generally preferable to (and mutually exclusive with) specifying an --entry-point since console script names have a higher expectation of staying stable across releases of the tool. Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--flake8-console-script"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--console-script"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "flake8"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--flake8-entry-point=<str>",
          "config_key": "entry_point",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--flake8-entry-point=<str>"],
          "env_var": "PANTS_FLAKE8_ENTRY_POINT",
          "help": "The entry point for the tool. Generally you only want to use this option if the tool does not offer a --console-script (which this option is mutually exclusive with). Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--flake8-entry-point"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--entry-point"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--flake8-config=<file_option>",
          "config_key": "config",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--flake8-config=<file_option>"],
          "env_var": "PANTS_FLAKE8_CONFIG",
          "help": "Path to an INI config file understood by Flake8 (https://flake8.pycqa.org/en/latest/user/configuration.html).\n\nSetting this option will disable `[flake8].config_discovery`. Use this option if the config is located in a non-standard location.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--flake8-config"],
          "typ": "file_option",
          "unscoped_cmd_line_args": ["--config"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]flake8-config-discovery",
          "config_key": "config_discovery",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]flake8-config-discovery"],
          "env_var": "PANTS_FLAKE8_CONFIG_DISCOVERY",
          "help": "If true, Pants will include any relevant config files during runs (`.flake8`, `flake8`, `setup.cfg`, and `tox.ini`).\n\nUse `[flake8].config` instead if your config is in a non-standard location.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--flake8-config-discovery",
            "--no-flake8-config-discovery"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--config-discovery",
            "--no-config-discovery"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]flake8-skip",
          "config_key": "skip",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]flake8-skip"],
          "env_var": "PANTS_FLAKE8_SKIP",
          "help": "Don't use Flake8 when running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 lint`",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--flake8-skip", "--no-flake8-skip"],
          "typ": "bool",
          "unscoped_cmd_line_args": ["--skip", "--no-skip"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--flake8-args=\"[<shell_str>, <shell_str>, ...]\"",
          "config_key": "args",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--flake8-args=\"[<shell_str>, <shell_str>, ...]\""],
          "env_var": "PANTS_FLAKE8_ARGS",
          "help": "Arguments to pass directly to Flake8, e.g. `--flake8-args=\"--ignore E123,W456 --enable-extensions H111\"`",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--flake8-args"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--args"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "description": "The Flake8 Python linter (https://flake8.pycqa.org/).",
      "is_goal": false,
      "scope": "flake8"
    },
    "fmt": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]fmt-per-file-caching",
          "config_key": "per_file_caching",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]fmt-per-file-caching"],
          "env_var": "PANTS_FMT_PER_FILE_CACHING",
          "help": "Rather than formatting all files in a single batch, format each file as a separate process.\n\nWhy do this? You'll get many more cache hits. Why not do this? Formatters both have substantial startup overhead and are cheap to add one additional file to the run. On a cold cache, it is much faster to use `--no-per-file-caching`.\n\nWe only recommend using `--per-file-caching` if you are using a remote cache or if you have benchmarked that this option will be faster than `--no-per-file-caching` for your use case.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--fmt-per-file-caching",
            "--no-fmt-per-file-caching"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--per-file-caching",
            "--no-per-file-caching"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        }
      ],
      "basic": [],
      "deprecated": [],
      "description": "Autoformat source code.",
      "is_goal": true,
      "scope": "fmt"
    },
    "generate-lockfiles": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--generate-lockfiles-custom-command=<str>",
          "config_key": "custom_command",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--generate-lockfiles-custom-command=<str>"],
          "env_var": "PANTS_GENERATE_LOCKFILES_CUSTOM_COMMAND",
          "help": "If set, lockfile headers will say to run this command to regenerate the lockfile, rather than running `./pants generate-lockfiles --resolve=<name>` like normal.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--generate-lockfiles-custom-command"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--custom-command"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--generate-lockfiles-resolve=\"['<str>', '<str>', ...]\"",
          "config_key": "resolve",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--generate-lockfiles-resolve=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_GENERATE_LOCKFILES_RESOLVE",
          "help": "Only generate lockfiles for the specified resolve(s).\n\nFor now, resolves are the options scope for each Python tool that supports lockfiles, such as `black`, `pytest`, and `mypy-protobuf`. For example, you can run `./pants generate-lockfiles --resolve=black --resolve=pytest` to only generate the lockfile for those two tools.\n\nIf you specify an invalid resolve name, like 'fake', Pants will output all possible values.\n\nIf not specified, Pants will generate for all resolves.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--generate-lockfiles-resolve"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--resolve"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "description": "Generate lockfiles for Python third-party dependencies.",
      "is_goal": true,
      "scope": "generate-lockfiles"
    },
    "generate-user-lockfile": {
      "advanced": [],
      "basic": [],
      "deprecated": [],
      "description": "Generate a lockfile for Python user requirements (experimental).",
      "is_goal": true,
      "scope": "generate-user-lockfile"
    },
    "grpc-python-plugin": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--grpc-python-plugin-version=<str>",
          "config_key": "version",
          "default": "1.32.0",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--grpc-python-plugin-version=<str>"],
          "env_var": "PANTS_GRPC_PYTHON_PLUGIN_VERSION",
          "help": "Use this version of grpcpythonplugin.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--grpc-python-plugin-version"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--version"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "1.32.0"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--grpc-python-plugin-known-versions=\"['<str>', '<str>', ...]\"",
          "config_key": "known_versions",
          "default": [
            "1.32.0|macos_arm64 |b2db586656463841aa2fd4aab34fb6bd3ef887b522d80e4f2f292146c357f533|6215304",
            "1.32.0|macos_x86_64|b2db586656463841aa2fd4aab34fb6bd3ef887b522d80e4f2f292146c357f533|6215304",
            "1.32.0|linux_x86_64|1af99df9bf733c17a75cbe379f3f9d9ff1627d8a8035ea057c3c78575afe1687|4965728"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--grpc-python-plugin-known-versions=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_GRPC_PYTHON_PLUGIN_KNOWN_VERSIONS",
          "help": "\nKnown versions to verify downloads against.\n\nEach element is a pipe-separated string of `version|platform|sha256|length`, where:\n\n  - `version` is the version string\n  - `platform` is one of [linux_x86_64,macos_arm64,macos_x86_64],\n  - `sha256` is the 64-character hex representation of the expected sha256\n    digest of the download file, as emitted by `shasum -a 256`\n  - `length` is the expected length of the download file in bytes, as emmitted by\n    `wc -c`\n\nE.g., `3.1.2|macos_x86_64|6d0f18cd84b918c7b3edd0203e75569e0c7caecb1367bbbe409b44e28514f5be|42813`.\n\nValues are space-stripped, so pipes can be indented for readability if necessary.\n",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--grpc-python-plugin-known-versions"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--known-versions"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "1.32.0|macos_arm64 |b2db586656463841aa2fd4aab34fb6bd3ef887b522d80e4f2f292146c357f533|6215304",
                  "1.32.0|macos_x86_64|b2db586656463841aa2fd4aab34fb6bd3ef887b522d80e4f2f292146c357f533|6215304",
                  "1.32.0|linux_x86_64|1af99df9bf733c17a75cbe379f3f9d9ff1627d8a8035ea057c3c78575afe1687|4965728"
                ]
              }
            ]
          }
        },
        {
          "choices": ["error", "warning"],
          "comma_separated_choices": "error, warning",
          "comma_separated_display_args": "--grpc-python-plugin-use-unsupported-version=<UnsupportedVersionUsage>",
          "config_key": "use_unsupported_version",
          "default": "error",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--grpc-python-plugin-use-unsupported-version=<UnsupportedVersionUsage>"
          ],
          "env_var": "PANTS_GRPC_PYTHON_PLUGIN_USE_UNSUPPORTED_VERSION",
          "help": "\nWhat action to take in case the requested version of grpcpythonplugin is not supported.\n\nSupported grpcpythonplugin versions: unspecified\n",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--grpc-python-plugin-use-unsupported-version"
          ],
          "typ": "UnsupportedVersionUsage",
          "unscoped_cmd_line_args": ["--use-unsupported-version"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "error"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--grpc-python-plugin-url-template=<str>",
          "config_key": "url_template",
          "default": "https://binaries.pantsbuild.org/bin/grpc_python_plugin/{version}/{platform}/x86_64/grpc_python_plugin",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--grpc-python-plugin-url-template=<str>"],
          "env_var": "PANTS_GRPC_PYTHON_PLUGIN_URL_TEMPLATE",
          "help": "URL to download the tool, either as a single binary file or a compressed file (e.g. zip file). You can change this to point to your own hosted file, e.g. to work with proxies or for access via the filesystem through a file:// URL.\n\nUse `{version}` to have the value from --version substituted, and `{platform}` to have a value from --url-platform-mapping substituted in, depending on the current platform. For example, https://github.com/.../protoc-{version}-{platform}.zip.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--grpc-python-plugin-url-template"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--url-template"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "https://binaries.pantsbuild.org/bin/grpc_python_plugin/{version}/{platform}/x86_64/grpc_python_plugin"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--grpc-python-plugin-url-platform-mapping=\"{'key1': val1, 'key2': val2, ...}\"",
          "config_key": "url_platform_mapping",
          "default": {
            "linux_x86_64": "linux",
            "macos_arm64": "macos",
            "macos_x86_64": "macos"
          },
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--grpc-python-plugin-url-platform-mapping=\"{'key1': val1, 'key2': val2, ...}\""
          ],
          "env_var": "PANTS_GRPC_PYTHON_PLUGIN_URL_PLATFORM_MAPPING",
          "help": "A dictionary mapping platforms to strings to be used when generating the URL to download the tool.\n\nIn --url-template, anytime the `{platform}` string is used, Pants will determine the current platform, and substitute `{platform}` with the respective value from your dictionary.\n\nFor example, if you define `{\"macos_x86_64\": \"apple-darwin\", \"linux_x86_64\": \"unknown-linux\"}, and run Pants on Linux with an intel architecture, then `{platform}` will be substituted in the --url-template option with unknown-linux.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--grpc-python-plugin-url-platform-mapping"],
          "typ": "dict",
          "unscoped_cmd_line_args": ["--url-platform-mapping"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": {}
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": {
                  "linux_x86_64": "linux",
                  "macos_arm64": "macos",
                  "macos_x86_64": "macos"
                }
              }
            ]
          }
        }
      ],
      "basic": [],
      "deprecated": [],
      "description": "The gRPC Protobuf plugin for Python.",
      "is_goal": false,
      "scope": "grpc-python-plugin"
    },
    "grpc_python_plugin": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--grpc_python_plugin-version=<str>",
          "config_key": "version",
          "default": "1.32.0",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--grpc_python_plugin-version=<str>"],
          "env_var": "PANTS_GRPC_PYTHON_PLUGIN_VERSION",
          "help": "Use this version of grpcpythonplugin.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--grpc_python_plugin-version"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--version"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "1.32.0"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--grpc_python_plugin-known-versions=\"['<str>', '<str>', ...]\"",
          "config_key": "known_versions",
          "default": [
            "1.32.0|macos_arm64 |b2db586656463841aa2fd4aab34fb6bd3ef887b522d80e4f2f292146c357f533|6215304",
            "1.32.0|macos_x86_64|b2db586656463841aa2fd4aab34fb6bd3ef887b522d80e4f2f292146c357f533|6215304",
            "1.32.0|linux_x86_64|1af99df9bf733c17a75cbe379f3f9d9ff1627d8a8035ea057c3c78575afe1687|4965728"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--grpc_python_plugin-known-versions=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_GRPC_PYTHON_PLUGIN_KNOWN_VERSIONS",
          "help": "\nKnown versions to verify downloads against.\n\nEach element is a pipe-separated string of `version|platform|sha256|length`, where:\n\n  - `version` is the version string\n  - `platform` is one of [linux_x86_64,macos_arm64,macos_x86_64],\n  - `sha256` is the 64-character hex representation of the expected sha256\n    digest of the download file, as emitted by `shasum -a 256`\n  - `length` is the expected length of the download file in bytes, as emmitted by\n    `wc -c`\n\nE.g., `3.1.2|macos_x86_64|6d0f18cd84b918c7b3edd0203e75569e0c7caecb1367bbbe409b44e28514f5be|42813`.\n\nValues are space-stripped, so pipes can be indented for readability if necessary.\n",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--grpc_python_plugin-known-versions"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--known-versions"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "1.32.0|macos_arm64 |b2db586656463841aa2fd4aab34fb6bd3ef887b522d80e4f2f292146c357f533|6215304",
                  "1.32.0|macos_x86_64|b2db586656463841aa2fd4aab34fb6bd3ef887b522d80e4f2f292146c357f533|6215304",
                  "1.32.0|linux_x86_64|1af99df9bf733c17a75cbe379f3f9d9ff1627d8a8035ea057c3c78575afe1687|4965728"
                ]
              }
            ]
          }
        },
        {
          "choices": ["error", "warning"],
          "comma_separated_choices": "error, warning",
          "comma_separated_display_args": "--grpc_python_plugin-use-unsupported-version=<UnsupportedVersionUsage>",
          "config_key": "use_unsupported_version",
          "default": "error",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--grpc_python_plugin-use-unsupported-version=<UnsupportedVersionUsage>"
          ],
          "env_var": "PANTS_GRPC_PYTHON_PLUGIN_USE_UNSUPPORTED_VERSION",
          "help": "\nWhat action to take in case the requested version of grpcpythonplugin is not supported.\n\nSupported grpcpythonplugin versions: unspecified\n",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--grpc_python_plugin-use-unsupported-version"
          ],
          "typ": "UnsupportedVersionUsage",
          "unscoped_cmd_line_args": ["--use-unsupported-version"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "error"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--grpc_python_plugin-url-template=<str>",
          "config_key": "url_template",
          "default": "https://binaries.pantsbuild.org/bin/grpc_python_plugin/{version}/{platform}/x86_64/grpc_python_plugin",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--grpc_python_plugin-url-template=<str>"],
          "env_var": "PANTS_GRPC_PYTHON_PLUGIN_URL_TEMPLATE",
          "help": "URL to download the tool, either as a single binary file or a compressed file (e.g. zip file). You can change this to point to your own hosted file, e.g. to work with proxies or for access via the filesystem through a file:// URL.\n\nUse `{version}` to have the value from --version substituted, and `{platform}` to have a value from --url-platform-mapping substituted in, depending on the current platform. For example, https://github.com/.../protoc-{version}-{platform}.zip.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--grpc_python_plugin-url-template"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--url-template"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "https://binaries.pantsbuild.org/bin/grpc_python_plugin/{version}/{platform}/x86_64/grpc_python_plugin"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--grpc_python_plugin-url-platform-mapping=\"{'key1': val1, 'key2': val2, ...}\"",
          "config_key": "url_platform_mapping",
          "default": {
            "linux_x86_64": "linux",
            "macos_arm64": "macos",
            "macos_x86_64": "macos"
          },
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--grpc_python_plugin-url-platform-mapping=\"{'key1': val1, 'key2': val2, ...}\""
          ],
          "env_var": "PANTS_GRPC_PYTHON_PLUGIN_URL_PLATFORM_MAPPING",
          "help": "A dictionary mapping platforms to strings to be used when generating the URL to download the tool.\n\nIn --url-template, anytime the `{platform}` string is used, Pants will determine the current platform, and substitute `{platform}` with the respective value from your dictionary.\n\nFor example, if you define `{\"macos_x86_64\": \"apple-darwin\", \"linux_x86_64\": \"unknown-linux\"}, and run Pants on Linux with an intel architecture, then `{platform}` will be substituted in the --url-template option with unknown-linux.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--grpc_python_plugin-url-platform-mapping"],
          "typ": "dict",
          "unscoped_cmd_line_args": ["--url-platform-mapping"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": {}
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": {
                  "linux_x86_64": "linux",
                  "macos_arm64": "macos",
                  "macos_x86_64": "macos"
                }
              }
            ]
          }
        }
      ],
      "basic": [],
      "deprecated": [],
      "description": "The gRPC Protobuf plugin for Python.",
      "is_goal": false,
      "scope": "grpc_python_plugin"
    },
    "ipython": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--ipython-version=<str>",
          "config_key": "version",
          "default": "ipython==7.16.1",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--ipython-version=<str>"],
          "env_var": "PANTS_IPYTHON_VERSION",
          "help": "Requirement string for the tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--ipython-version"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--version"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "ipython==7.16.1"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--ipython-extra-requirements=\"['<str>', '<str>', ...]\"",
          "config_key": "extra_requirements",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--ipython-extra-requirements=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_IPYTHON_EXTRA_REQUIREMENTS",
          "help": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--ipython-extra-requirements"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--extra-requirements"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--ipython-lockfile=<str>",
          "config_key": "lockfile",
          "default": "<default>",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--ipython-lockfile=<str>"],
          "env_var": "PANTS_IPYTHON_LOCKFILE",
          "help": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python-setup].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.7.2/src/python/pants/backend/python/subsystems/ipython_lockfile.txt for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `./pants generate-lockfiles --resolve=ipython`.\n\nLockfile generation currently does not wire up the `[python-repos]` options. If lockfile generation fails, you can manually generate a lockfile, such as by using pip-compile or `pip freeze`. Set this option to the path to your manually generated lockfile. When manually maintaining lockfiles, set `[python-setup].invalid_lockfile_behavior = 'ignore'`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--ipython-lockfile"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--lockfile"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "<default>"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--ipython-console-script=<str>",
          "config_key": "console_script",
          "default": "ipython",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--ipython-console-script=<str>"],
          "env_var": "PANTS_IPYTHON_CONSOLE_SCRIPT",
          "help": "The console script for the tool. Using this option is generally preferable to (and mutually exclusive with) specifying an --entry-point since console script names have a higher expectation of staying stable across releases of the tool. Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--ipython-console-script"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--console-script"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "ipython"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--ipython-entry-point=<str>",
          "config_key": "entry_point",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--ipython-entry-point=<str>"],
          "env_var": "PANTS_IPYTHON_ENTRY_POINT",
          "help": "The entry point for the tool. Generally you only want to use this option if the tool does not offer a --console-script (which this option is mutually exclusive with). Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--ipython-entry-point"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--entry-point"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]ipython-ignore-cwd",
          "config_key": "ignore_cwd",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]ipython-ignore-cwd"],
          "env_var": "PANTS_IPYTHON_IGNORE_CWD",
          "help": "Whether to tell IPython not to put the CWD on the import path.\n\nNormally you want this to be True, so that imports come from the hermetic environment Pants creates.\n\nHowever IPython<7.13.0 doesn't support this option, so if you're using an earlier version (e.g., because you have Python 2.7 code) then you will need to set this to False, and you may have issues with imports from your CWD shading the hermetic environment.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--ipython-ignore-cwd",
            "--no-ipython-ignore-cwd"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": ["--ignore-cwd", "--no-ignore-cwd"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        }
      ],
      "basic": [],
      "deprecated": [],
      "description": "The IPython enhanced REPL (https://ipython.org/).",
      "is_goal": false,
      "scope": "ipython"
    },
    "isort": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--isort-version=<str>",
          "config_key": "version",
          "default": "isort[pyproject,colors]>=5.5.1,<5.6",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--isort-version=<str>"],
          "env_var": "PANTS_ISORT_VERSION",
          "help": "Requirement string for the tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--isort-version"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--version"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "isort[pyproject,colors]>=5.5.1,<5.6"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--isort-extra-requirements=\"['<str>', '<str>', ...]\"",
          "config_key": "extra_requirements",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--isort-extra-requirements=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_ISORT_EXTRA_REQUIREMENTS",
          "help": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--isort-extra-requirements"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--extra-requirements"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--isort-interpreter-constraints=\"['<str>', '<str>', ...]\"",
          "config_key": "interpreter_constraints",
          "default": ["CPython>=3.6,<4"],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--isort-interpreter-constraints=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_ISORT_INTERPRETER_CONSTRAINTS",
          "help": "Python interpreter constraints for this tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--isort-interpreter-constraints"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--interpreter-constraints"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": ["CPython>=3.6,<4"]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--isort-lockfile=<str>",
          "config_key": "lockfile",
          "default": "<default>",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--isort-lockfile=<str>"],
          "env_var": "PANTS_ISORT_LOCKFILE",
          "help": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python-setup].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.7.2/src/python/pants/backend/python/lint/isort/lockfile.txt for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `./pants generate-lockfiles --resolve=isort`.\n\nLockfile generation currently does not wire up the `[python-repos]` options. If lockfile generation fails, you can manually generate a lockfile, such as by using pip-compile or `pip freeze`. Set this option to the path to your manually generated lockfile. When manually maintaining lockfiles, set `[python-setup].invalid_lockfile_behavior = 'ignore'`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--isort-lockfile"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--lockfile"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "<default>"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--isort-console-script=<str>",
          "config_key": "console_script",
          "default": "isort",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--isort-console-script=<str>"],
          "env_var": "PANTS_ISORT_CONSOLE_SCRIPT",
          "help": "The console script for the tool. Using this option is generally preferable to (and mutually exclusive with) specifying an --entry-point since console script names have a higher expectation of staying stable across releases of the tool. Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--isort-console-script"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--console-script"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "isort"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--isort-entry-point=<str>",
          "config_key": "entry_point",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--isort-entry-point=<str>"],
          "env_var": "PANTS_ISORT_ENTRY_POINT",
          "help": "The entry point for the tool. Generally you only want to use this option if the tool does not offer a --console-script (which this option is mutually exclusive with). Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--isort-entry-point"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--entry-point"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--isort-config=\"[<file_option>, <file_option>, ...]\"",
          "config_key": "config",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--isort-config=\"[<file_option>, <file_option>, ...]\""
          ],
          "env_var": "PANTS_ISORT_CONFIG",
          "help": "Path to config file understood by isort (https://pycqa.github.io/isort/docs/configuration/config_files/).\n\nSetting this option will disable `[isort].config_discovery`. Use this option if the config is located in a non-standard location.\n\nIf using isort 5+ and you specify only 1 config file, Pants will configure isort's argv to point to your config file.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--isort-config"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--config"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]isort-config-discovery",
          "config_key": "config_discovery",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]isort-config-discovery"],
          "env_var": "PANTS_ISORT_CONFIG_DISCOVERY",
          "help": "If true, Pants will include any relevant config files during runs (`.isort.cfg`, `pyproject.toml`, `setup.cfg`, `tox.ini` and `.editorconfig`).\n\nUse `[isort].config` instead if your config is in a non-standard location.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--isort-config-discovery",
            "--no-isort-config-discovery"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--config-discovery",
            "--no-config-discovery"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]isort-skip",
          "config_key": "skip",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]isort-skip"],
          "env_var": "PANTS_ISORT_SKIP",
          "help": "Don't use isort when running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 fmt` and `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 lint`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--isort-skip", "--no-isort-skip"],
          "typ": "bool",
          "unscoped_cmd_line_args": ["--skip", "--no-skip"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--isort-args=\"[<shell_str>, <shell_str>, ...]\"",
          "config_key": "args",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--isort-args=\"[<shell_str>, <shell_str>, ...]\""],
          "env_var": "PANTS_ISORT_ARGS",
          "help": "Arguments to pass directly to isort, e.g. `--isort-args=\"--case-sensitive --trailing-comma\"`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--isort-args"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--args"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "description": "The Python import sorter tool (https://timothycrosley.github.io/isort/).",
      "is_goal": false,
      "scope": "isort"
    },
    "lambdex": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--lambdex-version=<str>",
          "config_key": "version",
          "default": "lambdex==0.1.5",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--lambdex-version=<str>"],
          "env_var": "PANTS_LAMBDEX_VERSION",
          "help": "Requirement string for the tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--lambdex-version"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--version"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "lambdex==0.1.5"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--lambdex-extra-requirements=\"['<str>', '<str>', ...]\"",
          "config_key": "extra_requirements",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--lambdex-extra-requirements=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_LAMBDEX_EXTRA_REQUIREMENTS",
          "help": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--lambdex-extra-requirements"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--extra-requirements"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--lambdex-interpreter-constraints=\"['<str>', '<str>', ...]\"",
          "config_key": "interpreter_constraints",
          "default": ["CPython>=3.6,<3.10"],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--lambdex-interpreter-constraints=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_LAMBDEX_INTERPRETER_CONSTRAINTS",
          "help": "Python interpreter constraints for this tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--lambdex-interpreter-constraints"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--interpreter-constraints"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": ["CPython>=3.6,<3.10"]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--lambdex-lockfile=<str>",
          "config_key": "lockfile",
          "default": "<default>",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--lambdex-lockfile=<str>"],
          "env_var": "PANTS_LAMBDEX_LOCKFILE",
          "help": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python-setup].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.7.2/src/python/pants/backend/awslambda/python/lambdex_lockfile.txt for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `./pants generate-lockfiles --resolve=lambdex`.\n\nLockfile generation currently does not wire up the `[python-repos]` options. If lockfile generation fails, you can manually generate a lockfile, such as by using pip-compile or `pip freeze`. Set this option to the path to your manually generated lockfile. When manually maintaining lockfiles, set `[python-setup].invalid_lockfile_behavior = 'ignore'`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--lambdex-lockfile"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--lockfile"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "<default>"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--lambdex-console-script=<str>",
          "config_key": "console_script",
          "default": "lambdex",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--lambdex-console-script=<str>"],
          "env_var": "PANTS_LAMBDEX_CONSOLE_SCRIPT",
          "help": "The console script for the tool. Using this option is generally preferable to (and mutually exclusive with) specifying an --entry-point since console script names have a higher expectation of staying stable across releases of the tool. Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--lambdex-console-script"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--console-script"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "lambdex"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--lambdex-entry-point=<str>",
          "config_key": "entry_point",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--lambdex-entry-point=<str>"],
          "env_var": "PANTS_LAMBDEX_ENTRY_POINT",
          "help": "The entry point for the tool. Generally you only want to use this option if the tool does not offer a --console-script (which this option is mutually exclusive with). Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--lambdex-entry-point"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--entry-point"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        }
      ],
      "basic": [],
      "deprecated": [],
      "description": "A tool for turning .pex files into AWS Lambdas (https://github.com/wickman/lambdex).",
      "is_goal": false,
      "scope": "lambdex"
    },
    "lint": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]lint-per-file-caching",
          "config_key": "per_file_caching",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]lint-per-file-caching"],
          "env_var": "PANTS_LINT_PER_FILE_CACHING",
          "help": "Rather than linting all files in a single batch, lint each file as a separate process.\n\nWhy do this? You'll get many more cache hits. Why not do this? Linters both have substantial startup overhead and are cheap to add one additional file to the run. On a cold cache, it is much faster to use `--no-per-file-caching`.\n\nWe only recommend using `--per-file-caching` if you are using a remote cache or if you have benchmarked that this option will be faster than `--no-per-file-caching` for your use case.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--lint-per-file-caching",
            "--no-lint-per-file-caching"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--per-file-caching",
            "--no-per-file-caching"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        }
      ],
      "basic": [],
      "deprecated": [],
      "description": "Run all linters and/or formatters in check mode.",
      "is_goal": true,
      "scope": "lint"
    },
    "list": {
      "advanced": [],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--list-output-file=<path>",
          "config_key": "output_file",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--list-output-file=<path>"],
          "env_var": "PANTS_LIST_OUTPUT_FILE",
          "help": "Output the goal's stdout to this file. If unspecified, outputs to stdout.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--list-output-file"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--output-file"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--list-sep=<separator>",
          "config_key": "sep",
          "default": "\\n",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--list-sep=<separator>"],
          "env_var": "PANTS_LIST_SEP",
          "help": "String to use to separate lines in line-oriented output.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--list-sep"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--sep"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "\\n"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]list-provides",
          "config_key": "provides",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]list-provides"],
          "env_var": "PANTS_LIST_PROVIDES",
          "help": "List only targets that provide an artifact.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--list-provides", "--no-list-provides"],
          "typ": "bool",
          "unscoped_cmd_line_args": ["--provides", "--no-provides"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]list-documented",
          "config_key": "documented",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]list-documented"],
          "env_var": "PANTS_LIST_DOCUMENTED",
          "help": "Print only targets that are documented with a description.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--list-documented", "--no-list-documented"],
          "typ": "bool",
          "unscoped_cmd_line_args": ["--documented", "--no-documented"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "description": "Lists all targets matching the file or target arguments.",
      "is_goal": true,
      "scope": "list"
    },
    "mypy": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--mypy-version=<str>",
          "config_key": "version",
          "default": "mypy==0.910",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--mypy-version=<str>"],
          "env_var": "PANTS_MYPY_VERSION",
          "help": "Requirement string for the tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--mypy-version"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--version"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "mypy==0.910"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--mypy-extra-requirements=\"['<str>', '<str>', ...]\"",
          "config_key": "extra_requirements",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--mypy-extra-requirements=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_MYPY_EXTRA_REQUIREMENTS",
          "help": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--mypy-extra-requirements"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--extra-requirements"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--mypy-interpreter-constraints=\"['<str>', '<str>', ...]\"",
          "config_key": "interpreter_constraints",
          "default": ["CPython>=3.6"],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--mypy-interpreter-constraints=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_MYPY_INTERPRETER_CONSTRAINTS",
          "help": "Python interpreter constraints for this tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--mypy-interpreter-constraints"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--interpreter-constraints"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": ["CPython>=3.6"]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--mypy-lockfile=<str>",
          "config_key": "lockfile",
          "default": "<default>",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--mypy-lockfile=<str>"],
          "env_var": "PANTS_MYPY_LOCKFILE",
          "help": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python-setup].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.7.2/src/python/pants/backend/python/typecheck/mypy/lockfile.txt for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `./pants generate-lockfiles --resolve=mypy`.\n\nLockfile generation currently does not wire up the `[python-repos]` options. If lockfile generation fails, you can manually generate a lockfile, such as by using pip-compile or `pip freeze`. Set this option to the path to your manually generated lockfile. When manually maintaining lockfiles, set `[python-setup].invalid_lockfile_behavior = 'ignore'`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--mypy-lockfile"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--lockfile"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "<default>"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--mypy-console-script=<str>",
          "config_key": "console_script",
          "default": "mypy",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--mypy-console-script=<str>"],
          "env_var": "PANTS_MYPY_CONSOLE_SCRIPT",
          "help": "The console script for the tool. Using this option is generally preferable to (and mutually exclusive with) specifying an --entry-point since console script names have a higher expectation of staying stable across releases of the tool. Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--mypy-console-script"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--console-script"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "mypy"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--mypy-entry-point=<str>",
          "config_key": "entry_point",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--mypy-entry-point=<str>"],
          "env_var": "PANTS_MYPY_ENTRY_POINT",
          "help": "The entry point for the tool. Generally you only want to use this option if the tool does not offer a --console-script (which this option is mutually exclusive with). Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--mypy-entry-point"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--entry-point"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--mypy-config=<file_option>",
          "config_key": "config",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--mypy-config=<file_option>"],
          "env_var": "PANTS_MYPY_CONFIG",
          "help": "Path to a config file understood by MyPy (https://mypy.readthedocs.io/en/stable/config_file.html).\n\nSetting this option will disable `[mypy].config_discovery`. Use this option if the config is located in a non-standard location.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--mypy-config"],
          "typ": "file_option",
          "unscoped_cmd_line_args": ["--config"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]mypy-config-discovery",
          "config_key": "config_discovery",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]mypy-config-discovery"],
          "env_var": "PANTS_MYPY_CONFIG_DISCOVERY",
          "help": "If true, Pants will include any relevant config files during runs (`mypy.ini`, `.mypy.ini`, and `setup.cfg`).\n\nUse `[mypy].config` instead if your config is in a non-standard location.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--mypy-config-discovery",
            "--no-mypy-config-discovery"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--config-discovery",
            "--no-config-discovery"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--mypy-source-plugins=\"[<target_option>, <target_option>, ...]\"",
          "config_key": "source_plugins",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--mypy-source-plugins=\"[<target_option>, <target_option>, ...]\""
          ],
          "env_var": "PANTS_MYPY_SOURCE_PLUGINS",
          "help": "An optional list of `python_library` target addresses to load first-party plugins.\n\nYou must also set `plugins = path.to.module` in your `mypy.ini`, and set the `[mypy].config` option in your `pants.toml`.\n\nTo instead load third-party plugins, set the option `[mypy].extra_requirements` and set the `plugins` option in `mypy.ini`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--mypy-source-plugins"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--source-plugins"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--mypy-extra-type-stubs=\"['<str>', '<str>', ...]\"",
          "config_key": "extra_type_stubs",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--mypy-extra-type-stubs=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_MYPY_EXTRA_TYPE_STUBS",
          "help": "Extra type stub requirements to install when running MyPy.\n\nNormally, type stubs can be installed as typical requirements, such as putting them in `requirements.txt` or using a `python_requirement_library` target.Alternatively, you can use this option so that the dependencies are solely used when running MyPy and are not runtime dependencies.\n\nExpects a list of pip-style requirement strings, like `['types-requests==2.25.9']`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--mypy-extra-type-stubs"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--extra-type-stubs"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]mypy-skip",
          "config_key": "skip",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]mypy-skip"],
          "env_var": "PANTS_MYPY_SKIP",
          "help": "Don't use MyPy when running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 typecheck`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--mypy-skip", "--no-mypy-skip"],
          "typ": "bool",
          "unscoped_cmd_line_args": ["--skip", "--no-skip"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--mypy-args=\"[<shell_str>, <shell_str>, ...]\"",
          "config_key": "args",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--mypy-args=\"[<shell_str>, <shell_str>, ...]\""],
          "env_var": "PANTS_MYPY_ARGS",
          "help": "Arguments to pass directly to mypy, e.g. `--mypy-args=\"--python-version 3.7 --disallow-any-expr\"`",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--mypy-args"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--args"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "description": "The MyPy Python type checker (http://mypy-lang.org/).",
      "is_goal": false,
      "scope": "mypy"
    },
    "mypy-protobuf": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--mypy-protobuf-version=<str>",
          "config_key": "version",
          "default": "mypy-protobuf==2.4",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--mypy-protobuf-version=<str>"],
          "env_var": "PANTS_MYPY_PROTOBUF_VERSION",
          "help": "Requirement string for the tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--mypy-protobuf-version"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--version"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "mypy-protobuf==2.4"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--mypy-protobuf-extra-requirements=\"['<str>', '<str>', ...]\"",
          "config_key": "extra_requirements",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--mypy-protobuf-extra-requirements=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_MYPY_PROTOBUF_EXTRA_REQUIREMENTS",
          "help": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--mypy-protobuf-extra-requirements"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--extra-requirements"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--mypy-protobuf-interpreter-constraints=\"['<str>', '<str>', ...]\"",
          "config_key": "interpreter_constraints",
          "default": ["CPython>=3.6"],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--mypy-protobuf-interpreter-constraints=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_MYPY_PROTOBUF_INTERPRETER_CONSTRAINTS",
          "help": "Python interpreter constraints for this tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--mypy-protobuf-interpreter-constraints"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--interpreter-constraints"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": ["CPython>=3.6"]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--mypy-protobuf-lockfile=<str>",
          "config_key": "lockfile",
          "default": "<default>",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--mypy-protobuf-lockfile=<str>"],
          "env_var": "PANTS_MYPY_PROTOBUF_LOCKFILE",
          "help": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python-setup].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.7.2/src/python/pants/backend/codegen/protobuf/python/mypy_protobuf_lockfile.txt for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `./pants generate-lockfiles --resolve=mypy-protobuf`.\n\nLockfile generation currently does not wire up the `[python-repos]` options. If lockfile generation fails, you can manually generate a lockfile, such as by using pip-compile or `pip freeze`. Set this option to the path to your manually generated lockfile. When manually maintaining lockfiles, set `[python-setup].invalid_lockfile_behavior = 'ignore'`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--mypy-protobuf-lockfile"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--lockfile"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "<default>"
              }
            ]
          }
        }
      ],
      "basic": [],
      "deprecated": [],
      "description": "Configuration of the mypy-protobuf type stub generation plugin.",
      "is_goal": false,
      "scope": "mypy-protobuf"
    },
    "package": {
      "advanced": [],
      "basic": [],
      "deprecated": [],
      "description": "Create a distributable package.",
      "is_goal": true,
      "scope": "package"
    },
    "peek": {
      "advanced": [],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--peek-output-file=<path>",
          "config_key": "output_file",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--peek-output-file=<path>"],
          "env_var": "PANTS_PEEK_OUTPUT_FILE",
          "help": "Output the goal's stdout to this file. If unspecified, outputs to stdout.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--peek-output-file"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--output-file"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": ["raw", "json"],
          "comma_separated_choices": "raw, json",
          "comma_separated_display_args": "--peek-output=<OutputOptions>",
          "config_key": "output",
          "default": "json",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--peek-output=<OutputOptions>"],
          "env_var": "PANTS_PEEK_OUTPUT",
          "help": "Which output style peek should use: `json` will show each target as a seperate entry, whereas `raw` will simply show the original non-normalized BUILD files.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--peek-output"],
          "typ": "OutputOptions",
          "unscoped_cmd_line_args": ["--output"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "json"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]peek-exclude-defaults",
          "config_key": "exclude_defaults",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]peek-exclude-defaults"],
          "env_var": "PANTS_PEEK_EXCLUDE_DEFAULTS",
          "help": "Whether to leave off values that match the target-defined default values when using `json` output.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--peek-exclude-defaults",
            "--no-peek-exclude-defaults"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--exclude-defaults",
            "--no-exclude-defaults"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "description": "Display BUILD target info",
      "is_goal": true,
      "scope": "peek"
    },
    "pex": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pex-executable-search-paths=\"[<binary-paths>, <binary-paths>, ...]\"",
          "config_key": "executable_search_paths",
          "default": ["<PATH>"],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pex-executable-search-paths=\"[<binary-paths>, <binary-paths>, ...]\""
          ],
          "env_var": "PANTS_PEX_EXECUTABLE_SEARCH_PATHS",
          "help": "The PATH value that will be used by the PEX subprocess and any subprocesses it spawns.\n\nThe special string \"<PATH>\" will expand to the contents of the PATH env var.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--pex-executable-search-paths"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--executable-search-paths"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": ["<PATH>"]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pex-bootstrap-interpreter-names=\"[<bootstrap-python-names>, <bootstrap-python-names>, ...]\"",
          "config_key": "bootstrap_interpreter_names",
          "default": ["python", "python3", "python2"],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pex-bootstrap-interpreter-names=\"[<bootstrap-python-names>, <bootstrap-python-names>, ...]\""
          ],
          "env_var": "PANTS_PEX_BOOTSTRAP_INTERPRETER_NAMES",
          "help": "The names of Python binaries to search for to bootstrap PEX files with.\n\nThis does not impact which Python interpreter is used to run your code, only what is used to run the PEX tool. See the `interpreter_search_paths` option in `[python-setup]` to influence where interpreters are searched for.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--pex-bootstrap-interpreter-names"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--bootstrap-interpreter-names"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": ["python", "python3", "python2"]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pex-verbosity=<int>",
          "config_key": "verbosity",
          "default": 0,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--pex-verbosity=<int>"],
          "env_var": "PANTS_PEX_VERBOSITY",
          "help": "Set the verbosity level of PEX logging, from 0 (no logging) up to 9 (max logging).",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--pex-verbosity"],
          "typ": "int",
          "unscoped_cmd_line_args": ["--verbosity"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": 0
              }
            ]
          }
        }
      ],
      "basic": [],
      "deprecated": [],
      "description": "How Pants uses Pex to run Python subprocesses.",
      "is_goal": false,
      "scope": "pex"
    },
    "pex-binary-defaults": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]pex-binary-defaults-emit-warnings",
          "config_key": "emit_warnings",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]pex-binary-defaults-emit-warnings"],
          "env_var": "PANTS_PEX_BINARY_DEFAULTS_EMIT_WARNINGS",
          "help": "Whether built PEX binaries should emit PEX warnings at runtime by default.\n\nCan be overridden by specifying the `emit_warnings` parameter of individual `pex_binary` targets",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pex-binary-defaults-emit-warnings",
            "--no-pex-binary-defaults-emit-warnings"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": ["--emit-warnings", "--no-emit-warnings"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        }
      ],
      "basic": [],
      "deprecated": [],
      "description": "Default settings for creating PEX executables.",
      "is_goal": false,
      "scope": "pex-binary-defaults"
    },
    "poetry": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--poetry-version=<str>",
          "config_key": "version",
          "default": "poetry==1.1.7",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--poetry-version=<str>"],
          "env_var": "PANTS_POETRY_VERSION",
          "help": "Requirement string for the tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--poetry-version"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--version"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "poetry==1.1.7"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--poetry-extra-requirements=\"['<str>', '<str>', ...]\"",
          "config_key": "extra_requirements",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--poetry-extra-requirements=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_POETRY_EXTRA_REQUIREMENTS",
          "help": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--poetry-extra-requirements"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--extra-requirements"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--poetry-interpreter-constraints=\"['<str>', '<str>', ...]\"",
          "config_key": "interpreter_constraints",
          "default": ["CPython>=3.6"],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--poetry-interpreter-constraints=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_POETRY_INTERPRETER_CONSTRAINTS",
          "help": "Python interpreter constraints for this tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--poetry-interpreter-constraints"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--interpreter-constraints"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": ["CPython>=3.6"]
              }
            ]
          }
        }
      ],
      "basic": [],
      "deprecated": [],
      "description": "Used to generate lockfiles for third-party Python dependencies.",
      "is_goal": false,
      "scope": "poetry"
    },
    "protoc": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--protoc-version=<str>",
          "config_key": "version",
          "default": "3.11.4",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--protoc-version=<str>"],
          "env_var": "PANTS_PROTOC_VERSION",
          "help": "Use this version of protoc.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--protoc-version"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--version"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "3.11.4"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--protoc-known-versions=\"['<str>', '<str>', ...]\"",
          "config_key": "known_versions",
          "default": [
            "3.11.4|linux_x86_64|6d0f18cd84b918c7b3edd0203e75569e0c8caecb1367bbbe409b45e28514f5be|1591191",
            "3.11.4|macos_arm64 |8c6af11e1058efe953830ecb38324c0e0fd2fb67df3891896d138c535932e7db|2482119",
            "3.11.4|macos_x86_64|8c6af11e1058efe953830ecb38324c0e0fd2fb67df3891896d138c535932e7db|2482119"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--protoc-known-versions=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_PROTOC_KNOWN_VERSIONS",
          "help": "\nKnown versions to verify downloads against.\n\nEach element is a pipe-separated string of `version|platform|sha256|length`, where:\n\n  - `version` is the version string\n  - `platform` is one of [linux_x86_64,macos_arm64,macos_x86_64],\n  - `sha256` is the 64-character hex representation of the expected sha256\n    digest of the download file, as emitted by `shasum -a 256`\n  - `length` is the expected length of the download file in bytes, as emmitted by\n    `wc -c`\n\nE.g., `3.1.2|macos_x86_64|6d0f18cd84b918c7b3edd0203e75569e0c7caecb1367bbbe409b44e28514f5be|42813`.\n\nValues are space-stripped, so pipes can be indented for readability if necessary.\n",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--protoc-known-versions"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--known-versions"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "3.11.4|linux_x86_64|6d0f18cd84b918c7b3edd0203e75569e0c8caecb1367bbbe409b45e28514f5be|1591191",
                  "3.11.4|macos_arm64 |8c6af11e1058efe953830ecb38324c0e0fd2fb67df3891896d138c535932e7db|2482119",
                  "3.11.4|macos_x86_64|8c6af11e1058efe953830ecb38324c0e0fd2fb67df3891896d138c535932e7db|2482119"
                ]
              }
            ]
          }
        },
        {
          "choices": ["error", "warning"],
          "comma_separated_choices": "error, warning",
          "comma_separated_display_args": "--protoc-use-unsupported-version=<UnsupportedVersionUsage>",
          "config_key": "use_unsupported_version",
          "default": "error",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--protoc-use-unsupported-version=<UnsupportedVersionUsage>"
          ],
          "env_var": "PANTS_PROTOC_USE_UNSUPPORTED_VERSION",
          "help": "\nWhat action to take in case the requested version of protoc is not supported.\n\nSupported protoc versions: unspecified\n",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--protoc-use-unsupported-version"],
          "typ": "UnsupportedVersionUsage",
          "unscoped_cmd_line_args": ["--use-unsupported-version"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "error"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--protoc-url-template=<str>",
          "config_key": "url_template",
          "default": "https://github.com/protocolbuffers/protobuf/releases/download/v{version}/protoc-{version}-{platform}.zip",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--protoc-url-template=<str>"],
          "env_var": "PANTS_PROTOC_URL_TEMPLATE",
          "help": "URL to download the tool, either as a single binary file or a compressed file (e.g. zip file). You can change this to point to your own hosted file, e.g. to work with proxies or for access via the filesystem through a file:// URL.\n\nUse `{version}` to have the value from --version substituted, and `{platform}` to have a value from --url-platform-mapping substituted in, depending on the current platform. For example, https://github.com/.../protoc-{version}-{platform}.zip.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--protoc-url-template"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--url-template"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "https://github.com/protocolbuffers/protobuf/releases/download/v{version}/protoc-{version}-{platform}.zip"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--protoc-url-platform-mapping=\"{'key1': val1, 'key2': val2, ...}\"",
          "config_key": "url_platform_mapping",
          "default": {
            "linux_x86_64": "linux-x86_64",
            "macos_arm64": "osx-x86_64",
            "macos_x86_64": "osx-x86_64"
          },
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--protoc-url-platform-mapping=\"{'key1': val1, 'key2': val2, ...}\""
          ],
          "env_var": "PANTS_PROTOC_URL_PLATFORM_MAPPING",
          "help": "A dictionary mapping platforms to strings to be used when generating the URL to download the tool.\n\nIn --url-template, anytime the `{platform}` string is used, Pants will determine the current platform, and substitute `{platform}` with the respective value from your dictionary.\n\nFor example, if you define `{\"macos_x86_64\": \"apple-darwin\", \"linux_x86_64\": \"unknown-linux\"}, and run Pants on Linux with an intel architecture, then `{platform}` will be substituted in the --url-template option with unknown-linux.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--protoc-url-platform-mapping"],
          "typ": "dict",
          "unscoped_cmd_line_args": ["--url-platform-mapping"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": {}
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": {
                  "linux_x86_64": "linux-x86_64",
                  "macos_arm64": "osx-x86_64",
                  "macos_x86_64": "osx-x86_64"
                }
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]protoc-dependency-inference",
          "config_key": "dependency_inference",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]protoc-dependency-inference"],
          "env_var": "PANTS_PROTOC_DEPENDENCY_INFERENCE",
          "help": "Infer Protobuf dependencies on other Protobuf files by analyzing import statements.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--protoc-dependency-inference",
            "--no-protoc-dependency-inference"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--dependency-inference",
            "--no-dependency-inference"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "description": "The protocol buffer compiler (https://developers.google.com/protocol-buffers).",
      "is_goal": false,
      "scope": "protoc"
    },
    "py-constraints": {
      "advanced": [],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--py-constraints-output-file=<path>",
          "config_key": "output_file",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--py-constraints-output-file=<path>"],
          "env_var": "PANTS_PY_CONSTRAINTS_OUTPUT_FILE",
          "help": "Output the goal's stdout to this file. If unspecified, outputs to stdout.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--py-constraints-output-file"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--output-file"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]py-constraints-summary",
          "config_key": "summary",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]py-constraints-summary"],
          "env_var": "PANTS_PY_CONSTRAINTS_SUMMARY",
          "help": "Output a CSV summary of interpreter constraints for your whole repository. The headers are `Target`, `Constraints`, `Transitive Constraints`, `# Dependencies`, and `# Dependees`.\n\nThis information can be useful when prioritizing a migration from one Python version to another (e.g. to Python 3). Use `# Dependencies` and `# Dependees` to help prioritize which targets are easiest to port (low # dependencies) and highest impact to port (high # dependees).\n\nUse a tool like Pandas or Excel to process the CSV. Use the option `--py-constraints-output-file=summary.csv` to write directly to a file.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--py-constraints-summary",
            "--no-py-constraints-summary"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": ["--summary", "--no-summary"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "description": "Determine what Python interpreter constraints are used by files/targets.",
      "is_goal": true,
      "scope": "py-constraints"
    },
    "pylint": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pylint-version=<str>",
          "config_key": "version",
          "default": "pylint>=2.6.2,<2.7",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--pylint-version=<str>"],
          "env_var": "PANTS_PYLINT_VERSION",
          "help": "Requirement string for the tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--pylint-version"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--version"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "pylint>=2.6.2,<2.7"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pylint-extra-requirements=\"['<str>', '<str>', ...]\"",
          "config_key": "extra_requirements",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pylint-extra-requirements=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_PYLINT_EXTRA_REQUIREMENTS",
          "help": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--pylint-extra-requirements"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--extra-requirements"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pylint-lockfile=<str>",
          "config_key": "lockfile",
          "default": "<default>",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--pylint-lockfile=<str>"],
          "env_var": "PANTS_PYLINT_LOCKFILE",
          "help": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python-setup].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.7.2/src/python/pants/backend/python/lint/pylint/lockfile.txt for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `./pants generate-lockfiles --resolve=pylint`.\n\nLockfile generation currently does not wire up the `[python-repos]` options. If lockfile generation fails, you can manually generate a lockfile, such as by using pip-compile or `pip freeze`. Set this option to the path to your manually generated lockfile. When manually maintaining lockfiles, set `[python-setup].invalid_lockfile_behavior = 'ignore'`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--pylint-lockfile"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--lockfile"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "<default>"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pylint-console-script=<str>",
          "config_key": "console_script",
          "default": "pylint",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--pylint-console-script=<str>"],
          "env_var": "PANTS_PYLINT_CONSOLE_SCRIPT",
          "help": "The console script for the tool. Using this option is generally preferable to (and mutually exclusive with) specifying an --entry-point since console script names have a higher expectation of staying stable across releases of the tool. Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--pylint-console-script"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--console-script"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "pylint"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pylint-entry-point=<str>",
          "config_key": "entry_point",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--pylint-entry-point=<str>"],
          "env_var": "PANTS_PYLINT_ENTRY_POINT",
          "help": "The entry point for the tool. Generally you only want to use this option if the tool does not offer a --console-script (which this option is mutually exclusive with). Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--pylint-entry-point"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--entry-point"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pylint-config=<file_option>",
          "config_key": "config",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--pylint-config=<file_option>"],
          "env_var": "PANTS_PYLINT_CONFIG",
          "help": "Path to a config file understood by Pylint (http://pylint.pycqa.org/en/latest/user_guide/run.html#command-line-options).\n\nSetting this option will disable `[pylint].config_discovery`. Use this option if the config is located in a non-standard location.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--pylint-config"],
          "typ": "file_option",
          "unscoped_cmd_line_args": ["--config"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]pylint-config-discovery",
          "config_key": "config_discovery",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]pylint-config-discovery"],
          "env_var": "PANTS_PYLINT_CONFIG_DISCOVERY",
          "help": "If true, Pants will include any relevant config files during runs (`.pylintrc`, `pylintrc`, `pyproject.toml`, and `setup.cfg`).\n\nUse `[pylint].config` instead if your config is in a non-standard location.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pylint-config-discovery",
            "--no-pylint-config-discovery"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--config-discovery",
            "--no-config-discovery"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pylint-source-plugins=\"[<target_option>, <target_option>, ...]\"",
          "config_key": "source_plugins",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pylint-source-plugins=\"[<target_option>, <target_option>, ...]\""
          ],
          "env_var": "PANTS_PYLINT_SOURCE_PLUGINS",
          "help": "An optional list of `python_library` target addresses to load first-party plugins.\n\nYou must set the plugin's parent directory as a source root. For example, if your plugin is at `build-support/pylint/custom_plugin.py`, add 'build-support/pylint' to `[source].root_patterns` in `pants.toml`. This is necessary for Pants to know how to tell Pylint to discover your plugin. See https://www.pantsbuild.org/v2.7/docs/source-roots\n\nYou must also set `load-plugins=$module_name` in your Pylint config file.\n\nWhile your plugin's code can depend on other first-party code and third-party requirements, all first-party dependencies of the plugin must live in the same directory or a subdirectory.\n\nTo instead load third-party plugins, set the option `[pylint].extra_requirements` and set the `load-plugins` option in your Pylint config.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--pylint-source-plugins"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--source-plugins"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]pylint-skip",
          "config_key": "skip",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]pylint-skip"],
          "env_var": "PANTS_PYLINT_SKIP",
          "help": "Don't use Pylint when running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 lint`",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--pylint-skip", "--no-pylint-skip"],
          "typ": "bool",
          "unscoped_cmd_line_args": ["--skip", "--no-skip"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pylint-args=\"[<shell_str>, <shell_str>, ...]\"",
          "config_key": "args",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--pylint-args=\"[<shell_str>, <shell_str>, ...]\""],
          "env_var": "PANTS_PYLINT_ARGS",
          "help": "Arguments to pass directly to Pylint, e.g. `--pylint-args=\"--ignore=foo.py,bar.py --disable=C0330,W0311\"`",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--pylint-args"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--args"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "description": "The Pylint linter for Python code (https://www.pylint.org/).",
      "is_goal": false,
      "scope": "pylint"
    },
    "pytest": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pytest-version=<str>",
          "config_key": "version",
          "default": "pytest>=6.2.4,<6.3",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--pytest-version=<str>"],
          "env_var": "PANTS_PYTEST_VERSION",
          "help": "Requirement string for the tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--pytest-version"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--version"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "pytest>=6.2.4,<6.3"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pytest-extra-requirements=\"['<str>', '<str>', ...]\"",
          "config_key": "extra_requirements",
          "default": ["pytest-cov>=2.12,!=2.12.1,<3.1"],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pytest-extra-requirements=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_PYTEST_EXTRA_REQUIREMENTS",
          "help": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--pytest-extra-requirements"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--extra-requirements"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": ["pytest-cov>=2.12,!=2.12.1,<3.1"]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pytest-lockfile=<str>",
          "config_key": "lockfile",
          "default": "<default>",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--pytest-lockfile=<str>"],
          "env_var": "PANTS_PYTEST_LOCKFILE",
          "help": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python-setup].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.7.2/src/python/pants/backend/python/subsystems/pytest_lockfile.txt for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `./pants generate-lockfiles --resolve=pytest`.\n\nLockfile generation currently does not wire up the `[python-repos]` options. If lockfile generation fails, you can manually generate a lockfile, such as by using pip-compile or `pip freeze`. Set this option to the path to your manually generated lockfile. When manually maintaining lockfiles, set `[python-setup].invalid_lockfile_behavior = 'ignore'`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--pytest-lockfile"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--lockfile"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "<default>"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pytest-console-script=<str>",
          "config_key": "console_script",
          "default": "pytest",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--pytest-console-script=<str>"],
          "env_var": "PANTS_PYTEST_CONSOLE_SCRIPT",
          "help": "The console script for the tool. Using this option is generally preferable to (and mutually exclusive with) specifying an --entry-point since console script names have a higher expectation of staying stable across releases of the tool. Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--pytest-console-script"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--console-script"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "pytest"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pytest-entry-point=<str>",
          "config_key": "entry_point",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--pytest-entry-point=<str>"],
          "env_var": "PANTS_PYTEST_ENTRY_POINT",
          "help": "The entry point for the tool. Generally you only want to use this option if the tool does not offer a --console-script (which this option is mutually exclusive with). Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--pytest-entry-point"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--entry-point"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pytest-timeout-default=<int>",
          "config_key": "timeout_default",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--pytest-timeout-default=<int>"],
          "env_var": "PANTS_PYTEST_TIMEOUT_DEFAULT",
          "help": "The default timeout (in seconds) for a test target if the `timeout` field is not set on the target.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--pytest-timeout-default"],
          "typ": "int",
          "unscoped_cmd_line_args": ["--timeout-default"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pytest-timeout-maximum=<int>",
          "config_key": "timeout_maximum",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--pytest-timeout-maximum=<int>"],
          "env_var": "PANTS_PYTEST_TIMEOUT_MAXIMUM",
          "help": "The maximum timeout (in seconds) that may be used on a `python_tests` target.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--pytest-timeout-maximum"],
          "typ": "int",
          "unscoped_cmd_line_args": ["--timeout-maximum"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pytest-junit-xml-dir=<DIR>",
          "config_key": "junit_xml_dir",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--pytest-junit-xml-dir=<DIR>"],
          "env_var": "PANTS_PYTEST_JUNIT_XML_DIR",
          "help": "Specifying a directory causes Junit XML result files to be emitted under that dir for each test run.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--pytest-junit-xml-dir"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--junit-xml-dir"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pytest-junit-family=<str>",
          "config_key": "junit_family",
          "default": "xunit2",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--pytest-junit-family=<str>"],
          "env_var": "PANTS_PYTEST_JUNIT_FAMILY",
          "help": "The format of the generated XML file. See https://docs.pytest.org/en/latest/reference.html#confval-junit_family.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--pytest-junit-family"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--junit-family"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "xunit2"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pytest-execution-slot-var=<str>",
          "config_key": "execution_slot_var",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--pytest-execution-slot-var=<str>"],
          "env_var": "PANTS_PYTEST_EXECUTION_SLOT_VAR",
          "help": "If a non-empty string, the process execution slot id (an integer) will be exposed to tests under this environment variable name.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--pytest-execution-slot-var"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--execution-slot-var"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]pytest-config-discovery",
          "config_key": "config_discovery",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]pytest-config-discovery"],
          "env_var": "PANTS_PYTEST_CONFIG_DISCOVERY",
          "help": "If true, Pants will include all relevant Pytest config files (e.g. `pytest.ini`) during runs. See https://docs.pytest.org/en/stable/customize.html#finding-the-rootdir for where config files should be located for Pytest to discover them.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--pytest-config-discovery",
            "--no-pytest-config-discovery"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--config-discovery",
            "--no-config-discovery"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pytest-args=\"[<shell_str>, <shell_str>, ...]\", ... -- [<shell_str> [<shell_str> [...]]]",
          "config_key": "args",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--pytest-args=\"[<shell_str>, <shell_str>, ...]\"",
            "... -- [<shell_str> [<shell_str> [...]]]"
          ],
          "env_var": "PANTS_PYTEST_ARGS",
          "help": "Arguments to pass directly to Pytest, e.g. `--pytest-args=\"-k test_foo --quiet\"`",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--pytest-args"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--args"],
          "value_history": {
            "ranked_values": [
              {
                "details": "from command-line flag",
                "rank": "FLAG",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]pytest-timeouts",
          "config_key": "timeouts",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]pytest-timeouts"],
          "env_var": "PANTS_PYTEST_TIMEOUTS",
          "help": "Enable test target timeouts. If timeouts are enabled then test targets with a timeout= parameter set on their target will time out after the given number of seconds if not completed. If no timeout is set, then either the default timeout is used or no timeout is configured.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--pytest-timeouts", "--no-pytest-timeouts"],
          "typ": "bool",
          "unscoped_cmd_line_args": ["--timeouts", "--no-timeouts"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        }
      ],
      "deprecated": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--pytest-pytest-plugins=\"['<str>', '<str>', ...]\"",
          "config_key": "pytest_plugins",
          "default": ["pytest-cov>=2.12,!=2.12.1,<3.1"],
          "deprecated_message": "Deprecated, will be removed in version: 2.8.0.dev0.",
          "deprecation_active": true,
          "display_args": [
            "--pytest-pytest-plugins=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_PYTEST_PYTEST_PLUGINS",
          "help": "Requirement strings for any plugins or additional requirements you'd like to use.",
          "removal_hint": "Use `[pytest].extra_requirements` instead, which behaves the same. (The option is being renamed for uniformity with other Python tools.)",
          "removal_version": "2.8.0.dev0",
          "scoped_cmd_line_args": ["--pytest-pytest-plugins"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--pytest-plugins"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": ["pytest-cov>=2.12,!=2.12.1,<3.1"]
              }
            ]
          }
        }
      ],
      "description": "The pytest Python test framework (https://docs.pytest.org/).",
      "is_goal": false,
      "scope": "pytest"
    },
    "python-infer": {
      "advanced": [],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]python-infer-imports",
          "config_key": "imports",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]python-infer-imports"],
          "env_var": "PANTS_PYTHON_INFER_IMPORTS",
          "help": "Infer a target's imported dependencies by parsing import statements from sources.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--python-infer-imports",
            "--no-python-infer-imports"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": ["--imports", "--no-imports"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]python-infer-string-imports",
          "config_key": "string_imports",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]python-infer-string-imports"],
          "env_var": "PANTS_PYTHON_INFER_STRING_IMPORTS",
          "help": "Infer a target's dependencies based on strings that look like dynamic dependencies, such as Django settings files expressing dependencies as strings. To ignore any false positives, put `!{bad_address}` in the `dependencies` field of your target.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--python-infer-string-imports",
            "--no-python-infer-string-imports"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": ["--string-imports", "--no-string-imports"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]python-infer-inits",
          "config_key": "inits",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]python-infer-inits"],
          "env_var": "PANTS_PYTHON_INFER_INITS",
          "help": "Infer a target's dependencies on any __init__.py files existing for the packages it is located in (recursively upward in the directory structure).\n\nEven if this is disabled, Pants will still include any ancestor __init__.py files, only they will not be 'proper' dependencies, e.g. they will not show up in `./pants dependencies` and their own dependencies will not be used.\n\nIf you have empty `__init__.py` files, it's safe to leave this option off; otherwise, you should enable this option.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--python-infer-inits",
            "--no-python-infer-inits"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": ["--inits", "--no-inits"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]python-infer-conftests",
          "config_key": "conftests",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]python-infer-conftests"],
          "env_var": "PANTS_PYTHON_INFER_CONFTESTS",
          "help": "Infer a test target's dependencies on any conftest.py files in the current directory and ancestor directories.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--python-infer-conftests",
            "--no-python-infer-conftests"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": ["--conftests", "--no-conftests"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]python-infer-entry-points",
          "config_key": "entry_points",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]python-infer-entry-points"],
          "env_var": "PANTS_PYTHON_INFER_ENTRY_POINTS",
          "help": "Infer dependencies on targets' entry points, e.g. `pex_binary`'s `entry_point` field, `python_awslambda`'s `handler` field and `python_distribution`'s `entry_points` field.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--python-infer-entry-points",
            "--no-python-infer-entry-points"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": ["--entry-points", "--no-entry-points"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "description": "Options controlling which dependencies will be inferred for Python targets.",
      "is_goal": false,
      "scope": "python-infer"
    },
    "python-native-code": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--python-native-code-cpp-flags=\"['<str>', '<str>', ...]\"",
          "config_key": "cpp_flags",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--python-native-code-cpp-flags=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_PYTHON_NATIVE_CODE_CPP_FLAGS",
          "help": "Override the `CPPFLAGS` environment variable for any forked subprocesses.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--python-native-code-cpp-flags"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--cpp-flags"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--python-native-code-ld-flags=\"['<str>', '<str>', ...]\"",
          "config_key": "ld_flags",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--python-native-code-ld-flags=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_PYTHON_NATIVE_CODE_LD_FLAGS",
          "help": "Override the `LDFLAGS` environment variable for any forked subprocesses.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--python-native-code-ld-flags"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--ld-flags"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        }
      ],
      "basic": [],
      "deprecated": [],
      "description": "Options for building native code using Python, e.g. when resolving distributions.",
      "is_goal": false,
      "scope": "python-native-code"
    },
    "python-protobuf": {
      "advanced": [],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--python-protobuf-runtime-dependencies=\"[<target_option>, <target_option>, ...]\"",
          "config_key": "runtime_dependencies",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--python-protobuf-runtime-dependencies=\"[<target_option>, <target_option>, ...]\""
          ],
          "env_var": "PANTS_PYTHON_PROTOBUF_RUNTIME_DEPENDENCIES",
          "help": "A list of addresses to `python_requirement_library` targets for the runtime dependencies needed for generated Python code to work. For example, `['3rdparty/python:protobuf', '3rdparty/python:grpcio']`. These dependencies will be automatically added to every `protobuf_library` target",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--python-protobuf-runtime-dependencies"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--runtime-dependencies"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]python-protobuf-mypy-plugin",
          "config_key": "mypy_plugin",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]python-protobuf-mypy-plugin"],
          "env_var": "PANTS_PYTHON_PROTOBUF_MYPY_PLUGIN",
          "help": "Use the `mypy-protobuf` plugin (https://github.com/dropbox/mypy-protobuf) to also generate .pyi type stubs.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--python-protobuf-mypy-plugin",
            "--no-python-protobuf-mypy-plugin"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": ["--mypy-plugin", "--no-mypy-plugin"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "description": "Options related to the Protobuf Python backend.\n\nSee https://www.pantsbuild.org/v2.7/docs/protobuf.",
      "is_goal": false,
      "scope": "python-protobuf"
    },
    "python-protobuf.mypy-plugin": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--python-protobuf-mypy-plugin-version=<str>",
          "config_key": "version",
          "default": "mypy-protobuf==2.4",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--python-protobuf-mypy-plugin-version=<str>"],
          "env_var": "PANTS_PYTHON_PROTOBUF_MYPY_PLUGIN_VERSION",
          "help": "Requirement string for the tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--python-protobuf-mypy-plugin-version"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--version"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "mypy-protobuf==2.4"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--python-protobuf-mypy-plugin-extra-requirements=\"['<str>', '<str>', ...]\"",
          "config_key": "extra_requirements",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--python-protobuf-mypy-plugin-extra-requirements=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_PYTHON_PROTOBUF_MYPY_PLUGIN_EXTRA_REQUIREMENTS",
          "help": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--python-protobuf-mypy-plugin-extra-requirements"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": ["--extra-requirements"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--python-protobuf-mypy-plugin-interpreter-constraints=\"['<str>', '<str>', ...]\"",
          "config_key": "interpreter_constraints",
          "default": ["CPython>=3.6"],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--python-protobuf-mypy-plugin-interpreter-constraints=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_PYTHON_PROTOBUF_MYPY_PLUGIN_INTERPRETER_CONSTRAINTS",
          "help": "Python interpreter constraints for this tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--python-protobuf-mypy-plugin-interpreter-constraints"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": ["--interpreter-constraints"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": ["CPython>=3.6"]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--python-protobuf-mypy-plugin-lockfile=<str>",
          "config_key": "lockfile",
          "default": "<default>",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--python-protobuf-mypy-plugin-lockfile=<str>"],
          "env_var": "PANTS_PYTHON_PROTOBUF_MYPY_PLUGIN_LOCKFILE",
          "help": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python-setup].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.7.2/src/python/pants/backend/codegen/protobuf/python/mypy_protobuf_lockfile.txt for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `./pants generate-lockfiles --resolve=mypy-protobuf`.\n\nLockfile generation currently does not wire up the `[python-repos]` options. If lockfile generation fails, you can manually generate a lockfile, such as by using pip-compile or `pip freeze`. Set this option to the path to your manually generated lockfile. When manually maintaining lockfiles, set `[python-setup].invalid_lockfile_behavior = 'ignore'`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--python-protobuf-mypy-plugin-lockfile"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--lockfile"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "<default>"
              }
            ]
          }
        }
      ],
      "basic": [],
      "deprecated": [],
      "description": "Configuration of the mypy-protobuf type stub generation plugin.",
      "is_goal": false,
      "scope": "python-protobuf.mypy-plugin"
    },
    "python-repos": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--python-repos-repos=\"['<str>', '<str>', ...]\"",
          "config_key": "repos",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--python-repos-repos=\"['<str>', '<str>', ...]\""],
          "env_var": "PANTS_PYTHON_REPOS_REPOS",
          "help": "URLs of code repositories to look for requirements. In Pip and Pex, this option corresponds to the `--find-links` option.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--python-repos-repos"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--repos"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--python-repos-indexes=\"['<str>', '<str>', ...]\"",
          "config_key": "indexes",
          "default": ["https://pypi.org/simple/"],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--python-repos-indexes=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_PYTHON_REPOS_INDEXES",
          "help": "URLs of code repository indexes to look for requirements. If set to an empty list, then Pex will use no indices (meaning it will not use PyPI). The values should be compliant with PEP 503.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--python-repos-indexes"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--indexes"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": ["https://pypi.org/simple/"]
              }
            ]
          }
        }
      ],
      "basic": [],
      "deprecated": [],
      "description": "External Python code repositories, such as PyPI.\n\nThese options may be used to point to custom cheeseshops when resolving requirements.",
      "is_goal": false,
      "scope": "python-repos"
    },
    "python-setup": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--python-setup-interpreter-constraints=\"[<requirement>, <requirement>, ...]\"",
          "config_key": "interpreter_constraints",
          "default": ["CPython>=3.6,<4"],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--python-setup-interpreter-constraints=\"[<requirement>, <requirement>, ...]\""
          ],
          "env_var": "PANTS_PYTHON_SETUP_INTERPRETER_CONSTRAINTS",
          "help": "The Python interpreters your codebase is compatible with.\n\nSpecify with requirement syntax, e.g. 'CPython>=2.7,<3' (A CPython interpreter with version >=2.7 AND version <3) or 'PyPy' (A pypy interpreter of any version). Multiple constraint strings will be ORed together.\n\nThese constraints are used as the default value for the `interpreter_constraints` field of Python targets.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--python-setup-interpreter-constraints"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--interpreter-constraints"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": ["CPython>=3.6,<4"]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--python-setup-interpreter-versions-universe=\"['<str>', '<str>', ...]\"",
          "config_key": "interpreter_versions_universe",
          "default": ["2.7", "3.5", "3.6", "3.7", "3.8", "3.9", "3.10"],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--python-setup-interpreter-versions-universe=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_PYTHON_SETUP_INTERPRETER_VERSIONS_UNIVERSE",
          "help": "All known Python major/minor interpreter versions that may be used by either your code or tools used by your code.\n\nThis is used by Pants to robustly handle interpreter constraints, such as knowing when generating lockfiles which Python versions to check if your code is using.\n\nThis does not control which interpreter your code will use. Instead, to set your interpreter constraints, update `[python-setup].interpreter_constraints`, the `interpreter_constraints` field, and relevant tool options like `[isort].interpreter_constraints` to tell Pants which interpreters your code actually uses. See https://www.pantsbuild.org/v2.7/docs/python-interpreter-compatibility.\n\nAll elements must be the minor and major Python version, e.g. '2.7' or '3.10'. Do not include the patch version.\n\n",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--python-setup-interpreter-versions-universe"
          ],
          "typ": "list",
          "unscoped_cmd_line_args": ["--interpreter-versions-universe"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": ["2.7", "3.5", "3.6", "3.7", "3.8", "3.9", "3.10"]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--python-setup-requirement-constraints=<file_option>",
          "config_key": "requirement_constraints",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--python-setup-requirement-constraints=<file_option>"
          ],
          "env_var": "PANTS_PYTHON_SETUP_REQUIREMENT_CONSTRAINTS",
          "help": "When resolving third-party requirements for your own code (vs. tools you run), use this constraints file to determine which versions to use.\n\nThis only applies when resolving user requirements, rather than tools you run like Black and Pytest. To constrain tools, set `[tool].lockfile`, e.g. `[black].lockfile`.\n\nSee https://pip.pypa.io/en/stable/user_guide/#constraints-files for more information on the format of constraint files and how constraints are applied in Pex and pip.\n\nMutually exclusive with `[python-setup].experimental_lockfile`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--python-setup-requirement-constraints"],
          "typ": "file_option",
          "unscoped_cmd_line_args": ["--requirement-constraints"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]python-setup-resolve-all-constraints",
          "config_key": "resolve_all_constraints",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]python-setup-resolve-all-constraints"],
          "env_var": "PANTS_PYTHON_SETUP_RESOLVE_ALL_CONSTRAINTS",
          "help": "If enabled, when resolving requirements, Pants will first resolve your entire constraints file as a single global resolve. Then, if the code uses a subset of your constraints file, Pants will extract the relevant requirements from that global resolve so that only what's actually needed gets used. If disabled, Pants will not use a global resolve and will resolve each subset of your requirements independently.\n\nUsually this option should be enabled because it can result in far fewer resolves.\n\nRequires [python-setup].requirement_constraints to be set.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--python-setup-resolve-all-constraints",
            "--no-python-setup-resolve-all-constraints"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--resolve-all-constraints",
            "--no-resolve-all-constraints"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--python-setup-experimental-lockfile=<file>",
          "config_key": "experimental_lockfile",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--python-setup-experimental-lockfile=<file>"],
          "env_var": "PANTS_PYTHON_SETUP_EXPERIMENTAL_LOCKFILE",
          "help": "The lockfile to use when resolving requirements for your own code (vs. tools you run).\n\nThis is highly experimental and will change, including adding support for multiple lockfiles. This option's behavior may change without the normal deprecation cycle.\n\nTo generate a lockfile, activate the backend `pants.backend.experimental.python`and run `./pants generate-user-lockfile ::`.\n\nMutually exclusive with `[python-setup].requirement_constraints`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--python-setup-experimental-lockfile"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--experimental-lockfile"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": ["error", "ignore", "warn"],
          "comma_separated_choices": "error, ignore, warn",
          "comma_separated_display_args": "--python-setup-invalid-lockfile-behavior=<InvalidLockfileBehavior>",
          "config_key": "invalid_lockfile_behavior",
          "default": "error",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--python-setup-invalid-lockfile-behavior=<InvalidLockfileBehavior>"
          ],
          "env_var": "PANTS_PYTHON_SETUP_INVALID_LOCKFILE_BEHAVIOR",
          "help": "The behavior when a lockfile has requirements or interpreter constraints that are not compatible with what the current build is using.\n\nWe recommend keeping the default of `error` for CI builds.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--python-setup-invalid-lockfile-behavior"],
          "typ": "InvalidLockfileBehavior",
          "unscoped_cmd_line_args": ["--invalid-lockfile-behavior"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "error"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--python-setup-interpreter-search-paths=\"[<binary-paths>, <binary-paths>, ...]\"",
          "config_key": "interpreter_search_paths",
          "default": ["<PYENV>", "<PATH>"],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--python-setup-interpreter-search-paths=\"[<binary-paths>, <binary-paths>, ...]\""
          ],
          "env_var": "PANTS_PYTHON_SETUP_INTERPRETER_SEARCH_PATHS",
          "help": "A list of paths to search for Python interpreters that match your project's interpreter constraints. You can specify absolute paths to interpreter binaries and/or to directories containing interpreter binaries. The order of entries does not matter. The following special strings are supported:\n\n* \"<PATH>\", the contents of the PATH env var\n* \"<ASDF>\", all Python versions currently configured by ASDF (asdf shell, ${HOME}/.tool-versions), with a fallback to all installed versions\n* \"<ASDF_LOCAL>\", the ASDF interpreter with the version in BUILD_ROOT/.tool-versions\n* \"<PYENV>\", all Python versions under $(pyenv root)/versions\n* \"<PYENV_LOCAL>\", the Pyenv interpreter with the version in BUILD_ROOT/.python-version\n* \"<PEXRC>\", paths in the PEX_PYTHON_PATH variable in /etc/pexrc or ~/.pexrc",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--python-setup-interpreter-search-paths"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--interpreter-search-paths"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": ["<PYENV>", "<PATH>"]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--python-setup-resolver-manylinux=<str>",
          "config_key": "resolver_manylinux",
          "default": "manylinux2014",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--python-setup-resolver-manylinux=<str>"],
          "env_var": "PANTS_PYTHON_SETUP_RESOLVER_MANYLINUX",
          "help": "Whether to allow resolution of manylinux wheels when resolving requirements for foreign linux platforms. The value should be a manylinux platform upper bound, e.g.: 'manylinux2010', or else the string 'no' to disallow.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--python-setup-resolver-manylinux"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--resolver-manylinux"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "manylinux2014"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--python-setup-resolver-jobs=<int>",
          "config_key": "resolver_jobs",
          "default": "#cores/2",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--python-setup-resolver-jobs=<int>"],
          "env_var": "PANTS_PYTHON_SETUP_RESOLVER_JOBS",
          "help": "The maximum number of concurrent jobs to build wheels with.\n\nBecause Pants can run multiple subprocesses in parallel, the maximum total parallelism will be `--process-execution-{local,remote}-parallelism x --python-setup-resolver-jobs`. \n\nSetting this option higher may result in better parallelism, but, if set too high, may result in starvation and Out of Memory errors.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--python-setup-resolver-jobs"],
          "typ": "int",
          "unscoped_cmd_line_args": ["--resolver-jobs"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": 32
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]python-setup-tailor-ignore-solitary-init-files",
          "config_key": "tailor_ignore_solitary_init_files",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--[no-]python-setup-tailor-ignore-solitary-init-files"
          ],
          "env_var": "PANTS_PYTHON_SETUP_TAILOR_IGNORE_SOLITARY_INIT_FILES",
          "help": "Don't tailor python_library targets for solitary __init__.py files, as those usually exist as import scaffolding rather than true library code.\n\nSet to False if you commonly have packages containing real code in __init__.py and there are no other .py files in the package.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--python-setup-tailor-ignore-solitary-init-files",
            "--no-python-setup-tailor-ignore-solitary-init-files"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--tailor-ignore-solitary-init-files",
            "--no-tailor-ignore-solitary-init-files"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]python-setup-tailor-pex-binary-targets",
          "config_key": "tailor_pex_binary_targets",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]python-setup-tailor-pex-binary-targets"],
          "env_var": "PANTS_PYTHON_SETUP_TAILOR_PEX_BINARY_TARGETS",
          "help": "Tailor pex_binary() targets for Python entry point files.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--python-setup-tailor-pex-binary-targets",
            "--no-python-setup-tailor-pex-binary-targets"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--tailor-pex-binary-targets",
            "--no-tailor-pex-binary-targets"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        }
      ],
      "basic": [],
      "deprecated": [],
      "description": "Options for Pants's Python support.",
      "is_goal": false,
      "scope": "python-setup"
    },
    "repl": {
      "advanced": [],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--repl-shell=<str>",
          "config_key": "shell",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--repl-shell=<str>"],
          "env_var": "PANTS_REPL_SHELL",
          "help": "Override the automatically-detected REPL program for the target(s) specified. ",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--repl-shell"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--shell"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "description": "Open a REPL with the specified code loadable.",
      "is_goal": true,
      "scope": "repl"
    },
    "roots": {
      "advanced": [],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--roots-output-file=<path>",
          "config_key": "output_file",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--roots-output-file=<path>"],
          "env_var": "PANTS_ROOTS_OUTPUT_FILE",
          "help": "Output the goal's stdout to this file. If unspecified, outputs to stdout.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--roots-output-file"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--output-file"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--roots-sep=<separator>",
          "config_key": "sep",
          "default": "\\n",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--roots-sep=<separator>"],
          "env_var": "PANTS_ROOTS_SEP",
          "help": "String to use to separate lines in line-oriented output.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--roots-sep"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--sep"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "\\n"
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "description": "List the repo's registered source roots.",
      "is_goal": true,
      "scope": "roots"
    },
    "run": {
      "advanced": [],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--run-args=\"[<shell_str>, <shell_str>, ...]\", ... -- [<shell_str> [<shell_str> [...]]]",
          "config_key": "args",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--run-args=\"[<shell_str>, <shell_str>, ...]\"",
            "... -- [<shell_str> [<shell_str> [...]]]"
          ],
          "env_var": "PANTS_RUN_ARGS",
          "help": "Arguments to pass directly to the executed target, e.g. `--run-args=\"val1 val2 --debug\"`",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--run-args"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--args"],
          "value_history": {
            "ranked_values": [
              {
                "details": "from command-line flag",
                "rank": "FLAG",
                "value": []
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "description": "Runs a binary target.\n\nThis goal propagates the return code of the underlying executable. Run `echo $?` to inspect the resulting return code.",
      "is_goal": true,
      "scope": "run"
    },
    "scc": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--scc-version=<str>",
          "config_key": "version",
          "default": "2.12.0",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--scc-version=<str>"],
          "env_var": "PANTS_SCC_VERSION",
          "help": "Use this version of succinctcodecounter.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--scc-version"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--version"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "2.12.0"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--scc-known-versions=\"['<str>', '<str>', ...]\"",
          "config_key": "known_versions",
          "default": [
            "2.12.0|macos_arm64 |70b7002cd1e4541cb37b7b9cbc0eeedd13ceacb49628e82ab46332bb2e65a5a6|1842530",
            "2.12.0|macos_x86_64|70b7002cd1e4541cb37b7b9cbc0eeedd13ceacb49628e82ab46332bb2e65a5a6|1842530",
            "2.12.0|linux_x86_64|8eca3e98fe8a78d417d3779a51724515ac4459760d3ec256295f80954a0da044|1753059"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--scc-known-versions=\"['<str>', '<str>', ...]\""],
          "env_var": "PANTS_SCC_KNOWN_VERSIONS",
          "help": "\nKnown versions to verify downloads against.\n\nEach element is a pipe-separated string of `version|platform|sha256|length`, where:\n\n  - `version` is the version string\n  - `platform` is one of [linux_x86_64,macos_arm64,macos_x86_64],\n  - `sha256` is the 64-character hex representation of the expected sha256\n    digest of the download file, as emitted by `shasum -a 256`\n  - `length` is the expected length of the download file in bytes, as emmitted by\n    `wc -c`\n\nE.g., `3.1.2|macos_x86_64|6d0f18cd84b918c7b3edd0203e75569e0c7caecb1367bbbe409b44e28514f5be|42813`.\n\nValues are space-stripped, so pipes can be indented for readability if necessary.\n",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--scc-known-versions"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--known-versions"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "2.12.0|macos_arm64 |70b7002cd1e4541cb37b7b9cbc0eeedd13ceacb49628e82ab46332bb2e65a5a6|1842530",
                  "2.12.0|macos_x86_64|70b7002cd1e4541cb37b7b9cbc0eeedd13ceacb49628e82ab46332bb2e65a5a6|1842530",
                  "2.12.0|linux_x86_64|8eca3e98fe8a78d417d3779a51724515ac4459760d3ec256295f80954a0da044|1753059"
                ]
              }
            ]
          }
        },
        {
          "choices": ["error", "warning"],
          "comma_separated_choices": "error, warning",
          "comma_separated_display_args": "--scc-use-unsupported-version=<UnsupportedVersionUsage>",
          "config_key": "use_unsupported_version",
          "default": "error",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--scc-use-unsupported-version=<UnsupportedVersionUsage>"
          ],
          "env_var": "PANTS_SCC_USE_UNSUPPORTED_VERSION",
          "help": "\nWhat action to take in case the requested version of succinctcodecounter is not supported.\n\nSupported succinctcodecounter versions: unspecified\n",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--scc-use-unsupported-version"],
          "typ": "UnsupportedVersionUsage",
          "unscoped_cmd_line_args": ["--use-unsupported-version"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "error"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--scc-url-template=<str>",
          "config_key": "url_template",
          "default": "https://github.com/boyter/scc/releases/download/v{version}/scc-{version}-{platform}.zip",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--scc-url-template=<str>"],
          "env_var": "PANTS_SCC_URL_TEMPLATE",
          "help": "URL to download the tool, either as a single binary file or a compressed file (e.g. zip file). You can change this to point to your own hosted file, e.g. to work with proxies or for access via the filesystem through a file:// URL.\n\nUse `{version}` to have the value from --version substituted, and `{platform}` to have a value from --url-platform-mapping substituted in, depending on the current platform. For example, https://github.com/.../protoc-{version}-{platform}.zip.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--scc-url-template"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--url-template"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "https://github.com/boyter/scc/releases/download/v{version}/scc-{version}-{platform}.zip"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--scc-url-platform-mapping=\"{'key1': val1, 'key2': val2, ...}\"",
          "config_key": "url_platform_mapping",
          "default": {
            "linux_x86_64": "x86_64-unknown-linux",
            "macos_arm64": "x86_64-apple-darwin",
            "macos_x86_64": "x86_64-apple-darwin"
          },
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--scc-url-platform-mapping=\"{'key1': val1, 'key2': val2, ...}\""
          ],
          "env_var": "PANTS_SCC_URL_PLATFORM_MAPPING",
          "help": "A dictionary mapping platforms to strings to be used when generating the URL to download the tool.\n\nIn --url-template, anytime the `{platform}` string is used, Pants will determine the current platform, and substitute `{platform}` with the respective value from your dictionary.\n\nFor example, if you define `{\"macos_x86_64\": \"apple-darwin\", \"linux_x86_64\": \"unknown-linux\"}, and run Pants on Linux with an intel architecture, then `{platform}` will be substituted in the --url-template option with unknown-linux.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--scc-url-platform-mapping"],
          "typ": "dict",
          "unscoped_cmd_line_args": ["--url-platform-mapping"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": {}
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": {
                  "linux_x86_64": "x86_64-unknown-linux",
                  "macos_arm64": "x86_64-apple-darwin",
                  "macos_x86_64": "x86_64-apple-darwin"
                }
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--scc-args=\"[<shell_str>, <shell_str>, ...]\", ... -- [<shell_str> [<shell_str> [...]]]",
          "config_key": "args",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--scc-args=\"[<shell_str>, <shell_str>, ...]\"",
            "... -- [<shell_str> [<shell_str> [...]]]"
          ],
          "env_var": "PANTS_SCC_ARGS",
          "help": "Arguments to pass directly to SCC, e.g. `--count-loc-args=\"--no-cocomo\"`. Refer to https://github.com/boyter/scc.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--scc-args"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--args"],
          "value_history": {
            "ranked_values": [
              {
                "details": "from command-line flag",
                "rank": "FLAG",
                "value": []
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "description": "The Succinct Code Counter, aka `scc` (https://github.com/boyter/scc).",
      "is_goal": false,
      "scope": "scc"
    },
    "setup-py-generation": {
      "advanced": [],
      "basic": [
        {
          "choices": ["exact", "compatible", "any"],
          "comma_separated_choices": "exact, compatible, any",
          "comma_separated_display_args": "--setup-py-generation-first-party-dependency-version-scheme=<FirstPartyDependencyVersionScheme>",
          "config_key": "first_party_dependency_version_scheme",
          "default": "exact",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--setup-py-generation-first-party-dependency-version-scheme=<FirstPartyDependencyVersionScheme>"
          ],
          "env_var": "PANTS_SETUP_PY_GENERATION_FIRST_PARTY_DEPENDENCY_VERSION_SCHEME",
          "help": "What version to set in `install_requires` when a `python_distribution` depends on other `python_distribution`s. If `exact`, will use `==`. If `compatible`, will use `~=`. If `any`, will leave off the version. See https://www.python.org/dev/peps/pep-0440/#version-specifiers.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--setup-py-generation-first-party-dependency-version-scheme"
          ],
          "typ": "FirstPartyDependencyVersionScheme",
          "unscoped_cmd_line_args": ["--first-party-dependency-version-scheme"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "exact"
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "description": "Options to control how setup.py is generated from a `python_distribution` target.",
      "is_goal": false,
      "scope": "setup-py-generation"
    },
    "setuptools": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--setuptools-version=<str>",
          "config_key": "version",
          "default": "setuptools>=50.3.0,<58.0",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--setuptools-version=<str>"],
          "env_var": "PANTS_SETUPTOOLS_VERSION",
          "help": "Requirement string for the tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--setuptools-version"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--version"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "setuptools>=50.3.0,<58.0"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--setuptools-extra-requirements=\"['<str>', '<str>', ...]\"",
          "config_key": "extra_requirements",
          "default": ["wheel>=0.35.1,<0.38"],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--setuptools-extra-requirements=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_SETUPTOOLS_EXTRA_REQUIREMENTS",
          "help": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--setuptools-extra-requirements"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--extra-requirements"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": ["wheel>=0.35.1,<0.38"]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--setuptools-lockfile=<str>",
          "config_key": "lockfile",
          "default": "<default>",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--setuptools-lockfile=<str>"],
          "env_var": "PANTS_SETUPTOOLS_LOCKFILE",
          "help": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python-setup].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.7.2/src/python/pants/backend/python/subsystems/setuptools_lockfile.txt for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `./pants generate-lockfiles --resolve=setuptools`.\n\nLockfile generation currently does not wire up the `[python-repos]` options. If lockfile generation fails, you can manually generate a lockfile, such as by using pip-compile or `pip freeze`. Set this option to the path to your manually generated lockfile. When manually maintaining lockfiles, set `[python-setup].invalid_lockfile_behavior = 'ignore'`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--setuptools-lockfile"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--lockfile"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "<default>"
              }
            ]
          }
        }
      ],
      "basic": [],
      "deprecated": [],
      "description": "Python setuptools, used to package `python_distribution` targets.",
      "is_goal": false,
      "scope": "setuptools"
    },
    "shell-setup": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--shell-setup-executable-search-paths=\"[<binary-paths>, <binary-paths>, ...]\"",
          "config_key": "executable_search_paths",
          "default": ["<PATH>"],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--shell-setup-executable-search-paths=\"[<binary-paths>, <binary-paths>, ...]\""
          ],
          "env_var": "PANTS_SHELL_SETUP_EXECUTABLE_SEARCH_PATHS",
          "help": "The PATH value that will be used to find shells and to run certain processes like the shunit2 test runner.\n\nThe special string \"<PATH>\" will expand to the contents of the PATH env var.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--shell-setup-executable-search-paths"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--executable-search-paths"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": ["<PATH>"]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]shell-setup-dependency-inference",
          "config_key": "dependency_inference",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]shell-setup-dependency-inference"],
          "env_var": "PANTS_SHELL_SETUP_DEPENDENCY_INFERENCE",
          "help": "Infer Shell dependencies on other Shell files by analyzing `source` statements.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--shell-setup-dependency-inference",
            "--no-shell-setup-dependency-inference"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--dependency-inference",
            "--no-dependency-inference"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        }
      ],
      "basic": [],
      "deprecated": [],
      "description": "Options for Pants's Shell support.",
      "is_goal": false,
      "scope": "shell-setup"
    },
    "shellcheck": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--shellcheck-version=<str>",
          "config_key": "version",
          "default": "v0.7.1",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--shellcheck-version=<str>"],
          "env_var": "PANTS_SHELLCHECK_VERSION",
          "help": "Use this version of shellcheck.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--shellcheck-version"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--version"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "v0.7.1"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--shellcheck-known-versions=\"['<str>', '<str>', ...]\"",
          "config_key": "known_versions",
          "default": [
            "v0.7.1|macos_arm64 |b080c3b659f7286e27004aa33759664d91e15ef2498ac709a452445d47e3ac23|1348272",
            "v0.7.1|macos_x86_64|b080c3b659f7286e27004aa33759664d91e15ef2498ac709a452445d47e3ac23|1348272",
            "v0.7.1|linux_x86_64|64f17152d96d7ec261ad3086ed42d18232fcb65148b44571b564d688269d36c8|1443836"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--shellcheck-known-versions=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_SHELLCHECK_KNOWN_VERSIONS",
          "help": "\nKnown versions to verify downloads against.\n\nEach element is a pipe-separated string of `version|platform|sha256|length`, where:\n\n  - `version` is the version string\n  - `platform` is one of [linux_x86_64,macos_arm64,macos_x86_64],\n  - `sha256` is the 64-character hex representation of the expected sha256\n    digest of the download file, as emitted by `shasum -a 256`\n  - `length` is the expected length of the download file in bytes, as emmitted by\n    `wc -c`\n\nE.g., `3.1.2|macos_x86_64|6d0f18cd84b918c7b3edd0203e75569e0c7caecb1367bbbe409b44e28514f5be|42813`.\n\nValues are space-stripped, so pipes can be indented for readability if necessary.\n",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--shellcheck-known-versions"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--known-versions"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "v0.7.1|macos_arm64 |b080c3b659f7286e27004aa33759664d91e15ef2498ac709a452445d47e3ac23|1348272",
                  "v0.7.1|macos_x86_64|b080c3b659f7286e27004aa33759664d91e15ef2498ac709a452445d47e3ac23|1348272",
                  "v0.7.1|linux_x86_64|64f17152d96d7ec261ad3086ed42d18232fcb65148b44571b564d688269d36c8|1443836"
                ]
              }
            ]
          }
        },
        {
          "choices": ["error", "warning"],
          "comma_separated_choices": "error, warning",
          "comma_separated_display_args": "--shellcheck-use-unsupported-version=<UnsupportedVersionUsage>",
          "config_key": "use_unsupported_version",
          "default": "error",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--shellcheck-use-unsupported-version=<UnsupportedVersionUsage>"
          ],
          "env_var": "PANTS_SHELLCHECK_USE_UNSUPPORTED_VERSION",
          "help": "\nWhat action to take in case the requested version of shellcheck is not supported.\n\nSupported shellcheck versions: unspecified\n",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--shellcheck-use-unsupported-version"],
          "typ": "UnsupportedVersionUsage",
          "unscoped_cmd_line_args": ["--use-unsupported-version"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "error"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--shellcheck-url-template=<str>",
          "config_key": "url_template",
          "default": "https://github.com/koalaman/shellcheck/releases/download/{version}/shellcheck-{version}.{platform}.tar.xz",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--shellcheck-url-template=<str>"],
          "env_var": "PANTS_SHELLCHECK_URL_TEMPLATE",
          "help": "URL to download the tool, either as a single binary file or a compressed file (e.g. zip file). You can change this to point to your own hosted file, e.g. to work with proxies or for access via the filesystem through a file:// URL.\n\nUse `{version}` to have the value from --version substituted, and `{platform}` to have a value from --url-platform-mapping substituted in, depending on the current platform. For example, https://github.com/.../protoc-{version}-{platform}.zip.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--shellcheck-url-template"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--url-template"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "https://github.com/koalaman/shellcheck/releases/download/{version}/shellcheck-{version}.{platform}.tar.xz"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--shellcheck-url-platform-mapping=\"{'key1': val1, 'key2': val2, ...}\"",
          "config_key": "url_platform_mapping",
          "default": {
            "linux_x86_64": "linux.x86_64",
            "macos_arm64": "darwin.x86_64",
            "macos_x86_64": "darwin.x86_64"
          },
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--shellcheck-url-platform-mapping=\"{'key1': val1, 'key2': val2, ...}\""
          ],
          "env_var": "PANTS_SHELLCHECK_URL_PLATFORM_MAPPING",
          "help": "A dictionary mapping platforms to strings to be used when generating the URL to download the tool.\n\nIn --url-template, anytime the `{platform}` string is used, Pants will determine the current platform, and substitute `{platform}` with the respective value from your dictionary.\n\nFor example, if you define `{\"macos_x86_64\": \"apple-darwin\", \"linux_x86_64\": \"unknown-linux\"}, and run Pants on Linux with an intel architecture, then `{platform}` will be substituted in the --url-template option with unknown-linux.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--shellcheck-url-platform-mapping"],
          "typ": "dict",
          "unscoped_cmd_line_args": ["--url-platform-mapping"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": {}
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": {
                  "linux_x86_64": "linux.x86_64",
                  "macos_arm64": "darwin.x86_64",
                  "macos_x86_64": "darwin.x86_64"
                }
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]shellcheck-config-discovery",
          "config_key": "config_discovery",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]shellcheck-config-discovery"],
          "env_var": "PANTS_SHELLCHECK_CONFIG_DISCOVERY",
          "help": "If true, Pants will include all relevant `.shellcheckrc` and `shellcheckrc` files during runs. See https://www.mankier.com/1/shellcheck#RC_Files for where these can be located.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--shellcheck-config-discovery",
            "--no-shellcheck-config-discovery"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--config-discovery",
            "--no-config-discovery"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]shellcheck-skip",
          "config_key": "skip",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]shellcheck-skip"],
          "env_var": "PANTS_SHELLCHECK_SKIP",
          "help": "Don't use Shellcheck when running `./pants lint`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--shellcheck-skip", "--no-shellcheck-skip"],
          "typ": "bool",
          "unscoped_cmd_line_args": ["--skip", "--no-skip"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--shellcheck-args=\"[<shell_str>, <shell_str>, ...]\"",
          "config_key": "args",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--shellcheck-args=\"[<shell_str>, <shell_str>, ...]\""
          ],
          "env_var": "PANTS_SHELLCHECK_ARGS",
          "help": "Arguments to pass directly to Shellcheck, e.g. `--shellcheck-args='-e SC20529'`.'",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--shellcheck-args"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--args"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "description": "A linter for shell scripts.",
      "is_goal": false,
      "scope": "shellcheck"
    },
    "shfmt": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--shfmt-version=<str>",
          "config_key": "version",
          "default": "v3.2.4",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--shfmt-version=<str>"],
          "env_var": "PANTS_SHFMT_VERSION",
          "help": "Use this version of shfmt.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--shfmt-version"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--version"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "v3.2.4"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--shfmt-known-versions=\"['<str>', '<str>', ...]\"",
          "config_key": "known_versions",
          "default": [
            "v3.2.4|macos_arm64 |e70fc42e69debe3e400347d4f918630cdf4bf2537277d672bbc43490387508ec|2998546",
            "v3.2.4|macos_x86_64|43a0461a1b54070ddc04fbbf1b78f7861ee39a65a61f5466d15a39c4aba4f917|2980208",
            "v3.2.4|linux_x86_64|3f5a47f8fec27fae3e06d611559a2063f5d27e4b9501171dde9959b8c60a3538|2797568"
          ],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--shfmt-known-versions=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_SHFMT_KNOWN_VERSIONS",
          "help": "\nKnown versions to verify downloads against.\n\nEach element is a pipe-separated string of `version|platform|sha256|length`, where:\n\n  - `version` is the version string\n  - `platform` is one of [linux_x86_64,macos_arm64,macos_x86_64],\n  - `sha256` is the 64-character hex representation of the expected sha256\n    digest of the download file, as emitted by `shasum -a 256`\n  - `length` is the expected length of the download file in bytes, as emmitted by\n    `wc -c`\n\nE.g., `3.1.2|macos_x86_64|6d0f18cd84b918c7b3edd0203e75569e0c7caecb1367bbbe409b44e28514f5be|42813`.\n\nValues are space-stripped, so pipes can be indented for readability if necessary.\n",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--shfmt-known-versions"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--known-versions"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": [
                  "v3.2.4|macos_arm64 |e70fc42e69debe3e400347d4f918630cdf4bf2537277d672bbc43490387508ec|2998546",
                  "v3.2.4|macos_x86_64|43a0461a1b54070ddc04fbbf1b78f7861ee39a65a61f5466d15a39c4aba4f917|2980208",
                  "v3.2.4|linux_x86_64|3f5a47f8fec27fae3e06d611559a2063f5d27e4b9501171dde9959b8c60a3538|2797568"
                ]
              }
            ]
          }
        },
        {
          "choices": ["error", "warning"],
          "comma_separated_choices": "error, warning",
          "comma_separated_display_args": "--shfmt-use-unsupported-version=<UnsupportedVersionUsage>",
          "config_key": "use_unsupported_version",
          "default": "error",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--shfmt-use-unsupported-version=<UnsupportedVersionUsage>"
          ],
          "env_var": "PANTS_SHFMT_USE_UNSUPPORTED_VERSION",
          "help": "\nWhat action to take in case the requested version of shfmt is not supported.\n\nSupported shfmt versions: unspecified\n",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--shfmt-use-unsupported-version"],
          "typ": "UnsupportedVersionUsage",
          "unscoped_cmd_line_args": ["--use-unsupported-version"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "error"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--shfmt-url-template=<str>",
          "config_key": "url_template",
          "default": "https://github.com/mvdan/sh/releases/download/{version}/shfmt_{version}_{platform}",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--shfmt-url-template=<str>"],
          "env_var": "PANTS_SHFMT_URL_TEMPLATE",
          "help": "URL to download the tool, either as a single binary file or a compressed file (e.g. zip file). You can change this to point to your own hosted file, e.g. to work with proxies or for access via the filesystem through a file:// URL.\n\nUse `{version}` to have the value from --version substituted, and `{platform}` to have a value from --url-platform-mapping substituted in, depending on the current platform. For example, https://github.com/.../protoc-{version}-{platform}.zip.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--shfmt-url-template"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--url-template"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "https://github.com/mvdan/sh/releases/download/{version}/shfmt_{version}_{platform}"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--shfmt-url-platform-mapping=\"{'key1': val1, 'key2': val2, ...}\"",
          "config_key": "url_platform_mapping",
          "default": {
            "linux_x86_64": "linux_amd64",
            "macos_arm64": "darwin_arm64",
            "macos_x86_64": "darwin_amd64"
          },
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--shfmt-url-platform-mapping=\"{'key1': val1, 'key2': val2, ...}\""
          ],
          "env_var": "PANTS_SHFMT_URL_PLATFORM_MAPPING",
          "help": "A dictionary mapping platforms to strings to be used when generating the URL to download the tool.\n\nIn --url-template, anytime the `{platform}` string is used, Pants will determine the current platform, and substitute `{platform}` with the respective value from your dictionary.\n\nFor example, if you define `{\"macos_x86_64\": \"apple-darwin\", \"linux_x86_64\": \"unknown-linux\"}, and run Pants on Linux with an intel architecture, then `{platform}` will be substituted in the --url-template option with unknown-linux.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--shfmt-url-platform-mapping"],
          "typ": "dict",
          "unscoped_cmd_line_args": ["--url-platform-mapping"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": {}
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": {
                  "linux_x86_64": "linux_amd64",
                  "macos_arm64": "darwin_arm64",
                  "macos_x86_64": "darwin_amd64"
                }
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]shfmt-config-discovery",
          "config_key": "config_discovery",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]shfmt-config-discovery"],
          "env_var": "PANTS_SHFMT_CONFIG_DISCOVERY",
          "help": "If true, Pants will include all relevant `.editorconfig` files during runs. See https://editorconfig.org.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--shfmt-config-discovery",
            "--no-shfmt-config-discovery"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--config-discovery",
            "--no-config-discovery"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]shfmt-skip",
          "config_key": "skip",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]shfmt-skip"],
          "env_var": "PANTS_SHFMT_SKIP",
          "help": "Don't use shfmt when running `./pants fmt` and `./pants lint`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--shfmt-skip", "--no-shfmt-skip"],
          "typ": "bool",
          "unscoped_cmd_line_args": ["--skip", "--no-skip"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--shfmt-args=\"[<shell_str>, <shell_str>, ...]\"",
          "config_key": "args",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--shfmt-args=\"[<shell_str>, <shell_str>, ...]\""],
          "env_var": "PANTS_SHFMT_ARGS",
          "help": "Arguments to pass directly to shfmt, e.g. `--shfmt-args='-i 2'`.'",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--shfmt-args"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--args"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "description": "An autoformatter for shell scripts (https://github.com/mvdan/sh).",
      "is_goal": false,
      "scope": "shfmt"
    },
    "source": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--source-root-patterns=\"[[\"pattern1\", \"pattern2\", ...], [\"pattern1\", \"pattern2\", ...], ...]\"",
          "config_key": "root_patterns",
          "default": ["/", "src", "src/python", "src/py"],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--source-root-patterns=\"[[\"pattern1\", \"pattern2\", ...], [\"pattern1\", \"pattern2\", ...], ...]\""
          ],
          "env_var": "PANTS_SOURCE_ROOT_PATTERNS",
          "help": "A list of source root suffixes. A directory with this suffix will be considered a potential source root. E.g., `src/python` will match `<buildroot>/src/python`, `<buildroot>/project1/src/python` etc. Prepend a `/` to anchor the match at the buildroot. E.g., `/src/python` will match `<buildroot>/src/python` but not `<buildroot>/project1/src/python`. A `*` wildcard will match a single path segment, e.g., `src/*` will match `<buildroot>/src/python` and `<buildroot>/src/rust`. Use `/` to signify that the buildroot itself is a source root. See https://www.pantsbuild.org/v2.7/docs/source-roots.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--source-root-patterns"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--root-patterns"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": ["/", "src", "src/python", "src/py"]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--source-marker-filenames=\"[filename, filename, ...]\"",
          "config_key": "marker_filenames",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--source-marker-filenames=\"[filename, filename, ...]\""
          ],
          "env_var": "PANTS_SOURCE_MARKER_FILENAMES",
          "help": "The presence of a file of this name in a directory indicates that the directory is a source root. The content of the file doesn't matter, and may be empty. Useful when you can't or don't wish to centrally enumerate source roots via `root_patterns`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--source-marker-filenames"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--marker-filenames"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              }
            ]
          }
        }
      ],
      "basic": [],
      "deprecated": [],
      "description": "Configuration for roots of source trees.",
      "is_goal": false,
      "scope": "source"
    },
    "sourcefile-validation": {
      "advanced": [],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--sourcefile-validation-config=\"{'key1': val1, 'key2': val2, ...}\"",
          "config_key": "config",
          "default": {},
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--sourcefile-validation-config=\"{'key1': val1, 'key2': val2, ...}\""
          ],
          "env_var": "PANTS_SOURCEFILE_VALIDATION_CONFIG",
          "help": "\nConfig schema is as follows:\n\n{\n  'path_patterns': [\n    {\n      'name': path_pattern1',\n      'pattern': <path regex pattern>,\n      'inverted': True|False (defaults to False),\n      'content_encoding': <encoding> (defaults to utf8)\n    },\n    ...\n  ],\n  'content_patterns': [\n    {\n      'name': 'content_pattern1',\n      'pattern': <content regex pattern>,\n      'inverted': True|False (defaults to False)\n    }\n    ...\n  ],\n  'required_matches': {\n    'path_pattern1': [content_pattern1, content_pattern2],\n    'path_pattern2': [content_pattern1, content_pattern3],\n    ...\n  }\n}\n\nMeaning: if a file matches some path pattern, its content must match all\nthe corresponding content patterns.\n",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--sourcefile-validation-config"],
          "typ": "dict",
          "unscoped_cmd_line_args": ["--config"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": {}
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "description": "Configuration for source file validation.",
      "is_goal": false,
      "scope": "sourcefile-validation"
    },
    "stats": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]stats-log",
          "config_key": "log",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]stats-log"],
          "env_var": "PANTS_STATS_LOG",
          "help": "At the end of the Pants run, log all counter metrics and summaries of observation histograms, e.g. the number of cache hits and the time saved by caching.\n\nFor histogram summaries to work, you must add `hdrhistogram` to `[GLOBAL].plugins`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--stats-log", "--no-stats-log"],
          "typ": "bool",
          "unscoped_cmd_line_args": ["--log", "--no-log"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        }
      ],
      "basic": [],
      "deprecated": [],
      "description": "An aggregator for Pants stats, such as cache metrics.",
      "is_goal": false,
      "scope": "stats"
    },
    "subprocess-environment": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--subprocess-environment-env-vars=\"['<str>', '<str>', ...]\"",
          "config_key": "env_vars",
          "default": ["LANG", "LC_CTYPE", "LC_ALL"],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--subprocess-environment-env-vars=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_SUBPROCESS_ENVIRONMENT_ENV_VARS",
          "help": "Environment variables to set for process invocations. Entries are either strings in the form `ENV_VAR=value` to set an explicit value; or just `ENV_VAR` to copy the value from Pants's own environment.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--subprocess-environment-env-vars"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--env-vars"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": ["LANG", "LC_CTYPE", "LC_ALL"]
              }
            ]
          }
        }
      ],
      "basic": [],
      "deprecated": [],
      "description": "Environment settings for forked subprocesses.",
      "is_goal": false,
      "scope": "subprocess-environment"
    },
    "tailor": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--tailor-build-file-indent=<str>",
          "config_key": "build_file_indent",
          "default": "    ",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--tailor-build-file-indent=<str>"],
          "env_var": "PANTS_TAILOR_BUILD_FILE_INDENT",
          "help": "The indent to use when auto-editing BUILD files.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--tailor-build-file-indent"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--build-file-indent"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "    "
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--tailor-alias-mapping=\"{'key1': val1, 'key2': val2, ...}\"",
          "config_key": "alias_mapping",
          "default": {},
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--tailor-alias-mapping=\"{'key1': val1, 'key2': val2, ...}\""
          ],
          "env_var": "PANTS_TAILOR_ALIAS_MAPPING",
          "help": "A mapping from standard target type to custom type to use instead. The custom type can be a custom target type or a macro that offers compatible functionality to the one it replaces (see https://www.pantsbuild.org/v2.7/docs/macros).",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--tailor-alias-mapping"],
          "typ": "dict",
          "unscoped_cmd_line_args": ["--alias-mapping"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": {}
              }
            ]
          }
        }
      ],
      "basic": [],
      "deprecated": [],
      "description": "Auto-generate BUILD file targets for new source files.",
      "is_goal": true,
      "scope": "tailor"
    },
    "test": {
      "advanced": [],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]test-debug",
          "config_key": "debug",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]test-debug"],
          "env_var": "PANTS_TEST_DEBUG",
          "help": "Run tests sequentially in an interactive process. This is necessary, for example, when you add breakpoints to your code.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--test-debug", "--no-test-debug"],
          "typ": "bool",
          "unscoped_cmd_line_args": ["--debug", "--no-debug"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]test-force",
          "config_key": "force",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]test-force"],
          "env_var": "PANTS_TEST_FORCE",
          "help": "Force the tests to run, even if they could be satisfied from cache.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--test-force", "--no-test-force"],
          "typ": "bool",
          "unscoped_cmd_line_args": ["--force", "--no-force"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": ["all", "failed", "none"],
          "comma_separated_choices": "all, failed, none",
          "comma_separated_display_args": "--test-output=<ShowOutput>",
          "config_key": "output",
          "default": "failed",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--test-output=<ShowOutput>"],
          "env_var": "PANTS_TEST_OUTPUT",
          "help": "Show stdout/stderr for these tests.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--test-output"],
          "typ": "ShowOutput",
          "unscoped_cmd_line_args": ["--output"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "failed"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]test-use-coverage",
          "config_key": "use_coverage",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]test-use-coverage"],
          "env_var": "PANTS_TEST_USE_COVERAGE",
          "help": "Generate a coverage report if the test runner supports it.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--test-use-coverage",
            "--no-test-use-coverage"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": ["--use-coverage", "--no-use-coverage"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]test-open-coverage",
          "config_key": "open_coverage",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]test-open-coverage"],
          "env_var": "PANTS_TEST_OPEN_COVERAGE",
          "help": "If a coverage report file is generated, open it on the local system if the system supports this.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--test-open-coverage",
            "--no-test-open-coverage"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": ["--open-coverage", "--no-open-coverage"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--test-extra-env-vars=\"['<str>', '<str>', ...]\"",
          "config_key": "extra_env_vars",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--test-extra-env-vars=\"['<str>', '<str>', ...]\""],
          "env_var": "PANTS_TEST_EXTRA_ENV_VARS",
          "help": "Additional environment variables to include in test processes. Entries are strings in the form `ENV_VAR=value` to use explicitly; or just `ENV_VAR` to copy the value of a variable in Pants's own environment.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--test-extra-env-vars"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--extra-env-vars"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": []
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "description": "Run tests.",
      "is_goal": true,
      "scope": "test"
    },
    "typecheck": {
      "advanced": [],
      "basic": [],
      "deprecated": [],
      "description": "Run type checkers.",
      "is_goal": true,
      "scope": "typecheck"
    },
    "validate": {
      "advanced": [],
      "basic": [
        {
          "choices": ["none", "summary", "nonmatching", "names", "all"],
          "comma_separated_choices": "none, summary, nonmatching, names, all",
          "comma_separated_display_args": "--validate-detail-level=<DetailLevel>",
          "config_key": "detail_level",
          "default": "nonmatching",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--validate-detail-level=<DetailLevel>"],
          "env_var": "PANTS_VALIDATE_DETAIL_LEVEL",
          "help": "How much detail to emit to the console.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--validate-detail-level"],
          "typ": "DetailLevel",
          "unscoped_cmd_line_args": ["--detail-level"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "nonmatching"
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "description": "Validate sources against regexes.",
      "is_goal": true,
      "scope": "validate"
    },
    "yapf": {
      "advanced": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--yapf-version=<str>",
          "config_key": "version",
          "default": "yapf==0.31.0",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--yapf-version=<str>"],
          "env_var": "PANTS_YAPF_VERSION",
          "help": "Requirement string for the tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--yapf-version"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--version"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "yapf==0.31.0"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--yapf-extra-requirements=\"['<str>', '<str>', ...]\"",
          "config_key": "extra_requirements",
          "default": ["toml"],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--yapf-extra-requirements=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_YAPF_EXTRA_REQUIREMENTS",
          "help": "Any additional requirement strings to use with the tool. This is useful if the tool allows you to install plugins or if you need to constrain a dependency to a certain version.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--yapf-extra-requirements"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--extra-requirements"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": ["toml"]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--yapf-interpreter-constraints=\"['<str>', '<str>', ...]\"",
          "config_key": "interpreter_constraints",
          "default": ["CPython>=3.6"],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": [
            "--yapf-interpreter-constraints=\"['<str>', '<str>', ...]\""
          ],
          "env_var": "PANTS_YAPF_INTERPRETER_CONSTRAINTS",
          "help": "Python interpreter constraints for this tool.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--yapf-interpreter-constraints"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--interpreter-constraints"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              },
              {
                "details": "",
                "rank": "HARDCODED",
                "value": ["CPython>=3.6"]
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--yapf-lockfile=<str>",
          "config_key": "lockfile",
          "default": "<default>",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--yapf-lockfile=<str>"],
          "env_var": "PANTS_YAPF_LOCKFILE",
          "help": "Path to a lockfile used for installing the tool.\n\nSet to the string `<default>` to use a lockfile provided by Pants, so long as you have not changed the `--version` and `--extra-requirements` options, and the tool's interpreter constraints are compatible with the default. Pants will error or warn if the lockfile is not compatible (controlled by `[python-setup].invalid_lockfile_behavior`). See https://github.com/pantsbuild/pants/blob/release_2.7.2/src/python/pants/backend/python/lint/yapf/lockfile.txt for the default lockfile contents.\n\nSet to the string `<none>` to opt out of using a lockfile. We do not recommend this, though, as lockfiles are essential for reproducible builds.\n\nTo use a custom lockfile, set this option to a file path relative to the build root, then run `./pants generate-lockfiles --resolve=yapf`.\n\nLockfile generation currently does not wire up the `[python-repos]` options. If lockfile generation fails, you can manually generate a lockfile, such as by using pip-compile or `pip freeze`. Set this option to the path to your manually generated lockfile. When manually maintaining lockfiles, set `[python-setup].invalid_lockfile_behavior = 'ignore'`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--yapf-lockfile"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--lockfile"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "<default>"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--yapf-console-script=<str>",
          "config_key": "console_script",
          "default": "yapf",
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--yapf-console-script=<str>"],
          "env_var": "PANTS_YAPF_CONSOLE_SCRIPT",
          "help": "The console script for the tool. Using this option is generally preferable to (and mutually exclusive with) specifying an --entry-point since console script names have a higher expectation of staying stable across releases of the tool. Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--yapf-console-script"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--console-script"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": "yapf"
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--yapf-entry-point=<str>",
          "config_key": "entry_point",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--yapf-entry-point=<str>"],
          "env_var": "PANTS_YAPF_ENTRY_POINT",
          "help": "The entry point for the tool. Generally you only want to use this option if the tool does not offer a --console-script (which this option is mutually exclusive with). Usually, you will not want to change this from the default.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--yapf-entry-point"],
          "typ": "str",
          "unscoped_cmd_line_args": ["--entry-point"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--yapf-config=<file_option>",
          "config_key": "config",
          "default": null,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--yapf-config=<file_option>"],
          "env_var": "PANTS_YAPF_CONFIG",
          "help": "Path to style file understood by yapf (https://github.com/google/yapf#formatting-style/).\n\nSetting this option will disable `[yapf].config_discovery`. Use this option if the config is located in a non-standard location.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--yapf-config"],
          "typ": "file_option",
          "unscoped_cmd_line_args": ["--config"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]yapf-config-discovery",
          "config_key": "config_discovery",
          "default": true,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]yapf-config-discovery"],
          "env_var": "PANTS_YAPF_CONFIG_DISCOVERY",
          "help": "If true, Pants will include any relevant config files during runs (`.style.yapf`, `pyproject.toml`, and `setup.cfg`).\n\nUse `[yapf].config` instead if your config is in a non-standard location.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": [
            "--yapf-config-discovery",
            "--no-yapf-config-discovery"
          ],
          "typ": "bool",
          "unscoped_cmd_line_args": [
            "--config-discovery",
            "--no-config-discovery"
          ],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": true
              }
            ]
          }
        }
      ],
      "basic": [
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--[no-]yapf-skip",
          "config_key": "skip",
          "default": false,
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--[no-]yapf-skip"],
          "env_var": "PANTS_YAPF_SKIP",
          "help": "Don't use yapf when running `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 fmt` and `/home/josh/work/scie-pants/dist/scie-pants-linux-x86_64 lint`.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--yapf-skip", "--no-yapf-skip"],
          "typ": "bool",
          "unscoped_cmd_line_args": ["--skip", "--no-skip"],
          "value_history": {
            "ranked_values": [
              {
                "details": null,
                "rank": "NONE",
                "value": null
              },
              {
                "details": null,
                "rank": "HARDCODED",
                "value": false
              }
            ]
          }
        },
        {
          "choices": null,
          "comma_separated_choices": null,
          "comma_separated_display_args": "--yapf-args=\"[<shell_str>, <shell_str>, ...]\"",
          "config_key": "args",
          "default": [],
          "deprecated_message": null,
          "deprecation_active": false,
          "display_args": ["--yapf-args=\"[<shell_str>, <shell_str>, ...]\""],
          "env_var": "PANTS_YAPF_ARGS",
          "help": "Arguments to pass directly to yapf, e.g. `--yapf-args=\"--no-local-style\"`.\n\nCertain arguments, specifically `--recursive`, `--in-place`, and `--parallel`, will be ignored because Pants takes care of finding all the relevant files and running the formatting in parallel.",
          "removal_hint": null,
          "removal_version": null,
          "scoped_cmd_line_args": ["--yapf-args"],
          "typ": "list",
          "unscoped_cmd_line_args": ["--args"],
          "value_history": {
            "ranked_values": [
              {
                "details": "",
                "rank": "NONE",
                "value": []
              }
            ]
          }
        }
      ],
      "deprecated": [],
      "description": "A formatter for Python files (https://github.com/google/yapf).",
      "is_goal": false,
      "scope": "yapf"
    }
  }
}
